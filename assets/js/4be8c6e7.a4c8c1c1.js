"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3757],{1208:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"python/reference/decorators","title":"Decorators","description":"API reference for DBOS decorators.","source":"@site/docs/python/reference/decorators.md","sourceDirName":"python/reference","slug":"/python/reference/decorators","permalink":"/python/reference/decorators","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Decorators","description":"API reference for DBOS decorators."},"sidebar":"tutorialSidebar","previous":{"title":"DBOS Class","permalink":"/python/reference/dbos-class"},"next":{"title":"DBOS Methods & Variables","permalink":"/python/reference/contexts"}}');var t=s(4848),o=s(8453);const i={sidebar_position:2,title:"Decorators",description:"API reference for DBOS decorators."},a=void 0,c={},l=[{value:"Function Decorators",id:"function-decorators",level:2},{value:"workflow",id:"workflow",level:3},{value:"step",id:"step",level:3},{value:"transaction",id:"transaction",level:3},{value:"scheduled",id:"scheduled",level:3},{value:"required_roles",id:"required_roles",level:3},{value:"kafka_consumer",id:"kafka_consumer",level:3},{value:"Classes and Decorators",id:"classes-and-decorators",level:2},{value:"dbos_class",id:"dbos_class",level:3},{value:"default_required_roles",id:"default_required_roles",level:3},{value:"DBOSConfiguredInstance",id:"dbosconfiguredinstance",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"In DBOS, you annotate functions with decorators to give them properties."}),"\n",(0,t.jsx)(n.h2,{id:"function-decorators",children:"Function Decorators"}),"\n",(0,t.jsx)(n.h3,{id:"workflow",children:"workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.workflow(\n  max_recovery_attempts: Optional[int] = 100\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Durably execute this function as a ",(0,t.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial",children:"DBOS workflow"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@DBOS.workflow()\ndef greeting_workflow(name: str, note: str):\n    sign_guestbook(name)\n    insert_greeting(name, note)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"max_recovery_attempts"}),": The maximum number of times the workflow may be attempted.\nThis acts as a ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Dead_letter_queue",children:"dead letter queue"})," so that a buggy workflow that crashes its application (for example, by running it out of memory) does not do so infinitely.\nIf a workflow exceeds this limit, its status is set to ",(0,t.jsx)(n.code,{children:"RETRIES_EXCEEDED"})," and it is no longer automatically recovered.\nIf this behavior is not desired, it may be disabled by setting ",(0,t.jsx)(n.code,{children:"max_recovery_attempts=None"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step",children:"step"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.step(\n    retries_allowed: bool = False,\n    interval_seconds: float = 1.0,\n    max_attempts: int = 3,\n    backoff_rate: float = 2.0\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Mark a function as a step in a workflow.\nThis has two benefits:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"It lets workflows know this function performs a complex operation or interacts with an external service, so the workflow can guarantee those operations or interactions happen exactly-once."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"DBOS provides configurable automatic retries with exponential backoff for steps to more easily handle transient errors."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@DBOS.step(retries_allowed=True, max_attempts=10)\ndef example_step():\n    return requests.get("https://example.com").text\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"retries_allowed"}),": Whether to retry the step if it throws an exception."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"interval_seconds"}),": How long to wait before the initial retry."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"max_attempts"}),": How many times to retry a step that is throwing exceptions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"backoff_rate"}),": How much to multiplicatively increase ",(0,t.jsx)(n.code,{children:"interval_seconds"})," between retries."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"transaction",children:"transaction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'DBOS.transaction(\n    isolation_level: str = "SERIALIZABLE"\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Transactions are a special type of step that are optimized for database operations.\nThey execute as a single ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_transaction",children:"database transaction"}),".\nThey provide database access through the ",(0,t.jsx)(n.code,{children:"DBOS.sql_session"})," context variable."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@DBOS.transaction()\ndef example_insert(name: str, note: str) -> None:\n    # Insert a new greeting into the database\n    sql = text("INSERT INTO greetings (name, note) VALUES (:name, :note)")\n    DBOS.sql_session.execute(sql, {"name": name, "note": note})\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isolation_level"}),": The isolation level with which to run the transaction. Must be one of ",(0,t.jsx)(n.code,{children:"SERIALIZABLE"}),", ",(0,t.jsx)(n.code,{children:"REPEATABLE READ"}),", or ",(0,t.jsx)(n.code,{children:"READ COMMITTED"}),". Defaults to ",(0,t.jsx)(n.code,{children:"SERIALIZABLE"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"scheduled",children:"scheduled"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.scheduled(\n    cron: str\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Run a function on a schedule specified using ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"crontab"})," syntax. See ",(0,t.jsx)(n.a,{href:"https://docs.gitlab.com/ee/topics/cron/",children:"here"})," for a guide to cron syntax and ",(0,t.jsx)(n.a,{href:"https://crontab.guru/",children:"here"})," for a crontab editor."]}),"\n",(0,t.jsxs)(n.p,{children:["The annotated function must take in two parameters: The time that the run was scheduled (as a ",(0,t.jsx)(n.code,{children:"datetime"}),") and the time that the run was actually started (also a ",(0,t.jsx)(n.code,{children:"datetime"}),").  Functions within classes may be marked as ",(0,t.jsx)(n.code,{children:"@staticmethod"})," to meet this requirement."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@DBOS.scheduled('* * * * *') # crontab syntax to run once every minute\n@DBOS.workflow()\ndef example_scheduled_workflow(scheduled_time: datetime, actual_time: datetime):\n    DBOS.logger.info(\"I am a workflow scheduled to run once a minute. \")\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cron"}),": The schedule in ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"crontab"})," syntax. DBOS uses ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/croniter/",children:"croniter"})," to parse cron schedules, which is able to do second repetition and by default we use seconds as the first field (",(0,t.jsx)(n.a,{href:"https://pypi.org/project/croniter/#about-second-repeats",children:(0,t.jsx)(n.code,{children:"second_at_beginning=True"})}),"). The DBOS variant contains 5 or 6 items, separated by spaces:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:" \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 second (optional)\n \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute\n \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour\n \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month\n \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500 month\n \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500 day of week\n \u2502 \u2502 \u2502 \u2502 \u2502 \u2502\n \u2502 \u2502 \u2502 \u2502 \u2502 \u2502\n * * * * * *\n"})}),"\n",(0,t.jsx)(n.h3,{id:"required_roles",children:"required_roles"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.required_roles(\n  roles: List[str]\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@DBOS.dbos_required_roles"})," decorator applies role-based security to the decorated function.  The authenticated user must have at least one of the roles on the ",(0,t.jsx)(n.code,{children:"roles"})," list in order to access the function."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"roles"}),": List of required roles applied to the decorated function."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\n@DBOS.required_roles(["support","admin")\ndef my_support_workflow():\n  pass # Function accessible only with "support" or "admin" role\n'})}),"\n",(0,t.jsx)(n.h3,{id:"kafka_consumer",children:"kafka_consumer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.kafka_consumer(\n        config: dict[str, Any],\n        topics: list[str],\n        in_order: bool = False,\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Runs a function for each Kafka message received on the specified topic(s).\nUses the Kafka message's topic, partition and offset to create a unique ",(0,t.jsx)(n.a,{href:"../reference/contexts#setworkflowid",children:"workflow id"})," to ensure once and only once execution.\nTakes a configuration dictionary and a list of topics to consume.\nThe decorated function must take a KafkaMessage as its only parameter."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"}),": a dictionary of config settings. Information on required settings follows with full configuration setting details available in the ",(0,t.jsx)(n.a,{href:"https://kafka.apache.org/documentation/#consumerconfigs",children:"official Kafka documentation"}),".","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bootstrap.servers"}),": A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.\nThis list should be in the form host1",":port1",",host2",":port2",",..."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"group.id"}),": A unique string that identifies the consumer group this consumer belongs to."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"topics"}),": a list of Kafka topics to subscribe to"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"in_order"}),": If true, messages will be processed sequentially in offset order."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@DBOS.kafka_consumer(\n        config={\n            "bootstrap.servers": "localhost:9092",\n            "group.id": "dbos-kafka-group",\n        },\n        topics=["example-topic"],\n)\n@DBOS.workflow()\ndef test_kafka_workflow(msg: KafkaMessage):\n    DBOS.logger.info(f"Message received: {msg.value.decode()}")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"classes-and-decorators",children:"Classes and Decorators"}),"\n",(0,t.jsxs)(n.p,{children:["Methods in classes can be decorated with any of the ",(0,t.jsx)(n.a,{href:"#function-decorators",children:"function decorators"})," above.\nFunctions marked as ",(0,t.jsx)(n.code,{children:"@classmethod"})," or ",(0,t.jsx)(n.code,{children:"@staticmethod"})," are supported in the same way as regular functions.\nClasses with instance methods should extend from ",(0,t.jsx)(n.a,{href:"#dbosconfiguredinstance",children:(0,t.jsx)(n.code,{children:"DBOSConfiguredInstance"})}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"dbos_class",children:"dbos_class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.dbos_class(\n  class_name: Optional[str]\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@DBOS.dbos_class"})," decorator should be applied to all classes with DBOS workflow, transaction, and step functions.  This decorator assists in making sure all functions are properly registered with the class and provided with class-level configuration information."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"class_name"})," (Optional): A custom name to register the class with DBOS. By default, DBOS uses the class\u2019s qualified name (",(0,t.jsx)(n.code,{children:"cls.__qualname__"}),") for identification. This can be overridden by providing a user-defined name, which may differ from the qualified name. All class names registered with DBOS must be globally unique."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@DBOS.dbos_class()\nclass MyClass:\n  @staticmethod\n  @DBOS.workflow()\n  def my_class_wf():\n    pass\n"})}),"\n",(0,t.jsx)(n.h3,{id:"default_required_roles",children:"default_required_roles"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.default_required_roles(\n  roles: List[str]\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@DBOS.default_required_roles"})," decorator can be applied to a class to set the default list of required access roles for all functions in the class.  The list of required roles for individual functions can be overridden with ",(0,t.jsx)(n.a,{href:"#required_roles",children:(0,t.jsx)(n.code,{children:"required_roles"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"roles"}),": List of required roles to apply to all functions not individually decorated with ",(0,t.jsx)(n.a,{href:"#required_roles",children:(0,t.jsx)(n.code,{children:"required_roles"})}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@DBOS.default_required_roles(["user"])\nclass MyClass:\n  @staticmethod\n  @DBOS.workflow()\n  def my_user_function() -> None:\n    pass  # Must have "user" role to access\n\n  @staticmethod\n  @DBOS.workflow()\n  @DBOS.required_roles(["admin"])\n  def my_admin_function() -> None:\n    pass  # Must have "admin" role to access\n'})}),"\n",(0,t.jsx)(n.h3,{id:"dbosconfiguredinstance",children:"DBOSConfiguredInstance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOSConfiguredInstance(\n  instance_name: str\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DBOSConfiguredInstance"})," should be used as a base for classes with decorated instance member functions.\n",(0,t.jsx)(n.code,{children:"DBOSConfiguredInstance"})," collects the instance name; this name is recorded in the database workflow records so that recovery can be targeted to the correct instance.\n",(0,t.jsx)(n.code,{children:"DBOSConfiguredInstance"})," also registers the class instance with the DBOS recovery system."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"instance_name"}),": The name of the instance, for recording in workflow database records"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'    @DBOS.dbos_class()\n    class DBOSTestClass(DBOSConfiguredInstance):\n        def __init__(self) -> None:\n            super().__init__("instance1")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(6540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);