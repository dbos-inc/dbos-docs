"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7719],{514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"python/examples/hacker-news-agent","title":"Hacker News Research Agent","description":"In this example, we use DBOS to build an AI deep research agent that autonomously searches Hacker News for information on any topic.","source":"@site/docs/python/examples/hacker-news-agent.md","sourceDirName":"python/examples","slug":"/python/examples/hacker-news-agent","permalink":"/python/examples/hacker-news-agent","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":10,"title":"Hacker News Research Agent"},"sidebar":"examplesSidebar","previous":{"title":"Overview","permalink":"/examples/"},"next":{"title":"Document Ingestion Pipeline","permalink":"/python/examples/document-detective"}}');var i=t(4848),r=t(8453);const o={displayed_sidebar:"examplesSidebar",sidebar_position:10,title:"Hacker News Research Agent"},a=void 0,c={},l=[{value:"Main Research Workflow",id:"main-research-workflow",level:2},{value:"Research Query Workflow",id:"research-query-workflow",level:2},{value:"Agent Decision-Making Steps",id:"agent-decision-making-steps",level:2},{value:"Search API Steps",id:"search-api-steps",level:2},{value:"Synthesize Findings Step",id:"synthesize-findings-step",level:2},{value:"Try it Yourself!",id:"try-it-yourself",level:2},{value:"Setting Up OpenAI",id:"setting-up-openai",level:3},{value:"Running Locally",id:"running-locally",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In this example, we use DBOS to build an AI deep research agent that autonomously searches Hacker News for information on any topic."}),"\n",(0,i.jsxs)(n.p,{children:["This example demonstrates how to build ",(0,i.jsx)(n.strong,{children:"reliable, durable AI agents"})," with DBOS.\nThe agent starts with a research topic, autonomously searches for related information, makes decisions about when to continue research, and synthesizes findings into a comprehensive report.\nBecause the agent is implemented as a DBOS durable workflow, it can automatically recover from any failure and continue research from where it left off, ensuring no work is lost."]}),"\n",(0,i.jsxs)(n.p,{children:["This example also demonstrates how easy it is to add DBOS to an existing agentic application.\nAdding DBOS to this agent to make it reliable and observable required changing ",(0,i.jsx)(n.strong,{children:"<20 lines of code"}),".\nAll you have to do is annotate workflows and steps."]}),"\n",(0,i.jsxs)(n.p,{children:["All source code is ",(0,i.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/hacker-news-agent",children:"available on GitHub"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"main-research-workflow",children:"Main Research Workflow"}),"\n",(0,i.jsx)(n.p,{children:"The core of the agent is the main research workflow.\nIt starts with a topic and autonomously explores related queries until it has enough information, then synthesizes a final report."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef agentic_research_workflow(topic: str, max_iterations: int) -> Dict[str, Any]:\n    """Main agentic workflow that autonomously researches a topic.\n\n    This demonstrates a complete agentic workflow using DBOS.\n    The agent starts with a research topic then:\n    1. Searches Hacker News for information on that topic.\n    2. Iteratively searches related queries, collecting information.\n    3. Makes decisions about when to continue\n    4. Synthesizes findings into a final report.\n\n    The entire process is durable and can recover from any failure.\n    """\n\n    all_findings = []\n    research_history = []\n    current_iteration = 0\n    current_query = topic\n\n    # Main agentic research loop\n    while current_iteration < max_iterations:\n        current_iteration += 1\n\n        # Research the next query in a child workflow\n        iteration_result = research_query(topic, current_query, current_iteration)\n        research_history.append(iteration_result)\n        all_findings.append(iteration_result["evaluation"])\n\n        # Handle cases where no results are found\n        stories_found = iteration_result["stories_found"]\n        if stories_found == 0:\n\n            # Generate alternative queries when hitting dead ends\n            alternative_query = generate_follow_ups_step(\n                topic, all_findings, current_iteration\n            )\n            if alternative_query:\n                current_query = alternative_query\n                continue\n\n        # Evaluate whether to continue research\n        should_continue = should_continue_step(\n            topic, all_findings, current_iteration, max_iterations\n        )\n        if not should_continue:\n            break\n\n        # Generate next research question based on findings\n        if current_iteration < max_iterations:\n            follow_up_query = generate_follow_ups_step(\n                topic, all_findings, current_iteration\n            )\n            if follow_up_query:\n                current_query = follow_up_query\n\n    # Final step: Synthesize all findings into comprehensive report\n    final_report = synthesize_findings_step(topic, all_findings)\n\n    # Return complete research results\n    return {\n        "topic": topic,\n        "total_iterations": current_iteration,\n        "max_iterations": max_iterations,\n        "research_history": research_history,\n        "final_report": final_report,\n        "summary": {\n            "total_stories": sum(r["stories_found"] for r in research_history),\n            "total_comments": sum(r["comments_analyzed"] for r in research_history),\n            "queries_executed": [r["query"] for r in research_history],\n            "avg_relevance": (\n                sum(f.get("relevance_score", 0) for f in all_findings)\n                / len(all_findings)\n                if all_findings\n                else 0\n            ),\n        },\n    }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"research-query-workflow",children:"Research Query Workflow"}),"\n",(0,i.jsx)(n.p,{children:"Each iteration of the main research workflow calls a child workflow that searches Hacker News for information about a query, then evaluates and returns its findings."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef research_query(topic: str, query: str, iteration: int) -> Dict[str, Any]:\n    """Research a query selected by the main agentic workflow."""\n\n    # Step 1: Search Hacker News for stories about the topic\n    stories = search_hackernews_step(query, max_results=30)\n\n    # Step 2: Gather comments from all stories found\n    comments = []\n    if stories:\n        for i, story in enumerate(stories):\n            story_id = story.get("objectID")\n            title = story.get("title", "Unknown")[:50]\n            num_comments = story.get("num_comments", 0)\n\n            if story_id and num_comments > 0:\n                story_comments = get_comments_step(story_id, max_comments=10)\n                comments.extend(story_comments)\n\n    # Step 3: Evaluate gathered data and return findings\n    evaluation = evaluate_results_step(topic, query, stories, comments)\n\n    return {\n        "iteration": iteration,\n        "query": query,\n        "stories_found": len(stories),\n        "comments_analyzed": len(comments),\n        "evaluation": evaluation,\n        "stories": stories,\n        "comments": comments,\n    }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"agent-decision-making-steps",children:"Agent Decision-Making Steps"}),"\n",(0,i.jsx)(n.p,{children:"The agent's intelligence comes from three key step functions that handle decision-making:"}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:"Agent Evaluation Step"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef evaluate_results_step(\n    topic: str,\n    query: str,\n    stories: List[Dict[str, Any]],\n    comments: Optional[List[Dict[str, Any]]] = None,\n) -> Dict[str, Any]:\n    """Agent evaluates search results and extracts insights."""\n\n    # Prepare content for analysis\n    content_summary = f"Found {len(stories)} stories"\n    if comments:\n        content_summary += f" and {len(comments)} comments"\n\n    # Create detailed content digest for LLM\n    stories_text = ""\n    top_stories = []\n\n    # Evaluate only the top 10 most relevant (per HN search) stories\n    for i, story in enumerate(stories[:10]):\n        title = story.get("title", "No title")\n        url = story.get("url", "No URL")\n        hn_url = f"https://news.ycombinator.com/item?id={story.get(\'objectID\', \'\')}"\n        points = story.get("points", 0)\n        num_comments = story.get("num_comments", 0)\n        author = story.get("author", "Unknown")\n\n        stories_text += f"Story {i+1}:\\n"\n        stories_text += f"  Title: {title}\\n"\n        stories_text += f"  Points: {points}, Comments: {num_comments}\\n"\n        stories_text += f"  URL: {url}\\n"\n        stories_text += f"  HN Discussion: {hn_url}\\n"\n        stories_text += f"  Author: {author}\\n\\n"\n\n        # Store top stories for reference\n        top_stories.append(\n            {\n                "title": title,\n                "url": url,\n                "hn_url": hn_url,\n                "points": points,\n                "num_comments": num_comments,\n                "author": author,\n                "objectID": story.get("objectID", ""),\n            }\n        )\n\n    comments_text = ""\n\n    if comments:\n        for i, comment in enumerate(comments[:20]):  # Limit to top 20 comments\n            comment_text = comment.get("comment_text", "")\n            if comment_text:\n                author = comment.get("author", "Unknown")\n                # Get longer excerpts for better analysis\n                excerpt = (\n                    comment_text[:400] + "..."\n                    if len(comment_text) > 400\n                    else comment_text\n                )\n\n                comments_text += f"Comment {i+1}:\\n"\n                comments_text += f"  Author: {author}\\n"\n                comments_text += f"  Text: {excerpt}\\n\\n"\n\n    prompt = f"""\n    You are a research agent evaluating search results for: {topic}\n    \n    Query used: {query}\n    \n    Stories found:\n    {stories_text}\n    \n    Comments analyzed:\n    {comments_text}\n    \n    Provide a DETAILED analysis with specific insights, not generalizations. Focus on:\n    - Specific technical details, metrics, or benchmarks mentioned\n    - Concrete tools, libraries, frameworks, or techniques discussed\n    - Interesting problems, solutions, or approaches described\n    - Performance data, comparison results, or quantitative insights\n    - Notable opinions, debates, or community perspectives\n    - Specific use cases, implementation details, or real-world examples\n    \n    Return JSON with:\n    - "insights": Array of specific, technical insights with context\n    - "relevance_score": Number 1-10\n    - "summary": Brief summary of findings\n    - "key_points": Array of most important points discovered\n    """\n\n    messages = [\n        {\n            "role": "system",\n            "content": "You are a research evaluation agent. Analyze search results and provide structured insights in JSON format.",\n        },\n        {"role": "user", "content": prompt},\n    ]\n\n    response = call_llm(messages, max_tokens=2000)\n\n    try:\n        cleaned_response = clean_json_response(response)\n        evaluation = json.loads(cleaned_response)\n        evaluation["query"] = query\n        evaluation["top_stories"] = top_stories\n        return evaluation\n    except json.JSONDecodeError:\n        return {\n            "insights": [f"Found {len(stories)} stories about {topic}"],\n            "relevance_score": 7,\n            "summary": f"Basic search results for {query}",\n            "key_points": [],\n            "query": query,\n        }\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:"Follow-up Query Generation Step"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef generate_follow_ups_step(\n    topic: str, current_findings: List[Dict[str, Any]], iteration: int\n) -> Optional[str]:\n    """Agent generates follow-up research queries based on current findings."""\n\n    findings_summary = ""\n    for finding in current_findings:\n        findings_summary += f"Query: {finding.get(\'query\', \'Unknown\')}\\n"\n        findings_summary += f"Summary: {finding.get(\'summary\', \'No summary\')}\\n"\n        findings_summary += f"Key insights: {finding.get(\'insights\', [])}\\n"\n        findings_summary += (\n            f"Unanswered questions: {finding.get(\'unanswered_questions\', [])}\\n\\n"\n        )\n\n    prompt = f"""\n    You are a research agent investigating: {topic}\n    \n    This is iteration {iteration} of your research.\n    \n    Current findings:\n    {findings_summary}\n    \n    Generate 2-4 SHORT KEYWORD-BASED search queries for Hacker News that explore DIVERSE aspects of {topic}.\n    \n    CRITICAL RULES:\n    1. Use SHORT keywords (2-4 words max) - NOT long sentences\n    2. Focus on DIFFERENT aspects of {topic}, not just one narrow area\n    3. Use terms that appear in actual Hacker News story titles\n    4. Avoid repeating previous focus areas\n    5. Think about what tech people actually discuss about {topic}\n    \n    For {topic}, consider diverse areas like:\n    - Performance/optimization\n    - Tools/extensions\n    - Comparisons with other technologies\n    - Use cases/applications\n    - Configuration/deployment\n    - Recent developments\n    \n    GOOD examples: ["postgres performance", "database tools", "sql optimization"]\n    BAD examples: ["What are the best practices for PostgreSQL optimization?"]\n    \n    Return only a JSON array of SHORT keyword queries: ["query1", "query2", "query3"]\n    """\n\n    messages = [\n        {\n            "role": "system",\n            "content": "You are a research agent. Generate focused follow-up queries based on current findings. Return only JSON array.",\n        },\n        {"role": "user", "content": prompt},\n    ]\n\n    response = call_llm(messages)\n\n    try:\n        cleaned_response = clean_json_response(response)\n        queries = json.loads(cleaned_response)\n        return queries[0] if isinstance(queries, list) and len(queries) > 0 else None\n    except json.JSONDecodeError:\n        return None\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:"Continuation Decision Step"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef should_continue_step(\n    topic: str,\n    all_findings: List[Dict[str, Any]],\n    current_iteration: int,\n    max_iterations: int,\n) -> bool:\n    """Agent decides whether to continue research or conclude."""\n\n    if current_iteration >= max_iterations:\n        return {\n            "should_continue": False,\n            "reason": f"Reached maximum iterations ({max_iterations})",\n        }\n\n    # Analyze findings completeness\n    findings_summary = ""\n    total_relevance = 0\n    for finding in all_findings:\n        findings_summary += f"Query: {finding.get(\'query\', \'Unknown\')}\\n"\n        findings_summary += f"Summary: {finding.get(\'summary\', \'No summary\')}\\n"\n        findings_summary += f"Relevance: {finding.get(\'relevance_score\', 5)}/10\\n"\n        total_relevance += finding.get("relevance_score", 5)\n\n    avg_relevance = total_relevance / len(all_findings) if all_findings else 0\n\n    prompt = f"""\n    You are a research agent investigating: {topic}\n    \n    Current iteration: {current_iteration}/{max_iterations}\n    \n    Findings so far:\n    {findings_summary}\n    \n    Average relevance score: {avg_relevance:.1f}/10\n    \n    Decide whether to continue research or conclude. PRIORITIZE THOROUGH EXPLORATION - continue if:\n    1. Current iteration is less than 75% of max_iterations\n    2. Average relevance is above 6.0 and there are likely unexplored aspects\n    3. Recent queries found significant new information\n    4. The research seems to be discovering diverse perspectives on the topic\n    \n    Only stop early if:\n    - Average relevance is below 5.0 for multiple iterations\n    - No new meaningful information in the last 2 iterations\n    - Research appears to be hitting diminishing returns\n    \n    Return JSON with:\n    - "should_continue": boolean\n    """\n\n    messages = [\n        {\n            "role": "system",\n            "content": "You are a research decision agent. Evaluate research completeness and decide whether to continue. Return JSON.",\n        },\n        {"role": "user", "content": prompt},\n    ]\n\n    response = call_llm(messages)\n\n    try:\n        cleaned_response = clean_json_response(response)\n        decision = json.loads(cleaned_response)\n        return decision.get("should_continue", True)\n    except json.JSONDecodeError:\n        return True\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"search-api-steps",children:"Search API Steps"}),"\n",(0,i.jsx)(n.p,{children:"After deciding what terms to search for, the agent calls these steps to retrieve stories and comments from Hacker News."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:"Hacker News API Steps"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef search_hackernews_step(query: str, max_results: int = 20) -> List[Dict[str, Any]]:\n    """Search Hacker News stories using Algolia API."""\n    params = {"query": query, "hitsPerPage": max_results, "tags": "story"}\n\n    with httpx.Client(timeout=30.0) as client:\n        response = client.get("https://hn.algolia.com/api/v1/search", params=params)\n        response.raise_for_status()\n        return response.json()["hits"]\n\n@DBOS.step()\ndef get_comments_step(story_id: str, max_comments: int = 50) -> List[Dict[str, Any]]:\n    """Get comments for a specific Hacker News story."""\n    params = {"tags": f"comment,story_{story_id}", "hitsPerPage": max_comments}\n\n    with httpx.Client(timeout=30.0) as client:\n        response = client.get("https://hn.algolia.com/api/v1/search", params=params)\n        response.raise_for_status()\n        return response.json()["hits"]\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"synthesize-findings-step",children:"Synthesize Findings Step"}),"\n",(0,i.jsx)(n.p,{children:"Finally, after concluding its research, the agentic workflow calls this step to synthesize its findings into a report."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("strong",{children:"Synthesize Findings Step"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef synthesize_findings_step(\n    topic: str, all_findings: List[Dict[str, Any]]\n) -> Dict[str, Any]:\n    """Synthesize all research findings into a comprehensive report."""\n    findings_text = ""\n    story_links = []\n\n    for i, finding in enumerate(all_findings, 1):\n        findings_text += f"\\n=== Finding {i} ===\\n"\n        findings_text += f"Query: {finding.get(\'query\', \'Unknown\')}\\n"\n        findings_text += f"Summary: {finding.get(\'summary\', \'No summary\')}\\n"\n        findings_text += f"Key Points: {finding.get(\'key_points\', [])}\\n"\n        findings_text += f"Insights: {finding.get(\'insights\', [])}\\n"\n\n        # Extract story links and details for reference\n        if finding.get("top_stories"):\n            for story in finding["top_stories"]:\n                story_links.append(\n                    {\n                        "title": story.get("title", "Unknown"),\n                        "url": story.get("url", ""),\n                        "hn_url": f"https://news.ycombinator.com/item?id={story.get(\'objectID\', \'\')}",\n                        "points": story.get("points", 0),\n                        "comments": story.get("num_comments", 0),\n                    }\n                )\n\n    # Build comprehensive story and citation data\n    story_citations = {}\n    citation_id = 1\n\n    for finding in all_findings:\n        if finding.get("top_stories"):\n            for story in finding["top_stories"]:\n                story_id = story.get("objectID", "")\n                if story_id and story_id not in story_citations:\n                    story_citations[story_id] = {\n                        "id": citation_id,\n                        "title": story.get("title", "Unknown"),\n                        "url": story.get("url", ""),\n                        "hn_url": story.get("hn_url", ""),\n                        "points": story.get("points", 0),\n                        "comments": story.get("num_comments", 0),\n                    }\n                    citation_id += 1\n\n    # Create citation references text\n    citations_text = "\\n".join(\n        [\n            f"[{cite[\'id\']}] {cite[\'title\']} ({cite[\'points\']} points, {cite[\'comments\']} comments) - {cite[\'hn_url\']}"\n            + (f" - {cite[\'url\']}" if cite["url"] else "")\n            for cite in story_citations.values()\n        ]\n    )\n\n    prompt = f"""\n    You are a research analyst. Synthesize the following research findings into a comprehensive, detailed report about: {topic}\n    \n    Research Findings:\n    {findings_text}\n    \n    Available Citations:\n    {citations_text}\n    \n    IMPORTANT: You must return ONLY a valid JSON object with no additional text, explanations, or formatting.\n    \n    Create a comprehensive research report that flows naturally as a single narrative. Include:\n    - Specific technical details and concrete examples\n    - Actionable insights practitioners can use\n    - Interesting discoveries and surprising findings\n    - Specific tools, libraries, or techniques mentioned\n    - Performance metrics, benchmarks, or quantitative data when available\n    - Notable opinions or debates in the community\n    - INLINE LINKS: When making claims, include clickable links directly in the text using this format: [link text](HN_URL)\n    - Use MANY inline links throughout the report. Aim for at least 4-5 links per paragraph.\n    \n    CRITICAL CITATION RULES - FOLLOW EXACTLY:\n    \n    1. NEVER replace words with bare URLs like "(https://news.ycombinator.com/item?id=123)"\n    2. ALWAYS write complete sentences with all words present\n    3. Add citations using descriptive link text in brackets: [descriptive text](URL)\n    4. Every sentence must be grammatically complete and readable without the links\n    5. Links should ALWAYS be to the Hacker News discussion, NEVER directly to the article.\n    \n    CORRECT examples:\n    "PostgreSQL\'s performance improvements have been significant in recent versions, as discussed in [community forums](https://news.ycombinator.com/item?id=123456), with developers highlighting [specific optimizations](https://news.ycombinator.com/item?id=789012) in query processing."\n    \n    "Redis performance issues can stem from common configuration mistakes, which are well-documented in [troubleshooting guides](https://news.ycombinator.com/item?id=345678) and [community discussions](https://news.ycombinator.com/item?id=901234)."\n    \n    "React\'s licensing changes have sparked significant community debate, as seen in [detailed discussions](https://news.ycombinator.com/item?id=15316175) about the implications for open-source projects."\n    \n    WRONG examples (NEVER DO THIS):\n    "Community discussions reveal a strong interest in the (https://news.ycombinator.com/item?id=18717168) and the common pitfalls"\n    "One significant topic is the (https://news.ycombinator.com/item?id=15316175), which raises important legal considerations"\n    \n    Always link to relevant discussions for:\n    - Every specific tool, library, or technology mentioned\n    - Performance claims and benchmarks  \n    - Community opinions and debates\n    - Technical implementation details\n    - Companies or projects referenced\n    - Version releases or updates\n    - Problem reports or solutions\n    \n    Return a JSON object with this exact structure:\n    {{\n        "report": "A comprehensive research report written as flowing narrative text with inline clickable links [like this](https://news.ycombinator.com/item?id=123). Include specific technical details, tools, performance metrics, community opinions, and actionable insights. Make it detailed and informative, not just a summary."\n    }}\n    """\n\n    messages = [\n        {\n            "role": "system",\n            "content": "You are a research analyst. Provide comprehensive synthesis in JSON format.",\n        },\n        {"role": "user", "content": prompt},\n    ]\n\n    response = call_llm(messages, max_tokens=3000)\n\n    try:\n        cleaned_response = clean_json_response(response)\n        result = json.loads(cleaned_response)\n        return result\n    except json.JSONDecodeError as e:\n        return {\n            "report": "JSON parsing error, report could not be generated.",\n            "error": f"JSON parsing failed, created basic synthesis. Error: {str(e)}",\n        }\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"try-it-yourself",children:"Try it Yourself!"}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-openai",children:"Setting Up OpenAI"}),"\n",(0,i.jsxs)(n.p,{children:["To run this agent, you need an OpenAI developer account.\nObtain an API key ",(0,i.jsx)(n.a,{href:"https://platform.openai.com/api-keys",children:"here"})," and set up a payment method for your account ",(0,i.jsx)(n.a,{href:"https://platform.openai.com/account/billing/overview",children:"here"}),".\nThis agent uses ",(0,i.jsx)(n.code,{children:"gpt-4o-mini"})," for decision-making."]}),"\n",(0,i.jsx)(n.p,{children:"Set your API key as an environment variable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"export OPENAI_API_KEY=<your_openai_key>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"running-locally",children:"Running Locally"}),"\n",(0,i.jsx)(n.p,{children:"First, clone this repository:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-docs.git\ncd dbos-docs/hacker-news-agent\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then use ",(0,i.jsx)(n.a,{href:"https://docs.astral.sh/uv/guides/install-python/",children:"uv"})," to install dependencies and activate your virtual environment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"uv sync\nsource .venv/bin/activate\n"})}),"\n",(0,i.jsx)(n.p,{children:"Start PostgreSQL (required for DBOS):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"dbos postgres start\n"})}),"\n",(0,i.jsx)(n.p,{children:"Run the agent with any research topic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'python -m hacker_news_agent "artificial intelligence"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Or try other topics:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'python -m hacker_news_agent "rust programming"\npython -m hacker_news_agent "database performance"\npython -m hacker_news_agent "kubernetes scaling"\n'})}),"\n",(0,i.jsx)(n.p,{children:"The agent will autonomously research your topic, make decisions about what to investigate next, and produce a comprehensive research report with insights from the Hacker News community."}),"\n",(0,i.jsx)(n.p,{children:"If the agent fails at any point during its research, you can restart it using its workflow ID to recover it from where it left off:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'python -m hacker_news_agent "artificial intelligence" --workflow-id <id>\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);