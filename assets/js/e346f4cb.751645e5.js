"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6388],{4036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"python/tutorials/queue-tutorial","title":"Queues & Parallelism","description":"Queues allow you to run functions with managed concurrency.","source":"@site/docs/python/tutorials/queue-tutorial.md","sourceDirName":"python/tutorials","slug":"/python/tutorials/queue-tutorial","permalink":"/python/tutorials/queue-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Queues & Parallelism","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Transactions","permalink":"/python/tutorials/transaction-tutorial"},"next":{"title":"Workflow & Queue Management","permalink":"/python/tutorials/workflow-management"}}');var r=t(4848),s=t(8453);const o={sidebar_position:4,title:"Queues & Parallelism",toc_max_heading_level:3},a=void 0,u={},l=[{value:"Queue Example",id:"queue-example",level:3},{value:"Enqueue with DBOSClient",id:"enqueue-with-dbosclient",level:3},{value:"Reliability Guarantees",id:"reliability-guarantees",level:3},{value:"Managing Concurrency",id:"managing-concurrency",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"In-Order Processing",id:"in-order-processing",level:3},{value:"Setting Timeouts",id:"setting-timeouts",level:2},{value:"Deduplication",id:"deduplication",level:2},{value:"Priority",id:"priority",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Queues allow you to run functions with managed concurrency.\nThey are useful for controlling the number of functions run in parallel, or the rate at which functions are started."}),"\n",(0,r.jsx)(n.p,{children:"To create a queue, specify its name:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can then enqueue any DBOS workflow, step, or transaction.\nEnqueuing a function submits it for execution and returns a ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," to it.\nQueued tasks are started in first-in, first-out (FIFO) order."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\ntask = ...\nhandle = queue.enqueue(process_task, task)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"queue-example",children:"Queue Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a workflow using a queue to process tasks concurrently:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue\n\nqueue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\n@DBOS.workflow()\ndef process_tasks(tasks):\n  task_handles = []\n  # Enqueue each task so all tasks are processed concurrently.\n  for task in tasks:\n    handle = queue.enqueue(process_task, task)\n    task_handles.append(handle)\n  # Wait for each task to complete and retrieve its result.\n  # Return the results of all tasks.\n  return [handle.get_result() for handle in task_handles]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"enqueue-with-dbosclient",children:"Enqueue with DBOSClient"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/python/reference/client",children:(0,r.jsx)(n.code,{children:"DBOSClient"})})," provides a way to programmatically interact with your DBOS application from external code.\nAmong other things, this allows you to enqueue workflows from outside your DBOS application by connecting to Postgres directly."]}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.code,{children:"DBOSClient"})," is designed to be used from outside your DBOS application, workflow and queue metadata must be specified explicitly."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import DBOSClient, EnqueueOptions\n\nclient = DBOSClient(os.environ["DBOS_DATABASE_URL"])\n\noptions: EnqueueOptions = {\n  "queue_name": "process_task",\n  "workflow_name": "example_queue",\n}\nhandle = client.enqueue(options, task)\nresult = handle.get_result()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"reliability-guarantees",children:"Reliability Guarantees"}),"\n",(0,r.jsxs)(n.p,{children:["Because queues use DBOS ",(0,r.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial",children:"workflows"}),", they provide the following reliability guarantees for enqueued functions.\nThese guarantees assume that the application and database may crash and go offline at any point in time, but are always restarted and return online."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Enqueued functions always run to completion.  If a DBOS process crashes and is restarted at any point after a function is enqueued, it resumes the enqueued function from the last completed step."}),"\n",(0,r.jsxs)(n.li,{children:["Enqueued ",(0,r.jsx)(n.a,{href:"/python/tutorials/step-tutorial",children:"steps"})," (or steps called from enqueued workflows) are tried ",(0,r.jsx)(n.em,{children:"at least once"})," but are never re-executed after they complete.  If a failure occurs inside a step, the step may be retried, but once a step has completed, it will never be re-executed."]}),"\n",(0,r.jsxs)(n.li,{children:["Enqueued ",(0,r.jsx)(n.a,{href:"/python/tutorials/transaction-tutorial",children:"transactions"})," (or transactions called from enqueued workflows) commit ",(0,r.jsx)(n.em,{children:"exactly once"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"managing-concurrency",children:"Managing Concurrency"}),"\n",(0,r.jsxs)(n.p,{children:["You can specify the ",(0,r.jsx)(n.em,{children:"concurrency"})," of a queue, the maximum number of functions from this queue that may run concurrently, at two scopes: global and per process.\nGlobal concurrency limits are applied across all DBOS processes using this queue.\nPer process concurrency limits are applied to each DBOS process using this queue.\nIf no limit is provided, any number of functions may run concurrently.\nFor example, this queue has a maximum global concurrency of 10 and a per process maximum concurrency of 5, so at most 10 functions submitted to it may run at once, up to 5 per process:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue", concurrency=10, worker_concurrency=5)\n'})}),"\n",(0,r.jsx)(n.p,{children:"You may want to specify a maximum concurrency if functions in your queue submit work to an external process with limited resources.\nThe concurrency limit guarantees that even if many functions are submitted at once, they won't overwhelm the process."}),"\n",(0,r.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,r.jsxs)(n.p,{children:["You can set ",(0,r.jsx)(n.em,{children:"rate limits"})," for a queue, limiting the number of functions that it can start in a given period.\nRate limits are global across all DBOS processes using this queue.\nFor example, this queue has a limit of 50 with a period of 30 seconds, so it may not start more than 50 functions in 30 seconds:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue", limiter={"limit": 50, "period": 30})\n'})}),"\n",(0,r.jsx)(n.p,{children:"Rate limits are especially useful when working with a rate-limited API, such as many LLM APIs."}),"\n",(0,r.jsx)(n.h3,{id:"in-order-processing",children:"In-Order Processing"}),"\n",(0,r.jsxs)(n.p,{children:["You can use a queue with ",(0,r.jsx)(n.code,{children:"concurrency=1"})," to guarantee sequential, in-order processing of events.\nOnly a single event will be processed at a time.\nFor example, this app processes events sequentially in the order of their arrival:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom dbos import DBOS, Queue\n\napp = FastAPI()\nDBOS(fastapi=app)\n\nqueue = Queue("in_order_queue", concurrency=1)\n\n@DBOS.step()\ndef process_event(event: str):\n   ...\n\n@app.post("/events/{event}")\ndef event_endpoint(event: str):\n   queue.enqueue(process_event, event)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"setting-timeouts",children:"Setting Timeouts"}),"\n",(0,r.jsxs)(n.p,{children:["You can set a timeout for an enqueued workflow with ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#setworkflowtimeout",children:(0,r.jsx)(n.code,{children:"SetWorkflowTimeout"})}),".\nWhen the timeout expires, the workflow ",(0,r.jsx)(n.strong,{children:"and all its children"})," are cancelled.\nCancelling a workflow sets its status to ",(0,r.jsx)(n.code,{children:"CANCELLED"})," and preempts its execution at the beginning of its next step."]}),"\n",(0,r.jsxs)(n.p,{children:["Timeouts are ",(0,r.jsx)(n.strong,{children:"start-to-completion"}),": a workflow's timeout does not begin until the workflow is dequeued and starts execution.\nAlso, timeouts are ",(0,r.jsx)(n.strong,{children:"durable"}),": they are stored in the database and persist across restarts, so workflows can have very long timeouts."]}),"\n",(0,r.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef example_workflow():\n    ...\n\nqueue = Queue("example-queue")\n\n# If the workflow does not complete within 10 seconds after being dequeued, it times out and is cancelled\nwith SetWorkflowTimeout(10):\n    queue.enqueue(example_workflow)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"deduplication",children:"Deduplication"}),"\n",(0,r.jsxs)(n.p,{children:["You can set a deduplication ID for an enqueued workflow with ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#setenqueueoptions",children:(0,r.jsx)(n.code,{children:"SetEnqueueOptions"})})," or ",(0,r.jsx)(n.a,{href:"/python/reference/client#enqueue",children:(0,r.jsx)(n.code,{children:"DBOSClient"})}),".\nAt any given time, only one workflow with a specific deduplication ID can be enqueued in the specified queue.\nIf a workflow with a deduplication ID is currently enqueued or actively executing (status ",(0,r.jsx)(n.code,{children:"ENQUEUED"})," or ",(0,r.jsx)(n.code,{children:"PENDING"}),"), subsequent workflow enqueue attempt with the same deduplication ID in the same queue will raise a ",(0,r.jsx)(n.code,{children:"DBOSQueueDeduplicatedError"})," exception."]}),"\n",(0,r.jsx)(n.p,{children:"This is useful for long-running workflows that should only be triggered one at a time, such as critical updates that must not be duplicated if a workflow is already in progress."}),"\n",(0,r.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'with SetEnqueueOptions(deduplication_id="my_dedup_id"):\n    try:\n        handle = queue.enqueue(example_workflow, ...)\n    except DBOSQueueDeduplicatedError as e:\n        # Handle deduplication error\n'})}),"\n",(0,r.jsx)(n.h2,{id:"priority",children:"Priority"}),"\n",(0,r.jsxs)(n.p,{children:["You can set a priority for an enqueued workflow with ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#setenqueueoptions",children:(0,r.jsx)(n.code,{children:"SetEnqueueOptions"})})," or ",(0,r.jsx)(n.a,{href:"/python/reference/client#enqueue",children:(0,r.jsx)(n.code,{children:"DBOSClient"})}),".\nWorkflows with the same priority are dequeued in ",(0,r.jsx)(n.strong,{children:"FIFO (first in, first out)"})," order. Priority values can range from ",(0,r.jsx)(n.code,{children:"1"})," to ",(0,r.jsx)(n.code,{children:"2,147,483,647"}),", where ",(0,r.jsx)(n.strong,{children:"a low number indicates a higher priority"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Workflows without assigned priorities have the highest priority and are dequeued before workflows with assigned priorities."})}),"\n",(0,r.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"with SetEnqueueOptions(priority=10):\n    # All workflows are enqueued with priority set to 10\n    # They will be dequeued in FIFO order\n    for task in tasks:\n        queue.enqueue(task_workflow, task)\n\nwith SetEnqueueOptions(priority=1):\n    queue.enqueue(first_workflow)\n\n# first_workflow (priority=1) will be dequeued before all task_workflows (priority=10)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);