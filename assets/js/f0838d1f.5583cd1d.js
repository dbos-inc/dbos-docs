"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[455],{3377:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"typescript/tutorials/scheduled-workflows","title":"Scheduled Workflows","description":"You can schedule DBOS workflows to run exactly once per time interval.","source":"@site/docs/typescript/tutorials/scheduled-workflows.md","sourceDirName":"typescript/tutorials","slug":"/typescript/tutorials/scheduled-workflows","permalink":"/typescript/tutorials/scheduled-workflows","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":48,"frontMatter":{"sidebar_position":48,"title":"Scheduled Workflows"},"sidebar":"tutorialSidebar","previous":{"title":"Queues & Parallelism","permalink":"/typescript/tutorials/queue-tutorial"},"next":{"title":"Logging & Tracing","permalink":"/typescript/tutorials/logging"}}');var s=o(4848),r=o(8453);const i={sidebar_position:48,title:"Scheduled Workflows"},c=void 0,a={},l=[{value:"How Scheduling Works",id:"how-scheduling-works",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["You can schedule DBOS ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial",children:"workflows"})," to run exactly once per time interval.\nTo do this, annotate the workflow with the ",(0,s.jsx)(n.a,{href:"../reference/transactapi/dbos-class#scheduled-workflows",children:(0,s.jsx)(n.code,{children:"@DBOS.scheduled"})})," decorator and specify the schedule in ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"crontab"})," syntax.  For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { DBOS } from '@dbos-inc/dbos-sdk';\n\nclass ScheduledExample{\n  @DBOS.workflow()\n  @DBOS.scheduled({crontab: '*/30 * * * * *'})\n  static async scheduledFunc(schedTime: Date, startTime: Date) {\n    DBOS.logger.info(`I am a workflow scheduled to run every 30 seconds`);\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Scheduled workflows must take in exactly two arguments: the time that the run was scheduled (as a ",(0,s.jsx)(n.code,{children:"Date"}),") and the time the run was actually started (as a ",(0,s.jsx)(n.code,{children:"Date"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about crontab syntax, see ",(0,s.jsx)(n.a,{href:"https://docs.gitlab.com/ee/topics/cron/",children:"this guide"})," or ",(0,s.jsx)(n.a,{href:"https://crontab.guru/",children:"this crontab editor"}),".\nThe specification for the DBOS variant can be found in the ",(0,s.jsx)(n.a,{href:"../reference/transactapi/dbos-class#crontab-specification",children:"DBOS API reference"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The DBOS crontab format supports some common extensions, as seen in the following examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"* * * * *"}),": Every minute of every day"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"* 5 * * 1"}),": Every minute during the hour of 05:00 on Mondays."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"30 * * * * *"}),": 30 seconds after the beginning of every minute"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"0 12 * * Sun"}),": At noon on sundays"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"0 9-17 * * *"}),": At the top of the hour, from 9am to 5pm"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*/30 * * * * *"}),": Every 30 seconds (seconds is evenly divisible by 30)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"10-19/2 * * January,Feb *"}),": At 10, 12, 14, 16, and 18 minutes into each hour of every day, only in the months of January and February"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-scheduling-works",children:"How Scheduling Works"}),"\n",(0,s.jsxs)(n.p,{children:["Under the hood, DBOS constructs an ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"idempotency key"})," for each workflow invocation.  The key is a concatenation of the function name and the scheduled time, ensuring each scheduled invocation occurs exactly once while your application is active."]}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes, you may require a scheduled workflow run ",(0,s.jsx)(n.strong,{children:"exactly once"})," per interval, even if the application was offline when it should have run.\nFor example, if your workflow is supposed to run every Friday at 9 PM UTC, but your application is offline for maintenance one Friday, you may want the workflow to launch as soon as your application is restarted.\nYou can configure this behavior in the ",(0,s.jsx)(n.code,{children:"DBOS.scheduled"})," decorator:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"    @DBOS.scheduled({mode: SchedulerMode.ExactlyOncePerInterval, crontab: '...'})\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var t=o(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);