"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7676],{780:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"python/reference/workflow_handles","title":"Workflow Handles","description":"API reference for DBOS workflow handles","source":"@site/docs/python/reference/workflow_handles.md","sourceDirName":"python/reference","slug":"/python/reference/workflow_handles","permalink":"/python/reference/workflow_handles","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Workflow Handles","description":"API reference for DBOS workflow handles"},"sidebar":"tutorialSidebar","previous":{"title":"Queues","permalink":"/python/reference/queues"},"next":{"title":"DBOS Client","permalink":"/python/reference/client"}}');var r=n(4848),l=n(8453);const s={sidebar_position:5,title:"Workflow Handles",description:"API reference for DBOS workflow handles"},d=void 0,a={},i=[{value:"WorkflowHandle",id:"workflowhandle",level:2},{value:"Methods",id:"methods",level:3},{value:"get_workflow_id",id:"get_workflow_id",level:4},{value:"get_result",id:"get_result",level:4},{value:"get_status",id:"get_status",level:4},{value:"WorkflowHandleAsync",id:"workflowhandleasync",level:2},{value:"Methods",id:"methods-1",level:3},{value:"get_workflow_id",id:"get_workflow_id-1",level:4},{value:"get_result",id:"get_result-1",level:4},{value:"get_status",id:"get_status-1",level:4}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["A workflow handle represents the state of a particular active or completed workflow execution.\nYou obtain a workflow handle when using ",(0,r.jsx)(t.code,{children:"DBOS.start_workflow"})," to start a workflow in the background.\nIf you know a workflow's identity, you can also retrieve its handle using ",(0,r.jsx)(t.code,{children:"DBOS.retrieve_workflow"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"workflowhandle",children:"WorkflowHandle"}),"\n",(0,r.jsx)(t.h3,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h4,{id:"get_workflow_id",children:"get_workflow_id"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"handle.get_workflow_id() -> str\n"})}),"\n",(0,r.jsx)(t.p,{children:"Retrieve the ID of the workflow."}),"\n",(0,r.jsx)(t.h4,{id:"get_result",children:"get_result"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"handle.get_result() -> R\n"})}),"\n",(0,r.jsx)(t.p,{children:"Wait for the workflow to complete, then return its result."}),"\n",(0,r.jsx)(t.h4,{id:"get_status",children:"get_status"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"handle.get_status() -> WorkflowStatus\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Retrieve the ",(0,r.jsx)(t.a,{href:"/python/reference/contexts#workflow-status",children:(0,r.jsx)(t.code,{children:"WorkflowStatus"})})," of a workflow."]}),"\n",(0,r.jsx)(t.h2,{id:"workflowhandleasync",children:"WorkflowHandleAsync"}),"\n",(0,r.jsx)(t.h3,{id:"methods-1",children:"Methods"}),"\n",(0,r.jsx)(t.h4,{id:"get_workflow_id-1",children:"get_workflow_id"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"handle.get_workflow_id() -> str\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Retrieve the ID of the workflow. Behaves identically to the ",(0,r.jsx)(t.a,{href:"#workflowhandle",children:"WorkflowHandle"})," version."]}),"\n",(0,r.jsx)(t.h4,{id:"get_result-1",children:"get_result"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"handle.get_result() -> Coroutine[Any, Any, R]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Asynchronously wait for the workflow to complete, then return its result. Similar to the ",(0,r.jsx)(t.a,{href:"#workflowhandle",children:"WorkflowHandle"})," version, except asynchronous."]}),"\n",(0,r.jsx)(t.h4,{id:"get_status-1",children:"get_status"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"handle.get_status() -> Coroutine[Any, Any, WorkflowStatus]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Asynchronously retrieve the ",(0,r.jsx)(t.a,{href:"/python/reference/contexts#workflow-status",children:(0,r.jsx)(t.code,{children:"WorkflowStatus"})})," of a workflow."]})]})}function c(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>d});var o=n(6540);const r={},l=o.createContext(r);function s(e){const t=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(l.Provider,{value:t},e.children)}}}]);