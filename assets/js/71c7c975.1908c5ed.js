"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3613],{2976:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=s(4848),r=s(8453);const o={sidebar_position:4,title:"Queues"},u=void 0,a={id:"python/reference/task_queues",title:"Queues",description:"Queues allow you to submit functions to run in the background with a controlled degree of concurrency.",source:"@site/docs/python/reference/task_queues.md",sourceDirName:"python/reference",slug:"/python/reference/task_queues",permalink:"/python/reference/task_queues",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Queues"},sidebar:"tutorialSidebar",previous:{title:"Contexts",permalink:"/python/reference/contexts"},next:{title:"Workflow Handles",permalink:"/python/reference/workflow_handles"}},c={},l=[{value:"class dbos.Queue",id:"class-dbosqueue",level:3},{value:"enqueue",id:"enqueue",level:3}];function i(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Queues allow you to submit functions to run in the background with a controlled degree of concurrency.\nThey are useful for running many functions in parallel."}),"\n",(0,t.jsx)(n.h3,{id:"class-dbosqueue",children:"class dbos.Queue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Queue(\n    name: str = None,\n    concurrency: Optional[int] = None,\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": The name of the queue. Must be unique among all your queues."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"concurrency"}),": The maximum number of functions from this queue that may run concurrently.\nThis concurrency limit is global across all DBOS processes using this queue.\nIf not provided, any number of functions may run concurrently."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"enqueue",children:"enqueue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"queue.enqueue(\n    func: Callable[P, R],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -> WorkflowHandle[R]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Enqueue a function for processing and return a ",(0,t.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," to it.\nYou can enqueue any DBOS-annotated function.\nThe ",(0,t.jsx)(n.code,{children:"enqueue"})," method durably enqueues your function; after it returns your function is guaranteed to later execute even if your app is interrupted."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue\n\nqueue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\n@DBOS.workflow()\ndef process_tasks(tasks):\n  task_handles = []\n  # Enqueue each task so all tasks are processed concurrently.\n  for task in tasks:\n    handle = queue.enqueue(process_task, task)\n    task_handles.append(handle)\n  # Wait for each task to complete and retrieve its result.\n  # Return the results of all tasks.\n  return [handle.get_result() for handle in task_handles]\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>u,x:()=>a});var t=s(6540);const r={},o=t.createContext(r);function u(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:u(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);