"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[76],{9756:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"python/reference/configuration","title":"Configuration","description":"Configuring DBOS","source":"@site/docs/python/reference/configuration.md","sourceDirName":"python/reference","slug":"/python/reference/configuration","permalink":"/python/reference/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12,"title":"Configuration"},"sidebar":"tutorialSidebar","previous":{"title":"DBOS Client","permalink":"/python/reference/client"},"next":{"title":"DBOS CLI","permalink":"/python/reference/cli"}}');var t=s(4848),o=s(8453);const r={sidebar_position:12,title:"Configuration"},a=void 0,l={},c=[{value:"Configuring DBOS",id:"configuring-dbos",level:2},{value:"DBOS Configuration File",id:"dbos-configuration-file",level:2},{value:"Configuration File Fields",id:"configuration-file-fields",level:3},{value:"Configuration Schema File",id:"configuration-schema-file",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"configuring-dbos",children:"Configuring DBOS"}),"\n",(0,t.jsxs)(n.p,{children:["To configure DBOS, pass a ",(0,t.jsx)(n.code,{children:"DBOSConfig"})," object to its constructor.\nFor example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'config: DBOSConfig = {\n    "name": "dbos-example",\n    "system_database_url": os.environ["DBOS_SYSTEM_DATABASE_URL"],\n}\nDBOS(config=config)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"DBOSConfig"})," object has the following fields.\nAll fields except ",(0,t.jsx)(n.code,{children:"name"})," are optional."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class DBOSConfig(TypedDict):\n    name: str\n\n    system_database_url: Optional[str]\n    application_database_url: Optional[str]\n    sys_db_pool_size: Optional[int]\n    db_engine_kwargs: Optional[Dict[str, Any]]\n    dbos_system_schema: Optional[str]\n    system_database_engine: Optional[sqlalchemy.Engine]\n\n    conductor_key: Optional[str]\n\n    enable_otlp: Optional[bool]\n    otlp_traces_endpoints: Optional[List[str]]\n    otlp_logs_endpoints: Optional[List[str]]\n    otlp_attributes: Optional[dict[str, str]]\n    log_level: Optional[str]\n\n    run_admin_server: Optional[bool]\n    admin_port: Optional[int]\n\n    application_version: Optional[str]\n    executor_id: Optional[str]\n\n    serializer: Optional[Serializer]\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"name"}),": Your application's name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"system_database_url"}),": A connection string to your system database.\nThis is the database in which DBOS stores workflow and step state; its schema is documented ",(0,t.jsx)(n.a,{href:"/explanations/system-tables",children:"here"}),".\nThis may be either Postgres or SQLite, though Postgres is recommended for production.\nDBOS uses this connection string, unmodified, to create a ",(0,t.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/20/core/engines.html",children:"SQLAlchemy engine"}),".\nA valid connection string looks like:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"postgresql://[username]:[password]@[hostname]:[port]/[database name]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or with SQLite:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sqlite:///[path to database file]\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Passwords in connection strings must be escaped (for example with ",(0,t.jsx)(n.a,{href:"https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote",children:"urllib"}),") if they contain special characters."]})}),"\n",(0,t.jsx)(n.p,{children:"If no connection string is provided, DBOS uses a SQLite database:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sqlite:///[application_name].sqlite\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"application_database_url"}),": A connection string to your application database.\nThis is the database in which DBOS executes ",(0,t.jsx)(n.a,{href:"/python/tutorials/transaction-tutorial",children:(0,t.jsx)(n.code,{children:"@DBOS.transaction"})})," functions.\nThis parameter has the same format and default as ",(0,t.jsx)(n.code,{children:"system_database_url"}),".\nIf you are not using ",(0,t.jsx)(n.code,{children:"@DBOS.transaction"}),", you do not need to supply this parameter."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"db_engine_kwargs"}),": Additional keyword arguments passed to SQLAlchemy\u2019s ",(0,t.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine",children:(0,t.jsx)(n.code,{children:"create_engine()"})}),".\nDefaults to:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'{\n  "pool_size": 20,\n  "max_overflow": 0,\n  "pool_timeout": 30,\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"sys_db_pool_size"}),": The size of the connection pool used for the ",(0,t.jsx)(n.a,{href:"../../explanations/system-tables",children:"DBOS system database"}),". Defaults to 20."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dbos_system_schema"}),': Postgres schema name for DBOS system tables. Defaults to "dbos".']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"system_database_engine"}),": A custom SQLAlchemy engine to use to connect to your system database. If provided, DBOS will not create an engine but use this instead."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"conductor_key"}),": An API key for ",(0,t.jsx)(n.a,{href:"/production/self-hosting/conductor",children:"DBOS Conductor"}),". If provided, application is connected to Conductor. API keys can be created from the ",(0,t.jsx)(n.a,{href:"https://console.dbos.dev",children:"DBOS console"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"enable_otlp"}),": Enable DBOS OpenTelemetry ",(0,t.jsx)(n.a,{href:"/python/tutorials/logging-and-tracing",children:"tracing and export"}),". Defaults to False."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"otlp_traces_endpoints"}),": DBOS operations ",(0,t.jsx)(n.a,{href:"../tutorials/logging-and-tracing#tracing",children:"automatically generate OpenTelemetry Traces"}),". Use this field to declare a list of OTLP-compatible trace receivers. Requires ",(0,t.jsx)(n.code,{children:"enable_otlp"})," to be True."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"otlp_logs_endpoints"}),": the DBOS logger can export OTLP-formatted log signals. Use this field to declare a list of OTLP-compatible log receivers. Requires ",(0,t.jsx)(n.code,{children:"enable_otlp"})," to be True."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"otlp_attributes"}),": A set of attributes (key-value pairs) to apply to all OTLP-exported logs and traces."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"log_level"}),": Configure the ",(0,t.jsx)(n.a,{href:"../tutorials/logging-and-tracing#logging",children:"DBOS logger"})," severity. Defaults to ",(0,t.jsx)(n.code,{children:"INFO"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"run_admin_server"}),": Whether to run an ",(0,t.jsx)(n.a,{href:"/production/self-hosting/admin-api",children:"HTTP admin server"})," for workflow management operations. Defaults to True."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"admin_port"}),": The port on which the admin server runs. Defaults to 3001."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"application_version"}),": The code version for this application and its workflows. Workflow versioning is documented ",(0,t.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#workflow-versioning-and-recovery",children:"here"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"executor_id"}),": Executor ID, used to identify the application instance in distributed environments. It is also useful for ",(0,t.jsx)(n.a,{href:"/production/self-hosting/workflow-recovery",children:"distributed workflow recovery"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"serializer"}),": A custom serializer for the system database. See the ",(0,t.jsx)(n.a,{href:"/python/reference/contexts#custom-serialization",children:"custom serialization reference"})," for details."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"dbos-configuration-file",children:"DBOS Configuration File"}),"\n",(0,t.jsxs)(n.p,{children:["Some tools in the DBOS ecosystem, including ",(0,t.jsx)(n.a,{href:"/production/dbos-cloud/deploying-to-cloud",children:"DBOS Cloud"})," and the ",(0,t.jsx)(n.a,{href:"/python/reference/cli",children:"DBOS CLI"}),", are configured by a ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["You can create a ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"})," with default parameters with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"dbos init <app-name> --config\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-file-fields",children:"Configuration File Fields"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["You can use environment variables for configuration values through the syntax ",(0,t.jsx)(n.code,{children:"field: ${VALUE}"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"})," file has the following fields and sections:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"name"}),": Your application's name. Must match the name supplied to the DBOS constructor."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"language"}),": The application language. Must be set to ",(0,t.jsx)(n.code,{children:"python"})," for Python applications."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"system_database_url"}),": The connection string to your DBOS system database.\nThis connection string is used by the DBOS ",(0,t.jsx)(n.a,{href:"/python/reference/cli",children:"CLI"})," and ",(0,t.jsx)(n.a,{href:"/python/tutorials/debugging",children:"debugger"}),".\nIt has the same format as the ",(0,t.jsx)(n.code,{children:"system_database_url"})," you pass to the DBOS constructor."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"database_url"}),": The connection string to your application database.\nThis connection string is used by the DBOS ",(0,t.jsx)(n.a,{href:"/python/reference/cli",children:"CLI"})," and ",(0,t.jsx)(n.a,{href:"/python/tutorials/debugging",children:"debugger"}),".\nIt has the same format as the ",(0,t.jsx)(n.code,{children:"application_database_url"})," you pass to the DBOS constructor."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"runtimeConfig"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"start"}),": (required only in DBOS Cloud) The command(s) with which to start your app. Called from ",(0,t.jsx)(n.a,{href:"/python/reference/cli#dbos-start",children:(0,t.jsx)(n.code,{children:"dbos start"})}),", which is used to start your app in DBOS Cloud."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"setup"}),": Setup commands to run before your application is built in DBOS Cloud. Used only in DBOS Cloud. Documentation ",(0,t.jsx)(n.a,{href:"/production/dbos-cloud/application-management#customizing-microvm-setup",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-schema-file",children:"Configuration Schema File"}),"\n",(0,t.jsxs)(n.p,{children:["There is a schema file available for the DBOS configuration file schema ",(0,t.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-transact-py/blob/main/dbos/dbos-config.schema.json",children:"on GitHub"}),".\nThis schema file can be used to provide an improved YAML editing experience for developer tools that leverage it.\nFor example, the Visual Studio Code ",(0,t.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",children:"RedHat YAML extension"})," provides tooltips, statement completion and real-time validation for editing DBOS config files.\nThis extension provides ",(0,t.jsx)(n.a,{href:"https://github.com/redhat-developer/vscode-yaml#associating-schemas",children:"multiple ways"})," to associate a YAML file with its schema.\nThe easiest is to simply add a comment with a link to the schema at the top of the config file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# yaml-language-server: $schema=https://github.com/dbos-inc/dbos-transact-py/blob/main/dbos/dbos-config.schema.json\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);