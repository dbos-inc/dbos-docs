"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7436],{6467:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"golang/reference/dbos-context","title":"DBOS Context","description":"A DBOS Context is at the center of a DBOS-enabled application. Use it to register workflows, queues and perform workflow management tasks.","source":"@site/docs/golang/reference/dbos-context.md","sourceDirName":"golang/reference","slug":"/golang/reference/dbos-context","permalink":"/golang/reference/dbos-context","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"DBOS Context","pagination_prev":null},"sidebar":"tutorialSidebar","next":{"title":"Workflows & Steps","permalink":"/golang/reference/workflows-steps"}}');var r=t(4848),i=t(8453);const s={sidebar_position:10,title:"DBOS Context",pagination_prev:null},a=void 0,l={},c=[{value:"Lifecycle",id:"lifecycle",level:2},{value:"Initialization",id:"initialization",level:3},{value:"launch",id:"launch",level:3},{value:"Shutdown",id:"shutdown",level:3},{value:"Context management",id:"context-management",level:2},{value:"WithTimeout",id:"withtimeout",level:3},{value:"WithoutCancel",id:"withoutcancel",level:3},{value:"Context metadata",id:"context-metadata",level:2},{value:"GetApplicationVersion",id:"getapplicationversion",level:3},{value:"GetExecutorID",id:"getexecutorid",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["A DBOS Context is at the center of a DBOS-enabled application. Use it to register ",(0,r.jsx)(n.a,{href:"/golang/tutorials/workflow-tutorial",children:"workflows"}),", ",(0,r.jsx)(n.a,{href:"/golang/tutorials/queue-tutorial",children:"queues"})," and perform ",(0,r.jsx)(n.a,{href:"/golang/tutorials/workflow-management",children:"workflow management"})," tasks."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"DBOSContext"})," extends Go's ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/context#Context",children:(0,r.jsx)(n.code,{children:"context.Context"})})," interface and carries essential state across workflow execution. Workflows and steps receive a new ",(0,r.jsx)(n.code,{children:"DBOSContext"})," spun out of the root ",(0,r.jsx)(n.code,{children:"DBOSContext"})," you manage. In addition, a ",(0,r.jsx)(n.code,{children:"DBOSContext"})," can be used to set ",(0,r.jsx)(n.a,{href:"/golang/tutorials/workflow-tutorial#workflow-timeouts",children:"workflow timeouts"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,r.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,r.jsxs)(n.p,{children:["You can create a DBOS context using ",(0,r.jsx)(n.code,{children:"NewDBOSContext"}),", which takes a ",(0,r.jsx)(n.code,{children:"Config"})," object where ",(0,r.jsx)(n.code,{children:"AppName"})," and one of ",(0,r.jsx)(n.code,{children:"DatabaseURL"})," or ",(0,r.jsx)(n.code,{children:"SystemDBPool"})," are mandatory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func NewDBOSContext(ctx context.Context, inputConfig Config) (DBOSContext, error)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Config struct {\n    AppName            string        // Application name for identification (required)\n    DatabaseURL        string        // DatabaseURL is a PostgreSQL connection string to your system database. Either this or SystemDBPool is required.\n    SystemDBPool       *pgxpool.Pool // SystemDBPool is a connection pool DBOS can use to access your system database. Optional but takes precedence over DatabaseURL if both are provided.\n    DatabaseSchema     string        // Database schema name (defaults to "dbos")\n    Logger             *slog.Logger  // Custom logger instance (defaults to a new slog logger)\n    AdminServer        bool          // Enable Transact admin HTTP server (disabled by default)\n    AdminServerPort    int           // Port for the admin HTTP server (default: 3001)\n    ConductorURL       string        // DBOS conductor service URL (optional)\n    ConductorAPIKey    string        // DBOS conductor API key (optional)\n    ApplicationVersion string        // Application version (optional)\n    ExecutorID         string        // Executor ID (optional)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'dbosContext, err := dbos.NewDBOSContext(context.Background(), dbos.Config{\n    AppName:     "dbos-starter",\n    DatabaseURL: os.Getenv("DBOS_SYSTEM_DATABASE_URL"),\n})\nif err != nil {\n    panic(err)\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The newly created DBOSContext must be launched with ",(0,r.jsx)(n.code,{children:"Launch()"})," before use and should be shut down with Shutdown() at program termination."]}),"\n",(0,r.jsx)(n.h3,{id:"launch",children:"launch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"DBOSContext.Launch() error\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Launch the following resources managed by a ",(0,r.jsx)(n.code,{children:"DBOSContext"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.a,{href:"/explanations/system-tables",children:"system database connection pool"})]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.a,{href:"/golang/tutorials/workflow-tutorial#scheduled-workflows",children:"workflow scheduler"})]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.a,{href:"/golang/tutorials/queue-tutorial",children:"workflow queue runner"})]}),"\n",(0,r.jsx)(n.li,{children:"(Optionally) an admin server"}),"\n",(0,r.jsx)(n.li,{children:"(Optionally) a Conductor connection"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In addition, ",(0,r.jsx)(n.code,{children:"Launch()"})," may perform ",(0,r.jsx)(n.a,{href:"/architecture#how-workflow-recovery-works",children:"workflow recovery"}),".\n",(0,r.jsx)(n.code,{children:"Launch()"})," should be called by your program during startup before running any workflows."]}),"\n",(0,r.jsx)(n.h3,{id:"shutdown",children:"Shutdown"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"Shutdown(timeout time.Duration)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Gracefully shutdown the DBOS runtime, waiting for workflows to complete and cleaning up resources. When you shutdown a ",(0,r.jsx)(n.code,{children:"DBOSContext"}),", the underlying ",(0,r.jsx)(n.code,{children:"context.Context"})," will be cancelled, which signals all DBOS resources they should stop executing, including workflows and steps."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"timeout"}),": The time to wait for DBOS resources to gracefully terminate."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"context-management",children:"Context management"}),"\n",(0,r.jsx)(n.h3,{id:"withtimeout",children:"WithTimeout"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func WithTimeout(ctx DBOSContext, timeout time.Duration) (DBOSContext, context.CancelFunc)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"WithTimeout"})," returns a copy of the DBOS context with a timeout. The returned context will be canceled after the specified duration. See ",(0,r.jsx)(n.a,{href:"/golang/tutorials/workflow-tutorial#workflow-timeouts",children:"workflow timeouts"})," for usage."]}),"\n",(0,r.jsx)(n.h3,{id:"withoutcancel",children:"WithoutCancel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func WithoutCancel(ctx DBOSContext) DBOSContext\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"WithoutCancel"})," returns a copy of the DBOS context that is not canceled when the parent context is canceled. This is useful to detach child workflows from their parent's timeout."]}),"\n",(0,r.jsx)(n.h2,{id:"context-metadata",children:"Context metadata"}),"\n",(0,r.jsx)(n.h3,{id:"getapplicationversion",children:"GetApplicationVersion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func GetApplicationVersion() string\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"GetApplicationVersion"})," returns the application version for this context."]}),"\n",(0,r.jsx)(n.h3,{id:"getexecutorid",children:"GetExecutorID"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func GetExecutorID() string\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"GetExecutorID"})," returns the executor ID for this context."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);