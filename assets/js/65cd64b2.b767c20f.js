"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6435],{3512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"python/examples/reliable-ai-agent","title":"Reliable Customer Service Agent","description":"In this example, you\'ll learn how to build a reliable AI-powered customer service agent with DBOS and OpenAI\'s Swarm framework.","source":"@site/docs/python/examples/reliable-ai-agent.md","sourceDirName":"python/examples","slug":"/python/examples/reliable-ai-agent","permalink":"/python/examples/reliable-ai-agent","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":4,"title":"Reliable Customer Service Agent"},"sidebar":"examplesSidebar","previous":{"title":"AI-Powered Slackbot","permalink":"/python/examples/rag-slackbot"},"next":{"title":"Document Detective","permalink":"/python/examples/document-detective"}}');var r=t(4848),a=t(8453);const i={displayed_sidebar:"examplesSidebar",sidebar_position:4,title:"Reliable Customer Service Agent"},o=void 0,l={},c=[{value:"Writing an AI-Powered Refund Agent",id:"writing-an-ai-powered-refund-agent",level:2},{value:"Reliable Agentic Workflow Orchestration",id:"reliable-agentic-workflow-orchestration",level:2},{value:"Try it Yourself!",id:"try-it-yourself",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["In this example, you'll learn how to build a reliable AI-powered customer service agent with DBOS and OpenAI's ",(0,r.jsx)(n.a,{href:"https://github.com/openai/swarm/tree/main",children:"Swarm"})," framework."]}),"\n",(0,r.jsx)(n.p,{children:"This agent takes in a user's name, processes a refund for the user, and then applies a discount.\nEven if the agent is interrupted during refund processing, upon restart it automatically recovers, finishes processing the refund, then proceeds to the next step in its workflow."}),"\n",(0,r.jsxs)(n.p,{children:["Try running this agent and pressing ",(0,r.jsx)(n.code,{children:"Ctrl+C"})," at any time. You can see that when it restarts, it automatically resumes from the last completed step:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Reliable Agent Demo",src:t(7936).A+"",width:"1080",height:"554"})}),"\n",(0,r.jsxs)(n.p,{children:["All source code is ",(0,r.jsx)(n.a,{href:"https://github.com/dbos-inc/durable-swarm/tree/main/examples/reliable_refund",children:"available on GitHub"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"writing-an-ai-powered-refund-agent",children:"Writing an AI-Powered Refund Agent"}),"\n",(0,r.jsxs)(n.p,{children:["Let's start off with creating an AI-powered refund agent using OpenAI's lightweight multi-agent orchestration framework, ",(0,r.jsx)(n.a,{href:"https://github.com/openai/swarm/tree/main",children:"Swarm"}),".\nThis agent contains two functions: ",(0,r.jsx)(n.code,{children:"process_refund"})," to help a user to return an item, and ",(0,r.jsx)(n.code,{children:"apply_discount"})," to apply a discount to the user's future purchases. These functions may be invoked based on OpenAI LLM's output. In addition, the ",(0,r.jsx)(n.code,{children:"process_refund"})," function invokes several sub-steps (",(0,r.jsx)(n.code,{children:"refund_step"}),") which simulates a complex refund workflow."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="agents.py"',children:'from swarm import Agent\nfrom dbos import DBOS\n\ndef process_refund(context_variables, item_id, reason="NOT SPECIFIED"):\n    """Refund an item. Refund an item. Make sure you have the item_id of the form item_... Ask for user confirmation before processing the refund."""\n    user_name = context_variables.get("user_name", "user")\n    print(f"[mock] Refunding for {user_name}, item {item_id}, because {reason}...")\n    for i in range(1, 6):\n        refund_step(i)\n        DBOS.sleep(1)\n    print("[mock] Refund successfully processed!")\n    return "Success!"\n\n@DBOS.step()\ndef refund_step(step_id):\n    print(f"[mock] Processing refund step {step_id}... Press Control + C to quit")\n\n@DBOS.step()\ndef apply_discount():\n    """Apply a discount to the user\'s cart."""\n    print("[mock] Applying discount...")\n    return "Applied discount of 11%"\n\nrefunds_agent = Agent(\n    name="Refunds Agent",\n    instructions="Help the user with a refund. If the reason is that it was too expensive, offer the user a refund code. If they insist, then process the refund.",\n    functions=[process_refund, apply_discount],\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We decorate the ",(0,r.jsx)(n.code,{children:"refund_step"})," and ",(0,r.jsx)(n.code,{children:"apply_discount"})," functions as DBOS steps in the agent's workflow. This way, if the agent's workflow is interrupted while processing a refund, when it restarts, it will resume from the last completed step.\nDBOS guarantees that once the agent's workflow starts, you will always get a refund, and never be refunded twice or get the discount twice!"]}),"\n",(0,r.jsx)(n.h2,{id:"reliable-agentic-workflow-orchestration",children:"Reliable Agentic Workflow Orchestration"}),"\n",(0,r.jsxs)(n.p,{children:["Next, let's enhance Swarm with a few lines of DBOS code to make it ",(0,r.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This code declares the main loop of Swarm (",(0,r.jsx)(n.code,{children:"run"}),") to be a durable DBOS workflow and each chat completion to be a DBOS step in that workflow.\nTherefore, if a workflow is interrupted, it will skip already finished chat completion steps and use the recorded outputs of those steps."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'from dbos import DBOS, DBOSConfiguredInstance\nfrom swarm import Swarm\nfrom swarm.repl.repl import pretty_print_messages\n\nDBOS()\n\n@DBOS.dbos_class()\nclass DurableSwarm(Swarm, DBOSConfiguredInstance):\n    def __init__(self, client=None):\n        Swarm.__init__(self, client)\n        DBOSConfiguredInstance.__init__(self, "openai_client")\n\n    @DBOS.step()\n    def get_chat_completion(self, *args, **kwargs):\n        return super().get_chat_completion(*args, **kwargs)\n\n    @DBOS.workflow()\n    def run(self, *args, **kwargs):\n        response = super().run(*args, **kwargs)\n        pretty_print_messages(response.messages)\n        return response\n\nDBOS.launch()\n'})}),"\n",(0,r.jsx)(n.p,{children:"Finally, let's create a DurableSwarm instance and use the refund agent to process refunds!\nThis script creates an interactive CLI for your agent."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'from agents import refunds_agent\n\ndef main():\n    client = DurableSwarm()\n    print("Connecting to Durable Refund Agent \ud83d\udcaa\ud83d\udc1d")\n\n    user_name = input("\\033[90mWhat\'s your name\\033[0m: \\n")\n    if user_name.strip() == "":\n        return  # Exit if user doesn\'t provide a name\n\n    query = "I want to refund item 99 because it\'s too expensive and I don\'t like its color! I want to proceed with the refund and also get a discount for my next purchase!"\n    context_variables = {"user_name": user_name}\n\n    client.run(\n        agent=refunds_agent,\n        messages=[{"role": "user", "content": query}],\n        context_variables=context_variables,\n    )\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"try-it-yourself",children:"Try it Yourself!"}),"\n",(0,r.jsxs)(n.p,{children:["To run this app, you need an OpenAI developer account.\nObtain an API key ",(0,r.jsx)(n.a,{href:"https://platform.openai.com/api-keys",children:"here"})," and set up a payment method for your account ",(0,r.jsx)(n.a,{href:"https://platform.openai.com/account/billing/overview",children:"here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Set your API key as an environment variable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"export OPENAI_API_KEY=<your_openai_key>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, clone and enter the ",(0,r.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"durable-swarm"})," repository:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/durable-swarm.git\ncd examples/reliable_refund\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Next, create a virtual environment and install ",(0,r.jsx)(n.a,{href:"https://github.com/openai/swarm/tree/main",children:"Swarm"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-transact-py",children:"DBOS"}),". Swarm requires Python >=3.10."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"python3 -m venv .venv\nsource .venv/bin/activate\npip install dbos git+https://github.com/openai/swarm.git\n"})}),"\n",(0,r.jsx)(n.p,{children:"DBOS requires a Postgres database.\nIf you don't already have one, you can start one with Docker:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"export PGPASSWORD=dbos\npython3 start_postgres_docker.py\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Finally, run the app in the virtual environment with a single command ",(0,r.jsx)(n.code,{children:"python3 main.py"}),".\nYou can crash and restart this application as many times as you want. An example output:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'> python3 main.py\n\nConnecting to Durable Refund Agent \ud83d\udcaa\ud83d\udc1d\nWhat\'s your name: Max\n[mock] Refunding for Max, item item_99, because Too expensive and I don\'t like its color...\n[mock] Processing refund step 1... Press Control + C to quit\n[mock] Processing refund step 2... Press Control + C to quit\n[mock] Processing refund step 3... Press Control + C to quit\n^C\u23ce\n\n# Resume from where the last completed step (step 3), continuing with step 4.\n> python3 main.py\n\nConnecting to Durable Refund Agent \ud83d\udcaa\ud83d\udc1d\n[mock] Refunding for Max, item item_99, because Too expensive and I don\'t like its color...\n[mock] Processing refund step 4... Press Control + C to quit\n[mock] Processing refund step 5... Press Control + C to quit\n[mock] Refund successfully processed!\n[mock] Applying discount...\nRefunds Agent:\nprocess_refund("item_id"= "item_99", "reason"= "Too expensive and I don\'t like its color")\napply_discount()\nRefunds Agent: I\'ve processed the refund for item 99 and also applied a discount of 11% for your next purchase. If there\'s anything else you need, feel free to ask!\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7936:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/reliable_agent_demo-a36cbe10e7f051d588c10dc1cba8b048.gif"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);