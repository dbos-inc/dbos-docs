"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1,title:"Application Structure",description:"Learn about the structure of an Operon application"},i=void 0,l={unversionedId:"explanations/application-structure-explanation",id:"explanations/application-structure-explanation",title:"Application Structure",description:"Learn about the structure of an Operon application",source:"@site/docs/explanations/application-structure-explanation.md",sourceDirName:"explanations",slug:"/explanations/application-structure-explanation",permalink:"/operon-docs/explanations/application-structure-explanation",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Application Structure",description:"Learn about the structure of an Operon application"},sidebar:"tutorialSidebar",previous:{title:"Concepts and Explanations",permalink:"/operon-docs/category/concepts-and-explanations"}},s={},p=[{value:"Directory Structure",id:"directory-structure",level:3},{value:"Code Structure",id:"code-structure",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this guide, you'll learn about the structure of an Operon application."),(0,a.kt)("h3",{id:"directory-structure"},"Directory Structure"),(0,a.kt)("p",null,"When you initialize an Operon project with ",(0,a.kt)("inlineCode",{parentName:"p"},"npx operon init"),", it has the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"operon-hello-app/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 knexfile.ts\n\u251c\u2500\u2500 migrations/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 operon-config.yaml\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 operations.ts\n\u251c\u2500\u2500 start_postgres_docker.sh\n\u2514\u2500\u2500 tsconfig.json\n")),(0,a.kt)("p",null,"The two most important files in an Operon project are ",(0,a.kt)("inlineCode",{parentName:"p"},"operon-config.yaml")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"src/operations.ts"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"operon-config.yaml")," defines the configuration of an Operon project, including database connection information, ORM configuration, and global logging configuration.\nAll options are documented in our ",(0,a.kt)("a",{parentName:"p",href:".."},"configuration reference"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"src/operations.ts")," is where Operon looks for your code.\nAt startup, the Operon runtime automatically loads all classes exported from this file, serving their endpoints and registering their transactions and workflows.\nIf you're writing a small application, you can write all your code directly in this file.\nIn a larger application, you can write your code wherever you want, but should use ",(0,a.kt)("inlineCode",{parentName:"p"},"src/operations.ts")," as an index file, exporting code written elsewhere."),(0,a.kt)("p",null,"As for the rest of the directory:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"knexfile.ts")," is a configuration file for ",(0,a.kt)("a",{parentName:"li",href:"https://knexjs.org"},"Knex"),", which we use as a query builder and migration tool."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"migrations")," is initialized with a Knex database migration used in the ",(0,a.kt)("a",{parentName:"li",href:"../getting-started/quickstart"},"quickstart guide"),".  If you're using Knex for schema management, you can create your own migrations here."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"node_modules"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"package-lock.json"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"package.json"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," are needed by all Node/Typescript projects."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_postgres_docker.sh")," is a convenience script that initializes a Docker-hosted Postgres database for use in the ",(0,a.kt)("a",{parentName:"li",href:"../getting-started/quickstart"},"quickstart"),".  You can modify this script if you want to use Docker-hosted Postgres for local development.")),(0,a.kt)("h3",{id:"code-structure"},"Code Structure"),(0,a.kt)("p",null,"Here's the initial source code generated by ",(0,a.kt)("inlineCode",{parentName:"p"},"npx operon init")," (in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/operations.ts"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { TransactionContext, OperonTransaction, GetApi, HandlerContext } from '@dbos-inc/operon'\nimport { Knex } from 'knex';\n\ntype KnexTransactionContext = TransactionContext<Knex>;\n\ninterface operon_hello {\n  name: string;\n  greet_count: number;\n}\n\nexport class Hello {\n\n  @OperonTransaction()\n  static async helloTransaction(txnCtxt: KnexTransactionContext, name: string) {\n    // Look up greet_count.\n    let greet_count = await txnCtxt.client<operon_hello>(\"operon_hello\")\n      .select(\"greet_count\")\n      .where({ name: name })\n      .first()\n      .then(row => row?.greet_count);\n    if (greet_count) {\n      // If greet_count is set, increment it.\n      greet_count++;\n      await txnCtxt.client<operon_hello>(\"operon_hello\")\n        .where({ name: name })\n        .increment('greet_count', 1);\n    } else {\n      // If greet_count is not set, set it to 1.\n      greet_count = 1;\n      await txnCtxt.client<operon_hello>(\"operon_hello\")\n        .insert({ name: name, greet_count: 1 })\n    }\n    return `Hello, ${name}! You have been greeted ${greet_count} times.\\n`;\n  }\n\n  @GetApi('/greeting/:name')\n  static async helloHandler(handlerCtxt: HandlerContext, name: string) {\n    return handlerCtxt.invoke(Hello).helloTransaction(name);\n  }\n}\n\n")),(0,a.kt)("p",null,"An Operon application like this one is made up of classes encapsulating ",(0,a.kt)("em",{parentName:"p"},"functions"),", written as decorated static class methods.\nThere are four basic types of functions.\nThis example contains two of them:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../tutorials/transaction-tutorial"},(0,a.kt)("strong",{parentName:"a"},"Transactions")),", like ",(0,a.kt)("inlineCode",{parentName:"li"},"helloTransaction")," perform database operations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../tutorials/http-serving-tutorial"},(0,a.kt)("strong",{parentName:"a"},"Handlers")),", like ",(0,a.kt)("inlineCode",{parentName:"li"},"helloHandler"),", serve HTTP requests.")),(0,a.kt)("p",null,"There are two more:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../tutorials/communicator-tutorial"},(0,a.kt)("strong",{parentName:"a"},"Communicators"))," manage communication with external services and APIs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../tutorials/workflow-tutorial"},(0,a.kt)("strong",{parentName:"a"},"Workflows"))," reliably orchestrate other functions.")),(0,a.kt)("p",null,"A function needs to follow a few rules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It must be a static class method.  For Operon to find it, that class must be exported from ",(0,a.kt)("inlineCode",{parentName:"li"},"src/operations.ts"),"."),(0,a.kt)("li",{parentName:"ul"},"It must have a decorator telling Operon what kind of function it is: ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/decorators#operontransaction"},(0,a.kt)("inlineCode",{parentName:"a"},"@OperonTransaction"))," for transactions, ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/decorators#operoncommunicator"},(0,a.kt)("inlineCode",{parentName:"a"},"@OperonCommunicator"))," for communicators, ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/decorators#operonworkflow"},(0,a.kt)("inlineCode",{parentName:"a"},"@OperonWorkflow"))," for workflows, or ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/decorators#getapi"},(0,a.kt)("inlineCode",{parentName:"a"},"GetApi"))," or ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/decorators#postapi"},(0,a.kt)("inlineCode",{parentName:"a"},"PostApi"))," for handlers."),(0,a.kt)("li",{parentName:"ul"},"Its first argument must be the appropriate kind of ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/contexts"},"Operon context"),". Contexts provide functions with useful methods, such as access to a database client for transactions."),(0,a.kt)("li",{parentName:"ul"},"Its input and return types must be serializable to JSON.")),(0,a.kt)("p",null,"Once you've written your functions, there are two basic ways to call them:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Any function (not just handlers) can be called from HTTP if it's annotated with the ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/decorators#getapi"},(0,a.kt)("inlineCode",{parentName:"a"},"GetApi"))," or ",(0,a.kt)("a",{parentName:"li",href:"../api-reference/decorators#postapi"},(0,a.kt)("inlineCode",{parentName:"a"},"PostApi"))," decorators.  See our ",(0,a.kt)("a",{parentName:"li",href:"/operon-docs/tutorials/http-serving-tutorial"},"HTTP serving tutorial")," for details."),(0,a.kt)("li",{parentName:"ol"},"Handlers and workflows can invoke other functions via their contexts' ",(0,a.kt)("a",{parentName:"li",href:".."},"invoke")," method.")),(0,a.kt)("p",null,"To learn more about each individual type of function and what it can do, see our ",(0,a.kt)("a",{parentName:"p",href:"../category/tutorials/"},"tutorials"),"."))}m.isMDXComponent=!0}}]);