"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=s(n),d=a,m=g["".concat(p,".").concat(d)]||g[d]||u[d]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[g]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:9,title:"Logging and Tracing",description:"Learn how to observe your Operon workflows"},i=void 0,l={unversionedId:"tutorials/logging",id:"tutorials/logging",title:"Logging and Tracing",description:"Learn how to observe your Operon workflows",source:"@site/docs/tutorials/logging.md",sourceDirName:"tutorials",slug:"/tutorials/logging",permalink:"/tutorials/logging",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Logging and Tracing",description:"Learn how to observe your Operon workflows"},sidebar:"tutorialSidebar",previous:{title:"Using TypeORM",permalink:"/tutorials/using-typeorm"},next:{title:"Testing and Debugging",permalink:"/tutorials/testing-tutorial"}},p={},s=[{value:"Logging",id:"logging",level:2},{value:"Usage",id:"usage",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Tracing",id:"tracing",level:2},{value:"Jaeger exporter",id:"jaeger-exporter",level:3}],c={toc:s},g="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this section we will learn about two aspects of observability in Operon: logging and tracing."),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("p",null,"An Operon runtime comes with a global logger you can access through the context of each Operation."),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@GetApi('/greeting/:name')\nstatic async greetingEndpoint(ctx: HandlerContext, name: string) {\n    ctx.logger.info(\"Logging from the greeting handler\");\n    return `Greeting, ${name}`;\n}\n")),(0,a.kt)("p",null,"The logger supports ",(0,a.kt)("inlineCode",{parentName:"p"},"info()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"debug()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"warn()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"emerg()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"alert()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"crit()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"error()"),".\nEach take a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," argument, except for ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," which accepts ",(0,a.kt)("inlineCode",{parentName:"p"},"any")," objects.\nYou can directly pass to ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," an ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," instance and have the stack trace displayed.\nIf you pass a string, the logger will wrap it up in an ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," so it can display a stack trace.\nAny other object type will be presented as-is."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@GetApi('/greeting/:name')\nstatic async greetingEndpoint(ctx: HandlerContext, name: string) {\n    const err = new Error(\"an error!\");\n    ctx.logger.error(err);\n    return `Greeting, ${name}`;\n}\n")),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"operon-config.yaml"),", you can configure the logging level, silence the logger, and request contextual information being added to log entries:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"...\ntelemetry:\n  logs:\n    loglevel: info (default) | debug | warn | emerg | alert | crit | error\n    addContextMetadata: true (default) | false\n    silent: false (default) | true\n")),(0,a.kt)("p",null,"Context metadata include workflow UUID and workflow identity."),(0,a.kt)("p",null,"You can also configure the logging level with a CLI argument to the Operon runtime:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx operon start --loglevel debug\n")),(0,a.kt)("h2",{id:"tracing"},"Tracing"),(0,a.kt)("p",null,"Operon workflows natively produces ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry"),"-compatible traces.\nWhen a request arrives at an Operon handler, the frameworks looks up any ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/trace-context/#trace-context-http-headers-format"},"W3C-compatible trace context")," in the HTTP headers.\nIf found, it uses said context to create a new child Span and continue the trace, otherwise it starts a new trace. Each Operon operation creates a new child Span for the current trace.\nFinally, Operon will inject the trace context in the HTTP headers of the response returned by the handler."),(0,a.kt)("p",null,"Each operation's Span is available through its Context.\nHere is an example accessing the Span to set custom trace attributes and events:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'@GetApi(\'/greeting/:name\')\nstatic async greetingEndpoint(ctx: HandlerContext, name: string) {\n  ctx.span.setAttributes({\n    key1: "value1",\n    key2: "value2",\n  });\n\n  ctx.span.addEvent("Greeting event", { attribute: "value" });\n\n  return `Greeting, ${name}`;\n}\n')),(0,a.kt)("p",null,"Under the hood, ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.span")," is implemented by the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base"},"OpenTelemetry NodeJS SDK"),"."),(0,a.kt)("h3",{id:"jaeger-exporter"},"Jaeger exporter"),(0,a.kt)("p",null,"Operon ships with a ",(0,a.kt)("a",{parentName:"p",href:"https://jaegertracing.io/"},"Jaeger")," exporter whcih you can enable in the configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"...\ntelemetry:\n  traces:\n    enable: true (default) | false\n    endpoint: http://localhost:4318/v1/traces (default)\n")))}u.isMDXComponent=!0}}]);