"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[2642],{761:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"production/dbos-cloud/otel-integration","title":"Export Logs and Traces","description":"This tutorial shows how to configure your DBOS Cloud application to export OpenTelemetry logs and traces to a third party observability service. If your service accepts the OTEL format, you can skip steps 1 and 2. Simply pass environment variables like OTELEXPORTEROTLP_HEADERS as app secrets (see step 3) and then configure logs and traces enpdoints as shown in step 4.","source":"@site/docs/production/dbos-cloud/otel-integration.md","sourceDirName":"production/dbos-cloud","slug":"/production/dbos-cloud/otel-integration","permalink":"/production/dbos-cloud/otel-integration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":75,"frontMatter":{"sidebar_position":75,"title":"Export Logs and Traces"},"sidebar":"tutorialSidebar","previous":{"title":"Monitoring Your Applications","permalink":"/production/dbos-cloud/monitoring-dashboard"},"next":{"title":"CI/CD Best Practices","permalink":"/production/dbos-cloud/cicd"}}');var s=t(4848),r=t(8453);const i={sidebar_position:75,title:"Export Logs and Traces"},a=void 0,c={},p=[{value:"1. Create a Custom VM Setup Script",id:"1-create-a-custom-vm-setup-script",level:2},{value:"2. Configure Your App to Run the Script on Deploy",id:"2-configure-your-app-to-run-the-script-on-deploy",level:2},{value:"3. Set the Datadog API Key to Your App&#39;s Environment",id:"3-set-the-datadog-api-key-to-your-apps-environment",level:2},{value:"4. Configure your App to Export Logs and Traces to otel-contrib",id:"4-configure-your-app-to-export-logs-and-traces-to-otel-contrib",level:2},{value:"5. Add RAM if Needed, and Deploy!",id:"5-add-ram-if-needed-and-deploy",level:2}];function d(e){const o={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components},{TabItem:t,Tabs:n}=o;return t||u("TabItem",!0),n||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.p,{children:["This tutorial shows how to configure your DBOS Cloud application to export OpenTelemetry logs and traces to a third party observability service. If your service accepts the OTEL format, you can skip steps 1 and 2. Simply pass environment variables like ",(0,s.jsx)(o.code,{children:"OTEL_EXPORTER_OTLP_HEADERS"})," as ",(0,s.jsx)(o.a,{href:"/production/dbos-cloud/secrets",children:"app secrets"})," (see ",(0,s.jsx)(o.a,{href:"#3-set-the-datadog-api-key-to-your-apps-environment",children:"step 3"}),") and then configure logs and traces enpdoints as shown in ",(0,s.jsx)(o.a,{href:"#4-configure-your-app-to-export-logs-and-traces-to-otel-contrib",children:"step 4"}),"."]}),"\n",(0,s.jsx)(o.p,{children:"Other services may require additional software. Here we use Datadog as an example. We connect by installing the otel-contrib package in the App VM at deployment time and configuring it with the Datadog API key to export data."}),"\n",(0,s.jsx)(o.admonition,{type:"info",children:(0,s.jsxs)(o.p,{children:["These steps require a ",(0,s.jsx)(o.a,{href:"https://www.dbos.dev/pricing",children:"DBOS Pro or Enterprise"})," subscription."]})}),"\n",(0,s.jsx)(o.h2,{id:"1-create-a-custom-vm-setup-script",children:"1. Create a Custom VM Setup Script"}),"\n",(0,s.jsxs)(o.p,{children:["In your app directory (next to ",(0,s.jsx)(o.code,{children:"dbos-config.yaml"}),") create the following script called ",(0,s.jsx)(o.code,{children:"build.sh"}),". Make sure to set its permissions to execute."]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:'#!/bin/bash\n\n# Download and install otel-contrib in the MicroVM\ncurl -L -O https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.121.0/otelcol-contrib_0.121.0_linux_amd64.deb\ndpkg -i otelcol-contrib_0.121.0_linux_amd64.deb\nrm otelcol-contrib_0.121.0_linux_amd64.deb\n\n# Configure and enable it\ncat <<EOF > /etc/otelcol-contrib/config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n        endpoint: "0.0.0.0:4318" \n\nprocessors:\n  batch:\n\nexporters:\n  datadog:\n    api:\n      site: datadoghq.com        #this URL depends on your datadog region\n      key: ${DATADOG_API_KEY}    #this is passed in a secret or env (see below)\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [datadog]\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [datadog]\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [datadog]\nEOF\n\nsystemctl restart otelcol-contrib\nsystemctl enable otelcol-contrib\n'})}),"\n",(0,s.jsx)(o.h2,{id:"2-configure-your-app-to-run-the-script-on-deploy",children:"2. Configure Your App to Run the Script on Deploy"}),"\n",(0,s.jsxs)(o.p,{children:["Add the build.sh script as a custom setup to your runtimeConfig in your ",(0,s.jsx)(o.code,{children:"dbos-config.yaml"}),". See ",(0,s.jsx)(o.a,{href:"./application-management#customizing-microvm-setup",children:"Customizing MicroVM Setup"})," for more info."]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-yaml",children:'runtimeConfig:\n  setup:\n    - "./build.sh"\n  start:\n    - npm run start #or your custom start command\n'})}),"\n",(0,s.jsx)(o.h2,{id:"3-set-the-datadog-api-key-to-your-apps-environment",children:"3. Set the Datadog API Key to Your App's Environment"}),"\n",(0,s.jsx)(o.p,{children:"After registering your app, set the API key like so:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:"dbos-cloud app register -d <YOUR_DATABASE_NAME>\ndbos-cloud app secrets create -s DATADOG_API_KEY -v 678... #your key value\n"})}),"\n",(0,s.jsxs)(o.p,{children:["The script we created in step 1 will read this value and pass it to ",(0,s.jsx)(o.code,{children:"otel-contrib"}),"."]}),"\n",(0,s.jsx)(o.h2,{id:"4-configure-your-app-to-export-logs-and-traces-to-otel-contrib",children:"4. Configure your App to Export Logs and Traces to otel-contrib"}),"\n",(0,s.jsxs)(o.p,{children:["In the app code, when creating the ",(0,s.jsx)(o.code,{children:"DBOS"})," object, pass in the Logs and Traces endpoints like so:"]}),"\n",(0,s.jsxs)(n,{groupId:"languages",className:"small-tabs",children:[(0,s.jsx)(t,{value:"python",label:"Python",children:(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-python",children:'from dbos import DBOSConfig\nconfig: DBOSConfig = {\n        "name": "your-app-name", \n        "otlp_traces_endpoints": [ "http://0.0.0.0:4318/v1/traces" ], #match the config in step 1 above\n        "otlp_logs_endpoints": [  "http://0.0.0.0:4318/v1/logs" ]\n}\nDBOS(fastapi=app, config=config)\n'})})}),(0,s.jsx)(t,{value:"typescript",label:"Typescript",children:(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-typescript",children:'DBOS.setConfig({ \n  "name": "your-app-name",\n  "otlpTracesEndpoints": [ "http://0.0.0.0:4318/v1/traces" ],\n  "otlpLogsEndpoints": [  "http://0.0.0.0:4318/v1/logs" ]\n});\nawait DBOS.launch({ expressApp: app });\n'})})})]}),"\n",(0,s.jsx)(o.h2,{id:"5-add-ram-if-needed-and-deploy",children:"5. Add RAM if Needed, and Deploy!"}),"\n",(0,s.jsx)(o.p,{children:"Depending on your app\u2019s other memory usage, you may need to increase your RAM limit to make room for the otel-contrib process."}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:"dbos-cloud app update --executors-memory-mib 1024\ndbos-cloud app deploy\n"})}),"\n",(0,s.jsx)(o.p,{children:"Within a few minutes of deploying you should see your logs appear in Datadog."})]})}function l(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function u(e,o){throw new Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>a});var n=t(6540);const s={},r=n.createContext(s);function i(e){const o=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:o},e.children)}}}]);