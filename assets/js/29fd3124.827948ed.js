"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3564],{5808:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"typescript/examples/task-scheduler","title":"DBOS Task Scheduler","description":"Learn how to combine DBOS + Next.js with this cloud scheduling tool","source":"@site/docs/typescript/examples/task-scheduler.md","sourceDirName":"typescript/examples","slug":"/typescript/examples/task-scheduler","permalink":"/typescript/examples/task-scheduler","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":20,"title":"DBOS Task Scheduler","description":"Learn how to combine DBOS + Next.js with this cloud scheduling tool"},"sidebar":"examplesSidebar","previous":{"title":"Kafka Alert Queue","permalink":"/typescript/examples/kafka-alert-queue"},"next":{"title":"Fault-Tolerant Checkout","permalink":"/golang/examples/widget-store"}}');var i=n(4848),r=n(8453);const a={displayed_sidebar:"examplesSidebar",sidebar_position:20,title:"DBOS Task Scheduler",description:"Learn how to combine DBOS + Next.js with this cloud scheduling tool"},o="DBOS Task Scheduler",l={},c=[{value:"Running DBOS Task Scheduler in DBOS Cloud",id:"running-dbos-task-scheduler-in-dbos-cloud",level:2},{value:"Running DBOS Task Scheduler Locally",id:"running-dbos-task-scheduler-locally",level:2},{value:"Setting Up A Database",id:"setting-up-a-database",level:3},{value:"Running In Development",id:"running-in-development",level:3},{value:"Production Builds",id:"production-builds",level:3},{value:"DBOS Task Scheduler&#39;s Web UI",id:"dbos-task-schedulers-web-ui",level:2},{value:"Setting Up Email Notifications (Optional)",id:"setting-up-email-notifications-optional",level:2},{value:"DBOS and Database Logic",id:"dbos-and-database-logic",level:2},{value:"Task Code",id:"task-code",level:3},{value:"Main Workflow",id:"main-workflow",level:3},{value:"Scheduling",id:"scheduling",level:3},{value:"Database Schema and Transactions",id:"database-schema-and-transactions",level:3},{value:"UI",id:"ui",level:2},{value:"UI Components",id:"ui-components",level:3},{value:"Server Actions",id:"server-actions",level:3},{value:"Sending Email with Amazon SES",id:"sending-email-with-amazon-ses",level:3},{value:"WebSockets",id:"websockets",level:3},{value:"Database Notifications",id:"database-notifications",level:3},{value:"Next.js Custom Server",id:"nextjs-custom-server",level:3},{value:"The Importance of <code>globalThis</code>",id:"the-importance-of-globalthis",level:4},{value:"Configuration Files",id:"configuration-files",level:2},{value:"<code>dbos-config.yaml</code>",id:"dbos-configyaml",level:3},{value:"<code>knexfile.ts</code>",id:"knexfilets",level:3},{value:"<code>next.config.ts</code>",id:"nextconfigts",level:3}];function d(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"dbos-task-scheduler",children:"DBOS Task Scheduler"})}),"\n",(0,i.jsxs)(s.p,{children:["DBOS Task Scheduler is a full-stack app built with ",(0,i.jsx)(s.a,{href:"https://nextjs.org/",children:"Next.js"})," and ",(0,i.jsx)(s.a,{href:"https://dbos.dev",children:"DBOS"}),"."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Screen shot of DBOS Task Scheduler",src:n(7536).A+"",width:"3766",height:"1154"})}),"\n",(0,i.jsxs)(s.p,{children:["If you like the idea of a cloud-based task scheduler with a calendar UI, you can easily ",(0,i.jsx)(s.a,{href:"#task-code",children:"customize it with your own tasks"})," and deploy it to ",(0,i.jsx)(s.a,{href:"https://www.dbos.dev/dbos-cloud",children:"DBOS Cloud"})," for free."]}),"\n",(0,i.jsx)(s.h2,{id:"running-dbos-task-scheduler-in-dbos-cloud",children:"Running DBOS Task Scheduler in DBOS Cloud"}),"\n",(0,i.jsx)(s.p,{children:"Provisioning an instance of DBOS Task Scheduler in DBOS Cloud is easy:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Go to ",(0,i.jsx)(s.a,{href:"https://console.dbos.dev/launch",children:"DBOS Cloud Console"})]}),"\n",(0,i.jsx)(s.li,{children:"Sign Up or Sign In, if you haven't already"}),"\n",(0,i.jsx)(s.li,{children:'Select the "TYPESCRIPT" tab'}),"\n",(0,i.jsx)(s.li,{children:'Choose the "DBOS Task Scheduler" template'}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"After a bit of launch activity, you will be presented with:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"A URL for accessing the app"}),"\n",(0,i.jsx)(s.li,{children:"Monitoring dashboards"}),"\n",(0,i.jsx)(s.li,{children:"Management options"}),"\n",(0,i.jsx)(s.li,{children:"Code download"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"You can also set secrets in DBOS Cloud.  Secrets, which are read from environment variables, can be set up to control the email address and SES access keys used by the scheduler to send confirmation emails."}),"\n",(0,i.jsx)(s.h2,{id:"running-dbos-task-scheduler-locally",children:"Running DBOS Task Scheduler Locally"}),"\n",(0,i.jsxs)(s.p,{children:["If you ",(0,i.jsx)(s.a,{href:"#running-dbos-task-scheduler-in-dbos-cloud",children:"started out in DBOS Cloud"}),", you can download your code to your development environment.  Or, you can ",(0,i.jsx)(s.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"clone the code from the git repository"})," and change to the ",(0,i.jsx)(s.code,{children:"typescript/nextjs-calendar"})," directory."]}),"\n",(0,i.jsx)(s.h3,{id:"setting-up-a-database",children:"Setting Up A Database"}),"\n",(0,i.jsxs)(s.p,{children:["DBOS requires a Postgres database.\nIf you already have Postgres, you can set the ",(0,i.jsx)(s.code,{children:"DBOS_DATABASE_URL"})," environment variable to your connection string.\nOtherwise, you can start Postgres in a Docker container with this command:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-shell",children:"npx dbos postgres start\n"})}),"\n",(0,i.jsx)(s.h3,{id:"running-in-development",children:"Running In Development"}),"\n",(0,i.jsx)(s.p,{children:"Once you have a local copy of the DBOS Task Scheduler, run the following:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npm install\nnpm run dev\n"})}),"\n",(0,i.jsxs)(s.p,{children:["When running under ",(0,i.jsx)(s.code,{children:"npm run dev"}),", any changes to source files will cause the application to reload (if UI components were changed) or restart (if DBOS server components were changed)."]}),"\n",(0,i.jsx)(s.h3,{id:"production-builds",children:"Production Builds"}),"\n",(0,i.jsxs)(s.p,{children:["Instead of ",(0,i.jsx)(s.code,{children:"npm run dev"}),' it is also possible to run the following sequence of commands to launch an optimized "production" build:']}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"npm install\nnpm run build\nnpx knex migrate:latest\nnpm run start\n"})}),"\n",(0,i.jsx)(s.h2,{id:"dbos-task-schedulers-web-ui",children:"DBOS Task Scheduler's Web UI"}),"\n",(0,i.jsx)(s.p,{children:"Once the app is running, open it in a web browser."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["If the app is running In DBOS Cloud, the URL will be shown ",(0,i.jsx)(s.a,{href:"https://console.dbos.dev/applications",children:"in the cloud console"}),' under "Visit your app", and the URL will also be reported in the output of the deploy command.']}),"\n",(0,i.jsxs)(s.li,{children:["If running locally, the default will be at ",(0,i.jsx)(s.a,{href:"http://localhost:3000/",children:"http://localhost:3000/"}),", but check your startup logs for confirmation."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Upon opening the web browser (and perhaps dismissing the help popup), the main screen should be shown:\n",(0,i.jsx)(s.img,{alt:"Screen shot of DBOS Task Scheduler",src:n(7536).A+"",width:"3766",height:"1154"})]}),"\n",(0,i.jsx)(s.h2,{id:"setting-up-email-notifications-optional",children:"Setting Up Email Notifications (Optional)"}),"\n",(0,i.jsxs)(s.p,{children:["The DBOS Task Scheduler app will ",(0,i.jsx)(s.em,{children:"optionally"})," send notifications using Amazon Simple Email Service (SES).  To use this, set the following environment variables prior to launching the app:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"AWS_REGION: The AWS region for SES service"}),"\n",(0,i.jsx)(s.li,{children:"AWS_ACCESS_KEY_ID: The AWS access key provisioned for SES access"}),"\n",(0,i.jsx)(s.li,{children:"AWS_SECRET_ACCESS_KEY: The access secret corresponding to AWS_ACCESS_KEY_ID"}),"\n",(0,i.jsx)(s.li,{children:'REPORT_EMAIL_FROM_ADDRESS: The email address to use as the "from" address for results reports'}),"\n",(0,i.jsx)(s.li,{children:'REPORT_EMAIL_TO_ADDRESS: The email address to use as the "to" address for results reports'}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"If these environment variables aren't set, email will not be sent."}),"\n",(0,i.jsx)(s.h1,{id:"code-tour",children:"Code Tour"}),"\n",(0,i.jsx)(s.admonition,{type:"tip",children:(0,i.jsxs)(s.p,{children:["The DBOS Task Scheduler app is somewhat complex, showcasing many features.  For a simpler starting point, see ",(0,i.jsx)(s.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/dbos-nextjs-starter#readme",children:"dbos-nextjs-starter"}),"."]})}),"\n",(0,i.jsx)(s.p,{children:"This app uses the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["DBOS ",(0,i.jsx)(s.a,{href:"/typescript/tutorials/workflow-tutorial",children:"Workflows"}),", ",(0,i.jsx)(s.a,{href:"/typescript/tutorials/transaction-tutorial",children:"Transactions"}),", and ",(0,i.jsx)(s.a,{href:"/typescript/tutorials/step-tutorial",children:"Steps"})," \u2013 Complete actions ",(0,i.jsx)(s.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"exactly once"}),", record the results, and send notifications, without worrying about server disruptions"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"https://knexjs.org/",children:"Knex"})," \u2013 Type-safe database access and schema management"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"/typescript/tutorials/scheduled-workflows",children:"DBOS Scheduled Workflows"})," \u2013 Ensure tasks are run as scheduled"]}),"\n",(0,i.jsxs)(s.li,{children:["React, with ",(0,i.jsx)(s.a,{href:"https://mui.com",children:"Material"})," and ",(0,i.jsx)(s.a,{href:"https://github.com/jquense/react-big-calendar",children:"react-big-calendar"})," \u2013 Present a calendar of tasks and results"]}),"\n",(0,i.jsx)(s.li,{children:"Next.js server actions \u2013 Simple interaction between the browser-based client and the server"}),"\n",(0,i.jsx)(s.li,{children:"Next.js API routes and DBOS HTTP endpoints \u2013 Allow access to the server logic from clients other than Next.js"}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API",children:"WebSockets"})," \u2013 Send calendar and result updates to the browser with low latency"]}),"\n",(0,i.jsx)(s.li,{children:"Database triggers \u2013 Listen for database updates made by other VMs"}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.a,{href:"https://jestjs.io/",children:"Jest"})," \u2013 Unit test backend code"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"dbos-and-database-logic",children:"DBOS and Database Logic"}),"\n",(0,i.jsx)(s.h3,{id:"task-code",children:"Task Code"}),"\n",(0,i.jsxs)(s.p,{children:["The list of schedulable tasks is in ",(0,i.jsx)(s.code,{children:"src/dbos/tasks.ts"}),". The ",(0,i.jsx)(s.code,{children:"schedulableTasks"})," array contains the available tasks, with information needed for ",(0,i.jsx)(s.code,{children:"doTaskFetch"})," to execute them.  Tasks can be added by expanding the array with additional entries:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  {\n    id: 'fetch_joke', // Unique ID for the task\n    name: 'Fetch Random Joke', // Text label the task\n    url: 'https://official-joke-api.appspot.com/random_joke', // URL to fetch when the task runs\n    type: 'json', // Type of result to expect from the task\n  },\n"})}),"\n",(0,i.jsx)(s.h3,{id:"main-workflow",children:"Main Workflow"}),"\n",(0,i.jsxs)(s.p,{children:["The main workflow for executing tasks is in ",(0,i.jsx)(s.code,{children:"src/dbos/operations.ts"}),", in the ",(0,i.jsx)(s.code,{children:"SchedulerOps"})," class:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  @DBOS.workflow()\n  static async runJob(sched: string, task: string, time: Date) {\n    DBOS.logger.info(`Running ${task} at ${time.toString()}`);\n\n    let resstr = \"\";\n    let errstr = \"\";\n\n    try {\n      // Fetch the result\n      const res = await SchedulerOps.runTask(task);\n      resstr = res;\n\n      // Store result in database\n      await ScheduleDBOps.setResult(sched, task, time, res, '');\n    }\n    catch (e) {\n      const err = e as Error;\n      // Store error in database\n      await ScheduleDBOps.setResult(sched, task, time, '', err.message);\n      errstr = err.message;\n    }\n\n    // Tell attached clients\n    SchedulerOps.notifyListeners('result');\n\n    // Send notification\n    await SchedulerOps.sendStatusEmail(\n      errstr ? `Task ${task} failed` : `Task ${task} result`,\n      errstr || resstr\n    );\n  }\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Because it is a ",(0,i.jsx)(s.code,{children:"@DBOS.workflow"}),", ",(0,i.jsx)(s.code,{children:"runJob"})," will be ",(0,i.jsx)(s.a,{href:"/typescript/tutorials/workflow-tutorial",children:"executed durably"}),".  That is, if the server crashes after ",(0,i.jsx)(s.code,{children:"runTask"})," is complete, but the result hasn't been recorded in the database with ",(0,i.jsx)(s.code,{children:"setResult"}),", or if the email hasn't been sent by ",(0,i.jsx)(s.code,{children:"sendStatusEmail"}),", DBOS Transact will finish the workflow during recovery and execute those steps."]}),"\n",(0,i.jsx)(s.h3,{id:"scheduling",children:"Scheduling"}),"\n",(0,i.jsxs)(s.p,{children:["Scheduling a workflow in DBOS is quite simple; simply affix the ",(0,i.jsxs)(s.a,{href:"https://docs.dbos.dev/typescript/tutorials/scheduled-workflows",children:[(0,i.jsx)(s.code,{children:"@DBOS.scheduled"})," decorator"]}),".  The ",(0,i.jsx)(s.code,{children:"crontab"})," of ",(0,i.jsx)(s.code,{children:"'* * * * *'"})," will cause ",(0,i.jsx)(s.code,{children:"runSchedule"})," to execute every minute, and ",(0,i.jsx)(s.code,{children:"runSchedule"})," will check the database for tasks to execute."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  @DBOS.scheduled({crontab: '* * * * *', mode: SchedulerMode.ExactlyOncePerIntervalWhenActive })\n  @DBOS.workflow()\n  static async runSchedule(schedTime: Date, _atTime: Date) {\n    // Retrieve schedule from database\n    const schedule = await ScheduleDBOps.getSchedule();\n    for (const sched of schedule) {\n      // See if this schedule should be triggered now\n      const occurrences = getOccurrencesAt(sched, schedTime);\n      for (const occurrence of occurrences) {\n        // Start each job in the background\n        await DBOS.startWorkflow(SchedulerOps).runJob(sched.id, sched.task, occurrence);\n      }\n    }\n  }\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Note that the use of ",(0,i.jsx)(s.code,{children:"mode: SchedulerMode.ExactlyOncePerIntervalWhenActive"})," means that makeup work will not be performed if DBOS is down at the time that tasks are scheduled.  To make up for missed intervals, ensuring the scheduled workflows run exactly once, use ",(0,i.jsx)(s.code,{children:"mode: SchedulerMode.ExactlyOncePerInterval"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"database-schema-and-transactions",children:"Database Schema and Transactions"}),"\n",(0,i.jsxs)(s.p,{children:["DBOS Task Scheduler stores its schedule and results data in a Postgres database using ",(0,i.jsx)(s.a,{href:"https://knexjs.org/",children:"Knex"}),".  The code for the transactions resides in ",(0,i.jsx)(s.code,{children:"src/dbos/dbtransactions.ts"}),".  For example, the ",(0,i.jsx)(s.code,{children:"getSchedule"})," method in ",(0,i.jsx)(s.code,{children:"ScheduleDBOps"})," retrieves the entire schedule from the database:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  @knexds.transaction({readOnly: true})\n  static async getSchedule() {\n    return await knexds.client<ScheduleRecord>('schedule').select();\n  }\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Note that the transaction function is decorated with ",(0,i.jsx)(s.a,{href:"https://docs.dbos.dev/typescript/tutorials/transaction-tutorial",children:(0,i.jsx)(s.code,{children:"@<data source>.transaction"})}),".  The ",(0,i.jsx)(s.code,{children:"ScheduleRecord"})," has been defined in ",(0,i.jsx)(s.code,{children:"src/types/models.ts"})," and is applied to the query for type checking."]}),"\n",(0,i.jsx)(s.h2,{id:"ui",children:"UI"}),"\n",(0,i.jsxs)(s.p,{children:["The user interface for DBOS Task Scheduler is built on React, with ",(0,i.jsx)(s.a,{href:"https://mui.com",children:"Material"})," and ",(0,i.jsx)(s.a,{href:"https://github.com/jquense/react-big-calendar",children:"react-big-calendar"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"ui-components",children:"UI Components"}),"\n",(0,i.jsxs)(s.p,{children:["The app-specific UI components can be found in ",(0,i.jsx)(s.code,{children:"src/app/components/*.tsx"}),", with the overall layout established in ",(0,i.jsx)(s.code,{children:"src/app/layout.tsx"})," and ",(0,i.jsx)(s.code,{children:"src/app/page.tsx"}),".  Nothing in these components is particularly notable; they just use core React/Next.js constructs."]}),"\n",(0,i.jsx)(s.h3,{id:"server-actions",children:"Server Actions"}),"\n",(0,i.jsxs)(s.p,{children:["One of the key benefits of Next.js over straight React is ",(0,i.jsx)(s.a,{href:"https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations",children:"server actions"}),".  Server actions provide an easy way for the UI to call code on the server, without specifying the API."]}),"\n",(0,i.jsxs)(s.p,{children:["Within DBOS Task Scheduler, server actions are used for updating the calendar tasks, and fetching results.  The action code can be found in ",(0,i.jsx)(s.code,{children:"src/actions/schedule.ts"}),".  For example, ",(0,i.jsx)(s.code,{children:"ScheduleForm.tsx"})," calls the ",(0,i.jsx)(s.code,{children:"addSchedule"})," server action:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Add a new schedule item\nexport async function addSchedule(task: string, start: Date, end: Date, repeat: string) {\n  const res = await ScheduleDBOps.addScheduleItem(task, start, end, repeat);\n  // Tell attached clients\n  SchedulerOps.notifyListeners('schedule');\n  return res;\n}\n"})}),"\n",(0,i.jsxs)(s.p,{children:["This server action will in turn call DBOS.  Note that ",(0,i.jsx)(s.code,{children:"addSchedule"})," involves a remote method invocation provided by Next.js, as the ",(0,i.jsx)(s.code,{children:"ScheduleForm"})," is rendered on the client, and ",(0,i.jsx)(s.code,{children:"addSchedule"})," is processed on the server."]}),"\n",(0,i.jsx)(s.h3,{id:"sending-email-with-amazon-ses",children:"Sending Email with Amazon SES"}),"\n",(0,i.jsxs)(s.p,{children:["The optional sending of task results emails is done using Amazon SES, and the ",(0,i.jsx)(s.code,{children:"@dbos-inc/dbos-email-ses"})," package."]}),"\n",(0,i.jsx)(s.p,{children:"Wrapping the AWS SESv2 library call with a step is quite simple to do, and ensures that the email is sent once."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  @DBOS.step()\n  static async sendStatusEmail(subject: string, body: string) {\n    if (!globalThis.reportSes) return;\n    await globalThis.reportSes.sendEmail({\n      FromEmailAddress: process.env['REPORT_EMAIL_FROM_ADDRESS']!,\n      Destination: { ToAddresses: [process.env['REPORT_EMAIL_TO_ADDRESS']!] },\n      Content: {\n        Simple: {\n          Subject: { Data: subject },\n          Body: {\n            Text: { Data: body, Charset: 'utf-8' },\n          },\n        },\n      },\n    });\n  }\n"})}),"\n",(0,i.jsx)(s.h3,{id:"websockets",children:"WebSockets"}),"\n",(0,i.jsx)(s.p,{children:"Another thing that is not generally possible in Next.js is real-time updates to the client.  In DBOS Task Scheduler, the client calendar should be updated when new task results arrive, or if another user alters the calendar.  While this can be achieved with polling, we can use WebSockets in DBOS."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  static notifyListeners(type: string) {\n    const gss = globalThis.webSocketClients;\n    DBOS.logger.debug(`WebSockets: Sending update '${type}' to ${gss?.size} clients`);\n    gss?.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify({type}));\n      }\n    });\n  }\n"})}),"\n",(0,i.jsx)(s.h3,{id:"database-notifications",children:"Database Notifications"}),"\n",(0,i.jsx)(s.p,{children:"While WebSockets can be used to deliver notifications from DBOS to the client, a challenge arises if the database update was running on another virtual machine in the application group.  To detect this, we can watch for changes in the underlying database table, and use those updates to broadcast notifications to the WebSockets."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  @trig.trigger({tableName: 'schedule', useDBNotifications: true, installDBTrigger: true})\n  static async scheduleListener(_operation: TriggerOperation, _key: string[], _record: unknown) {\n    SchedulerOps.notifyListeners('schedule');\n    return Promise.resolve();\n  }\n"})}),"\n",(0,i.jsx)(s.h3,{id:"nextjs-custom-server",children:"Next.js Custom Server"}),"\n",(0,i.jsxs)(s.p,{children:['While many Next.js applications are "serverless", several of the features in DBOS Task Scheduler require a "custom server".  This file, located in ',(0,i.jsx)(s.code,{children:"src/server.ts"}),", handles the following:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Sets up all DBOS application code so that it is all available before serving requests."}),"\n",(0,i.jsx)(s.li,{children:"Launches DBOS, which starts any necessary workflow recovery."}),"\n",(0,i.jsx)(s.li,{children:"Creates an HTTP server with the WebSockets extension."}),"\n",(0,i.jsxs)(s.li,{children:["Directs any requests starting with ",(0,i.jsx)(s.code,{children:"/dbos"})," to DBOS handler logic, allowing DBOS routing to function alongside Next.js"]}),"\n",(0,i.jsx)(s.li,{children:"Sets up WebSockets so that the web client hears about new events and results quickly, without polling"}),"\n"]}),"\n",(0,i.jsxs)(s.h4,{id:"the-importance-of-globalthis",children:["The Importance of ",(0,i.jsx)(s.code,{children:"globalThis"})]}),"\n",(0,i.jsxs)(s.p,{children:['Next.js creates multiple "bundles" that contain minimized code for handling each request type.  These bundles have their own copies of what would otherwise be "global" variables.  If you intend to share data across bundles and with the DBOS logic in ',(0,i.jsx)(s.code,{children:"server.ts"}),", you should use ",(0,i.jsx)(s.code,{children:"globalThis"})," or a similar construct."]}),"\n",(0,i.jsx)(s.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,i.jsx)(s.p,{children:"DBOS Task Scheduler relies on a significant number of configuration files.  While most of these are standard, the following have sections that are specific to this app:"}),"\n",(0,i.jsx)(s.h3,{id:"dbos-configyaml",children:(0,i.jsx)(s.code,{children:"dbos-config.yaml"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.dbos.dev/typescript/reference/configuration",children:(0,i.jsx)(s.code,{children:"dbos-config.yaml"})})," provides the start command and migrations so that the app runs in DBOS Cloud."]}),"\n",(0,i.jsx)(s.h3,{id:"knexfilets",children:(0,i.jsx)(s.code,{children:"knexfile.ts"})}),"\n",(0,i.jsxs)(s.p,{children:["This file is used by ",(0,i.jsx)(s.code,{children:"knex"})," to establish a database connection for running migrations, and uses the DBOS_DATABASE_URL environment variable so the the app will run in DBOS Cloud."]}),"\n",(0,i.jsx)(s.h3,{id:"nextconfigts",children:(0,i.jsx)(s.code,{children:"next.config.ts"})}),"\n",(0,i.jsxs)(s.p,{children:["It is important keep the DBOS library, and any workflow functions or other code used by DBOS, external to Next.js bundles.\nThis prevents incomplete, duplicate, and incorrect registration of functions.  For this project, we import all DBOS logic with the prefix ",(0,i.jsx)(s.code,{children:"@dbos/"}),", and ask the bundler to treat such files as external:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:'  webpack: (config, { isServer, dev: _dev }) => {\n    if (isServer) {\n      config.externals = [\n        ...config.externals,\n        {\n          // highlight-next-line\n          "@dbos-inc/dbos-sdk": "commonjs @dbos-inc/dbos-sdk",    // Treat @dbos-inc/dbos-sdk as external\n        },\n        // highlight-next-line\n        /^@dbos\\/.+$/, // Treat ALL `@dbos/*` imports (from src/dbos) as external\n      ];\n    }\n\n    return config;\n  },\n'})}),"\n",(0,i.jsx)(s.p,{children:"To allow server actions to work in DBOS Cloud, the following was added:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  experimental: {\n    serverActions: {\n      allowedOrigins: ['*.cloud.dbos.dev'], // Allow DBOS Cloud to call server actions\n    },\n  },\n"})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7536:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/dbos-task-scheduler-main-24cb510f61701f15352f92217c7b697d.png"},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(6540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);