"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7676],{9113:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=o(4848),r=o(8453);const s={sidebar_position:5,title:"Workflow Handles",description:"API reference for DBOS workflow handles"},l=void 0,i={id:"python/reference/workflow_handles",title:"Workflow Handles",description:"API reference for DBOS workflow handles",source:"@site/docs/python/reference/workflow_handles.md",sourceDirName:"python/reference",slug:"/python/reference/workflow_handles",permalink:"/python/reference/workflow_handles",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Workflow Handles",description:"API reference for DBOS workflow handles"},sidebar:"tutorialSidebar",previous:{title:"Queues",permalink:"/python/reference/task_queues"},next:{title:"DBOS CLI",permalink:"/python/reference/cli"}},a={},c=[{value:"Methods",id:"methods",level:2},{value:"get_workflow_id",id:"get_workflow_id",level:3},{value:"get_result",id:"get_result",level:3},{value:"get_status",id:"get_status",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["A workflow handle represents the state of a particular active or completed workflow execution.\nYou obtain a workflow handle when using ",(0,n.jsx)(t.code,{children:"DBOS.start_workflow"})," to start a workflow in the background.\nIf you know a workflow's identity, you can also retrieve its handle using ",(0,n.jsx)(t.code,{children:"DBOS.retrieve_workflow"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"get_workflow_id",children:"get_workflow_id"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"handle.get_workflow_id() -> str\n"})}),"\n",(0,n.jsx)(t.p,{children:"Retrieve the identity of the workflow."}),"\n",(0,n.jsx)(t.h3,{id:"get_result",children:"get_result"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"handle.get_result() -> R\n"})}),"\n",(0,n.jsx)(t.p,{children:"Wait for the workflow to complete, then return its result."}),"\n",(0,n.jsx)(t.h3,{id:"get_status",children:"get_status"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"handle.get_status() -> WorkflowStatus\n"})}),"\n",(0,n.jsx)(t.p,{children:"Retrieve the workflow's status. This is the following object:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"class WorkflowStatus:\n    workflow_id: str # The workflow's ID\n    status: str # The workflow's current state. One of PENDING, SUCCESS, ERROR, RETRIES_EXCEEDED, or CANCELLED\n    name: str # The fully qualified name of the workflow function\n    class_name: Optional[str] # If the workflow function is a class method, the name of the class\n    config_name: Optional[str] # If the workflow function is a method of a configured class, the name of the class configuration\n    authenticated_user: Optional[str] # The authenticated user running the workflow\n    assumed_role: Optional[str] # The role with which the workflow is run\n    authenticatedRoles: Optional[List[str]] # All roles which the authenticated user could assume\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>l,x:()=>i});var n=o(6540);const r={},s=n.createContext(r);function l(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);