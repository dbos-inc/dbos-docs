"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6287],{688:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=n(4848),s=n(8453);const r={sidebar_position:1,title:"Learn DBOS Python",pagination_next:"python/tutorials/workflow-tutorial",pagination_prev:"quickstart"},i=void 0,a={id:"python/programming-guide",title:"Learn DBOS Python",description:"This tutorial shows you how to build a simple Python app with DBOS.",source:"@site/docs/python/programming-guide.md",sourceDirName:"python",slug:"/python/programming-guide",permalink:"/python/programming-guide",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Learn DBOS Python",pagination_next:"python/tutorials/workflow-tutorial",pagination_prev:"quickstart"},sidebar:"tutorialSidebar",previous:{title:"DBOS Quickstart",permalink:"/quickstart"},next:{title:"Workflows",permalink:"/python/tutorials/workflow-tutorial"}},l={},d=[{value:"1. Scaffolding",id:"1-scaffolding",level:2},{value:"2. Creating Database Tables",id:"2-creating-database-tables",level:2},{value:"3. Writing to the Database",id:"3-writing-to-the-database",level:2},{value:"3.1. Reading from the Database",id:"31-reading-from-the-database",level:3},{value:"4. Interacting with External Services",id:"4-interacting-with-external-services",level:2},{value:"4.1. Create a Guestbook Key",id:"41-create-a-guestbook-key",level:3},{value:"4.2. Sign the Guestbook from the App",id:"42-sign-the-guestbook-from-the-app",level:3},{value:"5. Durable Execution with Workflows",id:"5-durable-execution-with-workflows",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["This tutorial shows you how to build a simple Python app with DBOS.\nIt highlights how DBOS ",(0,o.jsx)(t.strong,{children:"durable execution"})," makes your apps resilient to any failures.\nOur app will record events to two different systems: Postgres and a third-party API.\nThanks to durable execution, it always writes to both systems consistently, even if interrupted or restarted at any point."]}),"\n",(0,o.jsxs)(t.p,{children:["This guide assumes you have a Postgres database running locally.\nIf not, see the ",(0,o.jsx)(t.a,{href:"/quickstart",children:"quickstart"})," for instructions on how to set it up."]}),"\n",(0,o.jsx)(t.h2,{id:"1-scaffolding",children:"1. Scaffolding"}),"\n",(0,o.jsx)(t.p,{children:"First, let's intialize a new DBOS application.\nIn a clean directory, run:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"python3 -m venv .venv\nsource .venv/bin/activate\npip install dbos\ndbos init\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Then use ",(0,o.jsx)(t.a,{href:"https://github.com/fastapi/fastapi",children:"FastAPI"})," to write a simple HTTP endpoint to greet friends.\nIn your app folder, change the file ",(0,o.jsx)(t.code,{children:"main.py"})," to contain only the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'from dbos import DBOS\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()\nDBOS(fastapi=app)\n\n@app.get("/greeting/{name}")\ndef greet(name: str) -> str:\n    return f"Thank you for being awesome, {name}!"\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Start your application with ",(0,o.jsx)(t.code,{children:"dbos start"}),". You should see output similar to:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"INFO:     Started server process [191280]\nINFO:     Waiting for application startup.\n14:21:20 [    INFO] (dbos:dbos.py:317) DBOS launched\nINFO:     Application startup complete.\n14:21:20 [    INFO] (dbos:system_database.py:657) Listening to notifications\nINFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["To see that your application is working, visit this URL in your browser: ",(0,o.jsx)(t.a,{href:"http://localhost:8000/greeting/Mike",children:"http://localhost:8000/greeting/Mike"}),". You should see the message ",(0,o.jsx)(t.code,{children:"Thank you for being awesome, Mike!"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"2-creating-database-tables",children:"2. Creating Database Tables"}),"\n",(0,o.jsxs)(t.p,{children:["Now, let's make a database table to record greetings.\nWe strongly recommend managing database tables using ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Schema_migration",children:"schema migrations"}),".\nDBOS supports any Python database migration tool, but in this tutorial we'll use ",(0,o.jsx)(t.a,{href:"https://alembic.sqlalchemy.org/en/latest/",children:"Alembic"}),".\nFirst, let's define our new table.\nChange the file ",(0,o.jsx)(t.code,{children:"schema.py"})," to contain only the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'from sqlalchemy import Column, Integer, MetaData, Table, Text\n\nmetadata = MetaData()\n\ngreetings = Table(\n    "greetings",\n    metadata,\n    Column("id", Integer, primary_key=True, autoincrement=True),\n    Column("name", Text),\n    Column("note", Text),\n)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Then, let's ",(0,o.jsx)(t.a,{href:"https://alembic.sqlalchemy.org/en/latest/autogenerate.html",children:"autogenerate"})," a migration from our schema file.\nRun the following commands:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'dbos migrate\nalembic revision --autogenerate -m "greeting_guestbook"\n'})}),"\n",(0,o.jsxs)(t.p,{children:["This creates a new migration file that instructs the database to create the ",(0,o.jsx)(t.code,{children:"greetings"})," table.\nRun it like so:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"dbos migrate\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This command should print ",(0,o.jsx)(t.code,{children:"Completed schema migration..."})]}),"\n",(0,o.jsx)(t.h2,{id:"3-writing-to-the-database",children:"3. Writing to the Database"}),"\n",(0,o.jsxs)(t.p,{children:["Now that we have ",(0,o.jsx)(t.code,{children:"greetings"})," table, let's change our app to write to it. Change your ",(0,o.jsx)(t.code,{children:"main.py"})," to contain:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'from dbos import DBOS\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\nfrom schema import greetings\n\napp = FastAPI()\nDBOS(fastapi=app)\n\n@DBOS.transaction()\ndef insert_greeting(name: str, note: str):\n    DBOS.sql_session.execute(greetings.insert().values(name=name, note=note))\n    DBOS.logger.info(f">>> Greeting to {name} recorded in the database!")\n\n@app.get("/greeting/{name}")\ndef greet(name: str) -> str:\n    note = f"Thank you for being awesome, {name}!"\n    insert_greeting(name, note)\n    return note\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Here, we add a new ",(0,o.jsx)(t.code,{children:"insert_greeting"})," function that records your greeting in the database using ",(0,o.jsx)(t.a,{href:"https://docs.sqlalchemy.org/en/20/core/",children:"SQLAlchemy"}),".\nWe annotate it with ",(0,o.jsx)(t.a,{href:"/python/tutorials/transaction-tutorial",children:(0,o.jsx)(t.code,{children:"@DBOS.transaction"})})," to tell DBOS this function modifies the database.\nThese annotations are critical for durable execution, which we'll see later."]}),"\n",(0,o.jsxs)(t.p,{children:["Stop your app with CTRL+C then restart it with ",(0,o.jsx)(t.code,{children:"dbos start"}),". Make a few visits to the greeting URL in your browser (",(0,o.jsx)(t.a,{href:"http://localhost:8000/greeting/Mike",children:"http://localhost:8000/greeting/Mike"}),"). With every new visit, the app should print this to the console:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"14:41:13 [    INFO] (dbos:main.py:22) >>> Greeting to Mike recorded in the database!\n"})}),"\n",(0,o.jsx)(t.h3,{id:"31-reading-from-the-database",children:"3.1. Reading from the Database"}),"\n",(0,o.jsx)(t.p,{children:"You can add another FastAPI endpoint to read all the greetings from the database like so:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'@app.get("/greetings")\n@DBOS.transaction()\ndef get_greetings():\n    rows = DBOS.sql_session.execute(greetings.select())\n    return [dict(row) for row in rows.mappings()]\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Try accessing it at ",(0,o.jsx)(t.a,{href:"http://localhost:8000/greetings",children:"http://localhost:8000/greetings"})," to see all the greetings you've recorded in the database."]}),"\n",(0,o.jsx)(t.h2,{id:"4-interacting-with-external-services",children:"4. Interacting with External Services"}),"\n",(0,o.jsx)(t.p,{children:"Now suppose we also want to send our greetings to a remote system. In this example, we'll use a demo DBOS Guestbook app. It lets us generate an API key and use it to record greetings in an online guestbook."}),"\n",(0,o.jsx)(t.h3,{id:"41-create-a-guestbook-key",children:"4.1. Create a Guestbook Key"}),"\n",(0,o.jsxs)(t.p,{children:["To generate a guestbook API key, visit ",(0,o.jsx)(t.a,{href:"https://demo-guestbook.cloud.dbos.dev/key",children:"https://demo-guestbook.cloud.dbos.dev/key"}),". It should output a 36-character sequence like ",(0,o.jsx)(t.code,{children:"12345abc-1234-5678-1234-567890abcdef"})," (yours will be different)."]}),"\n",(0,o.jsxs)(t.p,{children:["You can pass this key to your app as an environment variable. In your app folder, edit the file ",(0,o.jsx)(t.code,{children:"dbos-config.yaml"}),". Add a new ",(0,o.jsx)(t.code,{children:"env:"})," section at the bottom with the variable ",(0,o.jsx)(t.code,{children:"GUESTBOOK_KEY"})," set to your key in quotes:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"env:\n  GUESTBOOK_KEY: 'your-key-value-here'\n"})}),"\n",(0,o.jsxs)(t.p,{children:["For example, if your key is ",(0,o.jsx)(t.code,{children:"12345abc-1234-5678-1234-567890abcdef"})," then you should add:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"env:\n  GUESTBOOK_KEY: '12345abc-1234-5678-1234-567890abcdef'\n"})}),"\n",(0,o.jsx)(t.h3,{id:"42-sign-the-guestbook-from-the-app",children:"4.2. Sign the Guestbook from the App"}),"\n",(0,o.jsxs)(t.p,{children:["Let's update our app to record each greeting in the guestbook.\nChange your ",(0,o.jsx)(t.code,{children:"main.py"})," to contain the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import json\nimport os\n\nimport requests\nfrom dbos import DBOS\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\nfrom schema import greetings\n\napp = FastAPI()\nDBOS(fastapi=app)\n\n# Omitted for brevity: def get_greetings()\n  \n@DBOS.step()\ndef sign_guestbook(name: str):\n    key = os.environ.get("GUESTBOOK_KEY", None)\n    if key is None or len(key) != 36:\n        raise Exception("Please set the guestbook key in dbos-config.yaml")\n\n    url = "https://demo-guestbook.cloud.dbos.dev/record_greeting"\n    headers = {"Content-Type": "application/json"}\n    payload = {"key": key, "name": name}\n\n    response = requests.post(url, headers=headers, json=payload)\n    response_str = json.dumps(response.json())\n    if not response.ok:\n        raise Exception(f"Error signing guestbook: {response_str}")\n\n    DBOS.logger.info(f">>> STEP 1: Signed the Guestbook: {response_str}")\n\n\n@DBOS.transaction()\ndef insert_greeting(name: str, note: str):\n    DBOS.sql_session.execute(greetings.insert().values(name=name, note=note))\n    DBOS.logger.info(f">>> STEP 2: Greeting to {name} recorded in the database!")\n\n\n@app.get("/greeting/{name}")\ndef greet(name: str) -> str:\n    note = f"Thank you for being awesome, {name}!"\n    sign_guestbook(name)\n    insert_greeting(name, note)\n    return note\n'})}),"\n",(0,o.jsxs)(t.p,{children:["We add a new function called ",(0,o.jsx)(t.code,{children:"sign_guestbook"})," that sends an HTTP POST request to the guestbook to record a greeting.\nNote the ",(0,o.jsx)(t.a,{href:"/python/tutorials/step-tutorial",children:(0,o.jsx)(t.code,{children:"@DBOS.step"})})," annotation\u2014we'll come back to it later, as it's critical for durable execution."]}),"\n",(0,o.jsxs)(t.p,{children:["Stop your app with CTRL+C then restart it with ",(0,o.jsx)(t.code,{children:"dbos start"}),". Make a few visits to the greeting URL in your browser (",(0,o.jsx)(t.a,{href:"http://localhost:8000/greeting/Mike",children:"http://localhost:8000/greeting/Mike"}),"). With every new visit, the app should now print first that it has recorded your greeting in the guestbook, then that it has recorded your greeting in the database."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'14:54:13 [    INFO] (dbos:main.py:39) >>> STEP 1: Signed the Guestbook: {"ip_address": "...", "greeted_name": "Mike", "greeted_ts": "2024-08-29T21:54:13.832Z"}\n14:54:13 [    INFO] (dbos:main.py:47) >>> STEP 2: Greeting to Mike recorded in the database!\n'})}),"\n",(0,o.jsxs)(t.p,{children:["You can visit the URL ",(0,o.jsx)(t.code,{children:"https://demo-guestbook.cloud.dbos.dev/greetings/your-key-value"})," to see all the Guestbook greetings made with your key. Old greetings and keys are removed after a few days."]}),"\n",(0,o.jsx)(t.h2,{id:"5-durable-execution-with-workflows",children:"5. Durable Execution with Workflows"}),"\n",(0,o.jsxs)(t.p,{children:["Next, we want to ",(0,o.jsx)(t.strong,{children:"durably execute"})," our application: guarantee that it inserts exactly one database record per guestbook signature, even if interrupted or restarted.\nDBOS makes this easy with ",(0,o.jsx)(t.a,{href:"/python/tutorials/workflow-tutorial",children:"workflows"}),".\nTo add one, change your ",(0,o.jsx)(t.code,{children:"main.py"})," like so:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import json\nimport os\n\nimport requests\nfrom dbos import DBOS\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\nfrom schema import greetings\n\napp = FastAPI()\nDBOS(fastapi=app)\n\n# Omitted for brevity: def get_greetings()\n\n@DBOS.step()\ndef sign_guestbook(name: str):\n    key = os.environ.get("GUESTBOOK_KEY", None)\n    if key is None or len(key) != 36:\n        raise Exception("Please set the guestbook key in dbos-config.yaml")\n\n    url = "https://demo-guestbook.cloud.dbos.dev/record_greeting"\n    headers = {"Content-Type": "application/json"}\n    payload = {"key": key, "name": name}\n\n    response = requests.post(url, headers=headers, json=payload)\n    response_str = json.dumps(response.json())\n    if not response.ok:\n        raise Exception(f"Error signing guestbook: {response_str}")\n\n    DBOS.logger.info(f">>> STEP 1: Signed the Guestbook: {response_str}")\n\n\n@DBOS.transaction()\ndef insert_greeting(name: str, note: str):\n    DBOS.sql_session.execute(greetings.insert().values(name=name, note=note))\n    DBOS.logger.info(f">>> STEP 2: Greeting to {name} recorded in the database!")\n\n\n@DBOS.workflow()\ndef greeting_workflow(name: str, note: str):\n    sign_guestbook(name)\n    for _ in range(5):\n        DBOS.logger.info("Press Control + C to stop the app...")\n        DBOS.sleep(1)\n    insert_greeting(name, note)\n\n\n@app.get("/greeting/{name}")\ndef greet(name: str) -> str:\n    note = f"Thank you for being awesome, {name}!"\n    DBOS.start_workflow(greeting_workflow, name, note)\n    return note\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Here, we add a new function called ",(0,o.jsx)(t.code,{children:"greeting_workflow"})," that calls two ",(0,o.jsx)(t.strong,{children:"steps"}),": ",(0,o.jsx)(t.code,{children:"sign_guestbook"})," and ",(0,o.jsx)(t.code,{children:"insert_greeting"}),".\nWe annotate it with ",(0,o.jsx)(t.code,{children:"@DBOS.workflow()"})," to tell DBOS to execute it durably.\nWe introduce a sleep allowing you to interrupt the program midway through the workflow.\nWe then change ",(0,o.jsx)(t.code,{children:"greet"})," to start this workflow."]}),"\n",(0,o.jsxs)(t.p,{children:["The next step is time-sensitive; you may want to read it over before running. Stop your app with CTRL+C and restart it with ",(0,o.jsx)(t.code,{children:"dbos start"}),".\nThen, visit ",(0,o.jsx)(t.a,{href:"http://localhost:8000/greeting/Mike",children:"http://localhost:8000/greeting/Mike"})," in your browser to send a request to your application. In your terminal, you should see an output like:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:'INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\nINFO:     127.0.0.1:35398 - "GET /greeting/Mike HTTP/1.1" 200 OK\n14:57:53 [    INFO] (dbos:main.py:39) >>> STEP 1: Signed the Guestbook: {"ip_address": "...", "greeted_name": "Mike", "greeted_ts": "2024-08-29T21:57:54.118Z"}\n14:57:53 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:57:54 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:57:55 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:57:56 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Now press CTRL+C stop your app. Then, run ",(0,o.jsx)(t.code,{children:"dbos start"})," to restart it. You should see an output like:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\n14:58:38 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:58:38 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:58:38 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:58:38 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:58:39 [    INFO] (dbos:main.py:54) Press Control + C to stop the app...\n14:58:40 [    INFO] (dbos:main.py:47) >>> STEP 2: Greeting to Mike recorded in the database!\n"})}),"\n",(0,o.jsxs)(t.p,{children:["If your app did not use ",(0,o.jsx)(t.code,{children:"DBOS.workflow()"}),' you would expect it to restart with a "clean slate" and completely forget about your interrupted workflow. However, DBOS automatically resumes your workflow from where it left off and correctly completes it by recording the greeting to the database ',(0,o.jsx)(t.strong,{children:"without"})," re-signing the guestbook."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["Our example uses ",(0,o.jsx)(t.code,{children:"DBOS.start_workflow"})," to start the workflow in the background.\nThis behavior is useful when the caller expects a fast response.\nTo make it synchronous, call the workflow function directly instead of using ",(0,o.jsx)(t.code,{children:"start_workflow"}),"."]})}),"\n",(0,o.jsxs)(t.p,{children:["The code for this guide is available ",(0,o.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/greeting-guestbook",children:"on GitHub"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Next, to learn how to build more complex applications, check out our Python tutorials and ",(0,o.jsx)(t.a,{href:"/examples/",children:"example apps"}),"."]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);