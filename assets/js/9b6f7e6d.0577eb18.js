"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3792],{6189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"java/reference/methods","title":"DBOS Methods & Variables","description":"DBOS Methods","source":"@site/docs/java/reference/methods.md","sourceDirName":"java/reference","slug":"/java/reference/methods","permalink":"/java/reference/methods","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30,"title":"DBOS Methods & Variables","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Workflows & Steps","permalink":"/java/reference/workflows-steps"},"next":{"title":"Queues","permalink":"/java/reference/queues"}}');var s=n(4848),r=n(8453);const o={sidebar_position:30,title:"DBOS Methods & Variables",toc_max_heading_level:3},l=void 0,a={},d=[{value:"DBOS Methods",id:"dbos-methods",level:2},{value:"getEvent",id:"getevent",level:3},{value:"setEvent",id:"setevent",level:3},{value:"send",id:"send",level:3},{value:"recv",id:"recv",level:3},{value:"sleep",id:"sleep",level:3},{value:"retrieveWorkflow",id:"retrieveworkflow",level:3},{value:"Workflow Management Methods",id:"workflow-management-methods",level:2},{value:"listWorkflows",id:"listworkflows",level:3},{value:"ListWorkflowsInput",id:"listworkflowsinput",level:4},{value:"withWorkflowId",id:"withworkflowid",level:5},{value:"withWorkflowIds",id:"withworkflowids",level:5},{value:"withClassName",id:"withclassname",level:5},{value:"withInstanceName",id:"withinstancename",level:5},{value:"withWorkflowName",id:"withworkflowname",level:5},{value:"withAuthenticatedUser",id:"withauthenticateduser",level:5},{value:"withStartTime",id:"withstarttime",level:5},{value:"withEndTime",id:"withendtime",level:5},{value:"withStatus",id:"withstatus",level:5},{value:"withApplicationVersion",id:"withapplicationversion",level:5},{value:"withLimit",id:"withlimit",level:5},{value:"withOffset",id:"withoffset",level:5},{value:"withSortDesc",id:"withsortdesc",level:5},{value:"withExecutorId",id:"withexecutorid",level:5},{value:"withQueueName",id:"withqueuename",level:5},{value:"withWorkflowIdPrefix",id:"withworkflowidprefix",level:5},{value:"withQueuesOnly",id:"withqueuesonly",level:5},{value:"withLoadInput",id:"withloadinput",level:5},{value:"withLoadOutput",id:"withloadoutput",level:5},{value:"listWorkflowSteps",id:"listworkflowsteps",level:3},{value:"cancelWorkflow",id:"cancelworkflow",level:3},{value:"resumeWorkflow",id:"resumeworkflow",level:3},{value:"forkWorkflow",id:"forkworkflow",level:3},{value:"WorkflowStatus",id:"workflowstatus",level:3},{value:"DBOS Variables",id:"dbos-variables",level:2},{value:"workflowId",id:"workflowid",level:3},{value:"stepId",id:"stepid",level:3},{value:"inWorkflow",id:"inworkflow",level:3},{value:"inStep",id:"instep",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"dbos-methods",children:"DBOS Methods"}),"\n",(0,s.jsx)(t.h3,{id:"getevent",children:"getEvent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static Object getEvent(String workflowId, String key, Duration timeout)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Retrieve the latest value of an event published by the workflow identified by ",(0,s.jsx)(t.code,{children:"workflowId"})," to the key ",(0,s.jsx)(t.code,{children:"key"}),".\nIf the event does not yet exist, wait for it to be published, an error if the wait times out."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"workflowId"}),": The identifier of the workflow whose events to retrieve."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"key"}),": The key of the event to retrieve."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"timeout"}),": A timeout duration. If the wait times out, ",(0,s.jsx)(t.code,{children:"null"})," is returned."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"setevent",children:"setEvent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static void setEvent(String key, Object value)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Create and associate with this workflow an event with key ",(0,s.jsx)(t.code,{children:"key"})," and value ",(0,s.jsx)(t.code,{children:"value"}),".\nIf the event already exists, update its value.\n",(0,s.jsx)(t.code,{children:"setEvent"})," can only be called from within a workflow."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"key"}),": The key of the event."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"value"}),": The value of the event. Must be serializable."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"send",children:"send"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static void send(String destinationId, Object message, String topic, String idempotencyKey)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Send a message to the workflow identified by ",(0,s.jsx)(t.code,{children:"destinationID"}),".\nMessages can optionally be associated with a topic."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"destinationId"}),": The workflow to which to send the message."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"message"}),": The message to send. Must be serializable."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"topic"}),": A topic with which to associate the message. Messages are enqueued per-topic on the receiver."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"idempotencyKey"}),": If ",(0,s.jsx)(t.code,{children:"DBOS.send"})," is called from outside a workflow and an idempotency key is set, the message will only be sent once no matter how many times ",(0,s.jsx)(t.code,{children:"DBOS.send"})," is called with this key."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"recv",children:"recv"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static Object recv(String topic, Duration timeout)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Receive and return a message sent to this workflow.\nCan only be called from within a workflow.\nMessages are dequeued first-in, first-out from a queue associated with the topic.\nCalls to ",(0,s.jsx)(t.code,{children:"recv"})," wait for the next message in the queue, returning null if the wait times out."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"topic"}),": A topic queue on which to wait."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"timeout"}),": A timeout duration. If the wait times out, return null."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"sleep",children:"sleep"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static void sleep(Duration sleepduration)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sleep for the given duration.\nIf called from within a workflow, this sleep is durable\u2014it records its intended wake-up time in the database so if it is interrupted and recovers, it still wakes up at the intended time.\nIf called from outside a workflow, or from within a step, it behaves like a regular sleep."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"sleepduration"}),": The duration to sleep."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"retrieveworkflow",children:"retrieveWorkflow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"static WorkflowHandle<T, E> retrieveWorkflow(String workflowId)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Retrieve the ",(0,s.jsx)(t.a,{href:"/java/reference/workflows-steps#workflowhandle",children:"handle"})," of a workflow."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parameters"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"workflowId"}),": The ID of the workflow whose handle to retrieve."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"workflow-management-methods",children:"Workflow Management Methods"}),"\n",(0,s.jsx)(t.h3,{id:"listworkflows",children:"listWorkflows"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static List<WorkflowStatus> listWorkflows(ListWorkflowsInput input)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Retrieve a list of ",(0,s.jsx)(t.a,{href:"#workflowstatus",children:(0,s.jsx)(t.code,{children:"WorkflowStatus"})})," of all workflows matching specified criteria."]}),"\n",(0,s.jsx)(t.h4,{id:"listworkflowsinput",children:"ListWorkflowsInput"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ListWorkflowsInput"})," is a with-based configuration record for filtering and customizing workflow queries.  All fields are optional."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"with"})," Methods:"]})}),"\n",(0,s.jsx)(t.h5,{id:"withworkflowid",children:"withWorkflowId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withWorkflowId(String workflowId)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Add a workflow ID to filter by."}),"\n",(0,s.jsx)(t.h5,{id:"withworkflowids",children:"withWorkflowIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withWorkflowIds(List<String> workflowIDs)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Add multiple workflow IDs to filter by."}),"\n",(0,s.jsx)(t.h5,{id:"withclassname",children:"withClassName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withClassName(String className)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Filter workflows by the class name containing the workflow function."}),"\n",(0,s.jsx)(t.h5,{id:"withinstancename",children:"withInstanceName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withInstanceName(String instanceName)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Filter workflows by the instance name of the class."}),"\n",(0,s.jsx)(t.h5,{id:"withworkflowname",children:"withWorkflowName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withWorkflowName(String workflowName)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Filter workflows by the workflow function name."}),"\n",(0,s.jsx)(t.h5,{id:"withauthenticateduser",children:"withAuthenticatedUser"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withAuthenticatedUser(String authenticatedUser)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Filter workflows run by this authenticated user."}),"\n",(0,s.jsx)(t.h5,{id:"withstarttime",children:"withStartTime"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withStartTime(OffsetDateTime startTime)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieve workflows started after this timestamp."}),"\n",(0,s.jsx)(t.h5,{id:"withendtime",children:"withEndTime"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withEndTime(OffsetDateTime endTime)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieve workflows started before this timestamp."}),"\n",(0,s.jsx)(t.h5,{id:"withstatus",children:"withStatus"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withStatus(WorkflowState status)\nListWorkflowsInput withStatus(String status)\nListWorkflowsInput withStatuses(List<String> status)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Filter workflows by status. Status must be one of: ",(0,s.jsx)(t.code,{children:"ENQUEUED"}),", ",(0,s.jsx)(t.code,{children:"PENDING"}),", ",(0,s.jsx)(t.code,{children:"SUCCESS"}),", ",(0,s.jsx)(t.code,{children:"ERROR"}),", ",(0,s.jsx)(t.code,{children:"CANCELLED"}),", or ",(0,s.jsx)(t.code,{children:"MAX_RECOVERY_ATTEMPTS_EXCEEDED"}),"."]}),"\n",(0,s.jsx)(t.h5,{id:"withapplicationversion",children:"withApplicationVersion"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withApplicationVersion(String applicationVersion)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieve workflows tagged with this application version."}),"\n",(0,s.jsx)(t.h5,{id:"withlimit",children:"withLimit"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withLimit(Integer limit)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieve up to this many workflows."}),"\n",(0,s.jsx)(t.h5,{id:"withoffset",children:"withOffset"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withOffset(Integer offset)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Skip this many workflows from the results returned (for pagination)."}),"\n",(0,s.jsx)(t.h5,{id:"withsortdesc",children:"withSortDesc"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withSortDesc(Boolean sortDesc)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sort the results in descending (true) or ascending (false) order by workflow start time."}),"\n",(0,s.jsx)(t.h5,{id:"withexecutorid",children:"withExecutorId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withExecutorId(String executorId)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieve workflows that ran on this executor process."}),"\n",(0,s.jsx)(t.h5,{id:"withqueuename",children:"withQueueName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withQueueName(String queueName)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieve workflows that were enqueued on this queue."}),"\n",(0,s.jsx)(t.h5,{id:"withworkflowidprefix",children:"withWorkflowIdPrefix"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withWorkflowIdPrefix(String workflowIdPrefix)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Filter workflows whose IDs start with the specified prefix."}),"\n",(0,s.jsx)(t.h5,{id:"withqueuesonly",children:"withQueuesOnly"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withQueuesOnly(Boolean queuedOnly)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Select only workflows that were enqueued."}),"\n",(0,s.jsx)(t.h5,{id:"withloadinput",children:"withLoadInput"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withLoadInput(Boolean value)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Controls whether to load workflow input data (default: true)."}),"\n",(0,s.jsx)(t.h5,{id:"withloadoutput",children:"withLoadOutput"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ListWorkflowsInput withLoadOutput(Boolean value)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Controls whether to load workflow output data (results and errors) (default: true)."}),"\n",(0,s.jsx)(t.h3,{id:"listworkflowsteps",children:"listWorkflowSteps"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static List<StepInfo> listWorkflowSteps(String workflowId)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Retrieve the execution steps of a workflow.\nThis is a list of ",(0,s.jsx)(t.code,{children:"StepInfo"})," objects, with the following structure:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"StepInfo(\n    // The sequential ID of the step within the workflow\n    int functionId,\n    // The name of the step function\n    String functionName,\n    // The output returned by the step, if any\n    Object output,\n    // The error returned by the step, if any\n    ErrorResult error,\n    // If the step starts or retrieves the result of a workflow, its ID\n    String childWorkflowId\n)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"cancelworkflow",children:"cancelWorkflow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static cancelWorkflow(String workflowId)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Cancel a workflow. This sets its status to ",(0,s.jsx)(t.code,{children:"CANCELLED"}),", removes it from its queue (if it is enqueued) and preempts its execution (interrupting it at the beginning of its next step)."]}),"\n",(0,s.jsx)(t.h3,{id:"resumeworkflow",children:"resumeWorkflow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static <T, E extends Exception> WorkflowHandle<T, E> resumeWorkflow(String workflowId)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Resume a workflow. This immediately starts it from its last completed step. You can use this to resume workflows that are cancelled or have exceeded their maximum recovery attempts. You can also use this to start an enqueued workflow immediately, bypassing its queue."}),"\n",(0,s.jsx)(t.h3,{id:"forkworkflow",children:"forkWorkflow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static <T, E extends Exception> WorkflowHandle<T, E> forkWorkflow(\n      String workflowId, \n      int startStep, \n      ForkOptions options\n)\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public record ForkOptions(\n    String forkedWorkflowId, \n    String applicationVersion, \n    Duration timeout\n)\n{\n    ForkOptions withForkedWorkflowId(String forkedWorkflowId);\n    ForkOptions withApplicationVersion(String applicationVersion);\n    ForkOptions withTimeout(Duration timeout);\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Start a new execution of a workflow from a specific step. The input step ID (",(0,s.jsx)(t.code,{children:"startStep"}),") must match the step number of the step returned by workflow introspection. The specified ",(0,s.jsx)(t.code,{children:"startStep"})," is the step from which the new workflow will start, so any steps whose ID is less than ",(0,s.jsx)(t.code,{children:"startStep"})," will not be re-executed."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"workflowId"}),": The ID of the workflow to fork"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"startStep"}),": The step from which to fork the workflow"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"options"}),":","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"forkedWorkflowId"}),": The workflow ID for the newly forked workflow (if not provided, generate a UUID)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"applicationVersion"}),": The application version for the forked workflow (inherited from the original if not provided)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"timeout"}),": A timeout for the forked workflow."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"workflowstatus",children:"WorkflowStatus"}),"\n",(0,s.jsxs)(t.p,{children:["Some workflow introspection and management methods return a ",(0,s.jsx)(t.code,{children:"WorkflowStatus"}),".\nThis object has the following definition:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public record WorkflowStatus(\n    // The workflow ID\n    String workflowId,\n    // The workflow status. Must be one of ENQUEUED, PENDING, SUCCESS, ERROR, CANCELLED, or MAX_RECOVERY_ATTEMPTS_EXCEEDED\n    String status,\n    // The name of the workflow function\n    String name,\n    // The class of the workflow function\n    String className,\n    // The name given to the class instance, if any\n    String instanceName,\n    // The deserialized workflow input object\n    Object[] input,\n    // The workflow's output, if any\n    Object output,\n    // The error the workflow threw, if any\n    ErrorResult error,\n    // Workflow start time, as a Unix epoch timestamp in ms\n    Long createdAt,\n    // The last time the workflow status was updated, as a Unix epoch timestamp in ms\n    Long updatedAt,\n    // If this workflow was enqueued, on which queue\n    String queueName,\n    // The ID of the executor (process) that most recently executed this workflow\n    String executorId,\n    // The application version on which this workflow was started\n    String appVersion,\n    // The workflow timeout, if any\n    Long workflowTimeoutMs,\n    // The Unix epoch timestamp at which this workflow will time out, if any\n    Long workflowDeadlineEpochMs,\n    // The number of times this workflow has been started\n    Integer recoveryAttempts\n)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"dbos-variables",children:"DBOS Variables"}),"\n",(0,s.jsx)(t.h3,{id:"workflowid",children:"workflowId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static String workflowId()\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Retrieve the ID of the current workflow. Returns ",(0,s.jsx)(t.code,{children:"null"})," if not called from a workflow or step."]}),"\n",(0,s.jsx)(t.h3,{id:"stepid",children:"stepId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static Integer stepId()\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Returns the unique ID of the current step within its workflow. Returns ",(0,s.jsx)(t.code,{children:"null"})," if not called from a step."]}),"\n",(0,s.jsx)(t.h3,{id:"inworkflow",children:"inWorkflow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static boolean inWorkflow();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Return ",(0,s.jsx)(t.code,{children:"true"})," if the current calling context is executing a workflow, or ",(0,s.jsx)(t.code,{children:"false"})," otherwise."]}),"\n",(0,s.jsx)(t.h3,{id:"instep",children:"inStep"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"static boolean inStep();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Return ",(0,s.jsx)(t.code,{children:"true"})," if the current calling context is executing a workflow step, or ",(0,s.jsx)(t.code,{children:"false"})," otherwise."]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);