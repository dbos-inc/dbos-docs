"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[8417],{6459:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(5893),o=n(1151);const s={sidebar_position:3,title:"Advanced Programming Tutorial"},r="Building a Reliable Checkout Workflow",a={id:"getting-started/quickstart-shop",title:"Advanced Programming Tutorial",description:"In this guide, we will follow-up on the reliable workflow concept from programming quickstart and write the checkout workflow of a shopping cart app.",source:"@site/docs/getting-started/quickstart-shop.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart-shop",permalink:"/getting-started/quickstart-shop",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Advanced Programming Tutorial"},sidebar:"tutorialSidebar",previous:{title:"Programming Quickstart",permalink:"/getting-started/quickstart-programming"},next:{title:"DBOS Cloud Quickstart",permalink:"/getting-started/quickstart-cloud"}},l={},c=[{value:"Resources",id:"resources",level:2},{value:"Overview",id:"overview",level:2},{value:"The request handler",id:"the-request-handler",level:2},{value:"Registering the handler",id:"registering-the-handler",level:3},{value:"Invoking the payment workflow",id:"invoking-the-payment-workflow",level:3},{value:"Waiting for a payment session ID",id:"waiting-for-a-payment-session-id",level:3},{value:"Full handler code",id:"full-handler-code",level:3},{value:"The payment workflow",id:"the-payment-workflow",level:2},{value:"Registering the workflow",id:"registering-the-workflow",level:3},{value:"Reserving inventory",id:"reserving-inventory",level:3},{value:"Initiating a payment session",id:"initiating-a-payment-session",level:3},{value:"Notifying the handler",id:"notifying-the-handler",level:3},{value:"Waiting for a payment",id:"waiting-for-a-payment",level:3},{value:"Handling payment outcomes",id:"handling-payment-outcomes",level:3},{value:"Full workflow code",id:"full-workflow-code",level:3},{value:"Building and running",id:"building-and-running",level:2},{value:"Using idempotency keys",id:"using-idempotency-keys",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"building-a-reliable-checkout-workflow",children:"Building a Reliable Checkout Workflow"}),"\n",(0,i.jsxs)(t.p,{children:["In this guide, we will follow-up on the reliable workflow concept from ",(0,i.jsx)(t.a,{href:"quickstart-programming",children:"programming quickstart"})," and write the checkout workflow of a shopping cart app.\nThe workflow will maintain three properties:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Never charge a customer without fulfilling an order."}),"\n",(0,i.jsx)(t.li,{children:"Never charge a customer twice for the same order."}),"\n",(0,i.jsx)(t.li,{children:"Reserve inventory for an order if and only if the order is fulfilled."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Without DBOS, maintaining these properties is hard.\nFor example, if the checkout service is interrupted after a customer pays, we have to fulfill their order.\nIf a customer clicks the buy button twice, we have to make sure they aren't charged twice.\nIf the payment doesn't go through, we have to return any reserved inventory.\nAs we'll show, DBOS makes it much easier to write programs that do these correctly."}),"\n",(0,i.jsx)(t.admonition,{title:"what you will learn",type:"info",children:(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Handle asynchronous interactions with third party services"}),"\n",(0,i.jsx)(t.li,{children:"Interact with running workflows"}),"\n",(0,i.jsx)(t.li,{children:"Use idempotency keys"}),"\n"]})}),"\n",(0,i.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(t.p,{children:["This guide comes a companion ",(0,i.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"repository"}),". Let's clone it:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps\ncd dbos-demo-apps/shop-guide\n"})}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["In this guide, we'll be implementing two functions: the checkout workflow and its request handler.\nThese interact with an external payment service modelled on ",(0,i.jsx)(t.a,{href:"https://stripe.com",children:"Stripe"}),".\nHere's a diagram of what the end-to-end checkout flow looks like:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:n(6028).Z+"",width:"1014",height:"440"})}),"\n",(0,i.jsx)(t.p,{children:"Upon receiving a request, the handler starts a payment workflow and waits for a payment session ID.\nIf it obtains a valid session ID, it responds to the user with links to submit or cancel the payment.\nAfter the user has paid, the workflow fulfills the user's order."}),"\n",(0,i.jsx)(t.h2,{id:"the-request-handler",children:"The request handler"}),"\n",(0,i.jsx)(t.p,{children:"We'll start by building the checkout request handler, which initiates checkout in response to user HTTP requests."}),"\n",(0,i.jsx)(t.h3,{id:"registering-the-handler",children:"Registering the handler"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"@PostApi('/checkout/:key?')\nstatic async webCheckout(ctxt: HandlerContext, @ArgOptional key: string): Promise<string> {\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The handler is implemented in this ",(0,i.jsx)(t.code,{children:"webCheckout"})," function which is served from HTTP POST requests to the URL ",(0,i.jsx)(t.code,{children:"<host>/checkout/:key?"}),".\nThe route accepts an optional path parameter ",(0,i.jsx)(t.code,{children:"key"}),", used as an ",(0,i.jsx)(t.a,{href:"../tutorials/idempotency-tutorial",children:"idempotency key"}),".\nWe specify the ",(0,i.jsx)(t.code,{children:"key"})," parameter is optional using the ",(0,i.jsx)(t.a,{href:"../api-reference/decorators#argoptional",children:"@ArgOptional"})," decorator."]}),"\n",(0,i.jsx)(t.h3,{id:"invoking-the-payment-workflow",children:"Invoking the payment workflow"}),"\n",(0,i.jsxs)(t.p,{children:["Once a request is received, the handler invokes ",(0,i.jsx)(t.code,{children:"paymentWorkflow"})," asynchronously, obtaining its ",(0,i.jsx)(t.a,{href:"../api-reference/workflow-handles",children:"workflow handle"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"// A workflow handle is immediately returned. The workflow continues in the background.\nconst handle = await ctxt.invoke(Shop, key).paymentWorkflow();`\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Note that we invoke the workflow using an ",(0,i.jsx)(t.a,{href:"/tutorials/idempotency-tutorial",children:"idempotency key"})," so we don't pay multiple times if the user clicks twice on the buy button."]}),"\n",(0,i.jsx)(t.h3,{id:"waiting-for-a-payment-session-id",children:"Waiting for a payment session ID"}),"\n",(0,i.jsxs)(t.p,{children:["The handler uses the DBOS ",(0,i.jsx)(t.a,{href:"../tutorials/workflow-communication-tutorial#events-api",children:"events API"})," to wait for the payment workflow to send it a payment session ID.\nWe will see in the next section how the payment workflow can notify the handler."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'// Block until the payment session is ready\nconst session_id = await ctxt.getEvent<string>(handle.getWorkflowUUID(), session_topic);\nif (session_id === null) {\n  ctxt.logger.error("workflow failed");\n  return;\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["If ",(0,i.jsx)(t.code,{children:"session_id"})," is invalid, the handler logs an error using its ",(0,i.jsx)(t.a,{href:"../api-reference/contexts#ctxtlogger",children:"context logger"}),".\nOtherwise, it respond the request with links to submit or cancel the payment."]}),"\n",(0,i.jsx)(t.h3,{id:"full-handler-code",children:"Full handler code"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'@PostApi(\'/checkout/:key?\')\nstatic async webCheckout(ctxt: HandlerContext, @ArgOptional key: string): Promise<string> {\n  // Handle will be returned immediately, and the workflow will continue in the background\n  const handle = await ctxt.invoke(Shop, key).paymentWorkflow();\n  ctxt.logger.info(`Checkout workflow started with UUID: ${handle.getWorkflowUUID()}`);\n\n  // This will block until the payment session is ready\n  const session_id = await ctxt.getEvent<string>(handle.getWorkflowUUID(), session_topic);\n  if (session_id === null) {\n    ctxt.logger.error("workflow failed");\n    return "";\n  }\n\n  return generatePaymentUrls(ctxt, handle.getWorkflowUUID(), session_id);\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"the-payment-workflow",children:"The payment workflow"}),"\n",(0,i.jsxs)(t.p,{children:["The payment workflow reserves inventory for an order, attempts to process its payment, and fufills it if the payment is successful.\nAs we'll show, it's ",(0,i.jsx)(t.em,{children:"reliable"}),": it always fulfills orders if payments succeed, never chages customers twice for the same order, and always undoes inventory modifications on failure."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Check out our ",(0,i.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/e-commerce",children:"e-commerce demo app"})," for a more elaborate example."]})}),"\n",(0,i.jsxs)(t.p,{children:["Let's build the payment workflow step by step. For the sake of brevity, we will be using pre-installed functions in ",(0,i.jsx)(t.code,{children:"src/utilities.ts"}),". Feel free to check them out!"]}),"\n",(0,i.jsx)(t.h3,{id:"registering-the-workflow",children:"Registering the workflow"}),"\n",(0,i.jsx)(t.p,{children:"Let's declare a simple workflow:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"@Workflow()\nstatic async paymentWorkflow(ctxt: WorkflowContext): Promise<void> {\n"})}),"\n",(0,i.jsx)(t.h3,{id:"reserving-inventory",children:"Reserving inventory"}),"\n",(0,i.jsxs)(t.p,{children:["The workflow first reserves an item from inventory using the ",(0,i.jsx)(t.code,{children:"subtractInventory"})," transaction.\nIf this fails (likely because the item is out of stock), the workflow signals the handlers using ",(0,i.jsx)(t.a,{href:"../tutorials/workflow-communication-tutorial#setevent",children:"setEvent"})," to tell it checkout cannot proceed."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'// Attempt to update the inventory. Signal the handler if it fails.\ntry {\n  await ctxt.invoke(ShopUtilities).subtractInventory();\n} catch (error) {\n  ctxt.logger.error("Failed to update inventory");\n  await ctxt.setEvent(session_topic, null);\n  return;\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"initiating-a-payment-session",children:"Initiating a payment session"}),"\n",(0,i.jsxs)(t.p,{children:["Next, the workflow initiates a payment session using the ",(0,i.jsx)(t.code,{children:"createPaymentSession"})," ",(0,i.jsx)(t.a,{href:"../tutorials/communicator-tutorial",children:"communicator"}),".\nIf this fails, it returns reserved items to the inventory using the ",(0,i.jsx)(t.code,{children:"undoSubtractInventory"})," transaction, signals the handler, and exits."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'// Attempt to start a payment session. If it fails, restore inventory state and signal the handler.\nconst paymentSession = await ctxt.invoke(ShopUtilities).createPaymentSession();\nif (!paymentSession.url) {\n  ctxt.logger.error("Failed to create payment session");\n  await ctxt.invoke(ShopUtilities).undoSubtractInventory();\n  await ctxt.setEvent(session_topic, null);\n  return;\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Under the hood, ",(0,i.jsx)(t.code,{children:"createPaymentSession"})," registers a callback with the payment service, which will signal the workflow when the payment is completed."]}),"\n",(0,i.jsx)(t.h3,{id:"notifying-the-handler",children:"Notifying the handler"}),"\n",(0,i.jsxs)(t.p,{children:["Now, the workflow must notify the handler the payment session is ready.\nWe use ",(0,i.jsx)(t.a,{href:"../tutorials/workflow-communication-tutorial#setevent",children:"setEvent"})," to publish the payment session ID on the ",(0,i.jsx)(t.code,{children:"session_topic"}),", on which the handler is waiting for a notification."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"// Notify the handler and share the payment session ID.\nawait ctxt.setEvent(session_topic, paymentSession.session_id);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"waiting-for-a-payment",children:"Waiting for a payment"}),"\n",(0,i.jsxs)(t.p,{children:["As the handler has been notified to direct the user to the payment service, the payment workflow must wait until the payment service notifies it whether the payment succeeded or failed.\nWe use ",(0,i.jsx)(t.a,{href:"../tutorials/workflow-communication-tutorial#recv",children:"recv"})," to wait on a signal from the callback registed by ",(0,i.jsx)(t.code,{children:"createPaymentSession"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"// Wait for a notification from the payment service with a 30 seconds timeout.\nconst notification = await ctxt.recv<string>(payment_complete_topic, 30);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"handling-payment-outcomes",children:"Handling payment outcomes"}),"\n",(0,i.jsxs)(t.p,{children:["Finally, the workflow must handle three situations: the payment succeeds, fails, or times out.\nFor simplicity, if it fails or times out, we consider the payment failed and return reserved inventory using ",(0,i.jsx)(t.code,{children:"undoSubtractInventory"}),".\nIn a real application, you will want to check with the payment provider in case of a time out, to verify the status of the payment."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"if (notification && notification === 'paid') {\n  // If the payment succeeds, fulfill the order (code omitted for brevity.)\n  ctxt.logger.info(`Payment notification received`);\n} else {\n  // Otherwise, either the payment failed or timed out.\n  // Code to check the payment status with the payment service omitted for brevity.\n  ctxt.logger.warn(`Payment failed or timed out`);\n  await ctxt.invoke(ShopUtilities).undoSubtractInventory();\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"full-workflow-code",children:"Full workflow code"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:'@Workflow()\nstatic async paymentWorkflow(ctxt: WorkflowContext): Promise<void> {\n  // Attempt to update the inventory. Signal the handler if it fails.\n  try {\n    await ctxt.invoke(ShopUtilities).subtractInventory();\n  } catch (error) {\n    ctxt.logger.error("Failed to update inventory");\n    await ctxt.setEvent(session_topic, null);\n    return;\n  }\n\n  // Attempt to start a payment session. If it fails, restore inventory state and signal the handler.\n  const paymentSession = await ctxt.invoke(ShopUtilities).createPaymentSession();\n  if (!paymentSession.url) {\n    ctxt.logger.error("Failed to create payment session");\n    await ctxt.invoke(ShopUtilities).undoSubtractInventory();\n    await ctxt.setEvent(session_topic, null);\n    return;\n  }\n\n  // Signal the handler with the payment session ID.\n  await ctxt.setEvent(session_topic, paymentSession.session_id);\n\n  // Wait for a notification from the payment service.\n  const notification = await ctxt.recv<string>(payment_complete_topic, 30);\n\n  if (notification && notification === \'paid\') {\n    // If the payment succeeds, fulfill the order (code omitted for clarity.)\n    ctxt.logger.info(`Payment notification received`);\n  } else {\n    // Otherwise, either the payment failed or timed out.\n    // Code to check the latest session status with the payment service omitted for clarity.\n    ctxt.logger.warn(`Payment failed or timed out`);\n    await ctxt.invoke(ShopUtilities).undoSubtractInventory();\n  }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"building-and-running",children:"Building and running"}),"\n",(0,i.jsxs)(t.p,{children:["Let's build and run the application (make sure you have the full code as provided in the ",(0,i.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"guide's repository"}),".)"]}),"\n",(0,i.jsx)(t.p,{children:"First we start the payment service in the background. In one terminal, run:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"./start_payment_service.sh\n"})}),"\n",(0,i.jsx)(t.p,{children:"Then we start the shop application. In another terminal, run:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"npm run build\nnpx dbos-sdk start\n"})}),"\n",(0,i.jsx)(t.p,{children:"The output should look like:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"[info]: Workflow executor initialized\n[info]: HTTP endpoints supported:\n[info]:     POST  :  /payment_webhook\n[info]:     POST  :  /checkout/:key?\n[info]: DBOS Server is running at http://localhost:8082\n[info]: DBOS Admin Server is running at http://localhost:8083\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Let's send a request to initiate a checkout: ",(0,i.jsx)(t.code,{children:"curl -X POST http://localhost:8082/checkout"}),".\nThe response will include two links, one for validating the payment and one for cancelling it:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:'Submit payment: curl -X POST http://localhost:8086/api/submit_payment -H "Content-type: application/json" -H "dbos-idmpotency-key: f5103e9f-e78a-4aab-9801-edd45a933d6a" -d \'{"session_id":"fd17b90a-1968-440c-adf7-052aaeaaf788"}\'\nCancel payment: curl -X POST http://localhost:8086/api/cancel_payment -H "Content-type: application/json" -H "dbos-idempotency-key: f5103e9f-e78a-4aab-9801-edd45a933d6a" -d \'{"session_id":"fd17b90a-1968-440c-adf7-052aaeaaf788"}\'\n'})}),"\n",(0,i.jsx)(t.p,{children:"You can take three actions: submit the payment, cancel it, or do nothing. Here are example outputs from the application in these three cases:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"# Submit the payment\n[info]: Checkout payment notification received\n# Cancel the payment or do nothing\n[warn]: Checkout payment failed or timed out\n"})}),"\n",(0,i.jsx)(t.p,{children:"In the two last cases, the shop's inventory will be rolled back, which you can check in the database."}),"\n",(0,i.jsx)(t.h2,{id:"using-idempotency-keys",children:"Using idempotency keys"}),"\n",(0,i.jsxs)(t.p,{children:["If you call the endpoint again with the idempotency key provided\u2015the ",(0,i.jsx)(t.code,{children:"dbos-idempotency-key"})," in the output above\u2015the application will reuse the same payment session.\nFor instance, if you call the application once and see the idempotency key ",(0,i.jsx)(t.code,{children:"f5103e9f-e78a-4aab-9801-edd45a933d6a"})," in the response, try calling the endpoint againt with the key: ",(0,i.jsx)(t.code,{children:"curl -X POST http://localhost:8082/checkout/f5103e9f-e78a-4aab-9801-edd45a933d6a"}),".\nNote the new response's ",(0,i.jsx)(t.code,{children:"session_id"})," is unchanged."]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6028:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/shop-guide-diagram-8dc4bbb116294e834f6a5ea02d85513a.svg"},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var i=n(7294);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);