"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7102],{3323:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"python/tutorials/testing","title":"Testing Your App","description":"Testing DBOS Functions","source":"@site/docs/python/tutorials/testing.md","sourceDirName":"python/tutorials","slug":"/python/tutorials/testing","permalink":"/python/tutorials/testing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":130,"frontMatter":{"sidebar_position":130,"title":"Testing Your App"},"sidebar":"tutorialSidebar","previous":{"title":"Debugging","permalink":"/python/tutorials/debugging"},"next":{"title":"DBOS Database Connections","permalink":"/python/tutorials/database-connection"}}');var s=n(4848),r=n(8453);const o={sidebar_position:130,title:"Testing Your App"},i=void 0,c={},d=[{value:"Testing DBOS Functions",id:"testing-dbos-functions",level:3},{value:"Mocking",id:"mocking",level:3},{value:"Example Test Suite",id:"example-test-suite",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"testing-dbos-functions",children:"Testing DBOS Functions"}),"\n",(0,s.jsxs)(t.p,{children:["Because DBOS workflows, steps, and transactions are ordinary Python functions, you can unit test them using any Python testing framework, like ",(0,s.jsx)(t.a,{href:"https://docs.pytest.org/en/stable/",children:"pytest"})," or ",(0,s.jsx)(t.a,{href:"https://docs.python.org/3/library/unittest.html",children:"unittest"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"You must reset the DBOS runtime between each test like this:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def reset_dbos():\n    DBOS.destroy()\n    config: DBOSConfig = {\n        "name": "my-app",\n        "system_database_url": os.environ.get("TESTING_DATABASE_URL"),\n    }\n    DBOS(config=config)\n    DBOS.reset_system_database()\n    DBOS.launch()\n'})}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsxs)(t.p,{children:["To minimize dependencies during testing, you may want to use a SQLite system database instead of Postgres.\nYou can do this by setting a SQLite connection string in ",(0,s.jsx)(t.code,{children:"reset_dbos"}),", for example:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def reset_dbos():\n    DBOS.destroy()\n    config: DBOSConfig = {\n        "name": "my-app",\n        "system_database_url": "sqlite:///my_test_db.sqlite",\n    }\n    DBOS(config=config)\n    DBOS.reset_system_database()\n    DBOS.launch()\n'})})]}),"\n",(0,s.jsx)(t.p,{children:"First, destroy any existing DBOS instance.\nThen, create and configure a new DBOS instance (you may want to use a different database for testing).\nNext, reset the internal state of DBOS in Postgres, cleaning up any state left over from previous tests.\nFinally, launch a new DBOS instance."}),"\n",(0,s.jsxs)(t.p,{children:["For example, if using pytest, declare ",(0,s.jsx)(t.code,{children:"reset_dbos"})," as a fixture and require it from every test of a DBOS function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="conftest.py"',children:'import pytest\nfrom dbos import DBOS\n\n@pytest.fixture()\ndef reset_dbos():\n    DBOS.destroy()\n    config: DBOSConfig = {\n        "name": "my-app",\n        "system_database_url": os.environ.get("TESTING_DATABASE_URL"),\n    }\n    DBOS(config=config)\n    DBOS.reset_system_database()\n    DBOS.launch()\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="test_example.py"',children:"from example_app.main import example_workflow\n\ndef test_example_workflow(reset_dbos):\n    example_input = ...\n    example_output = ...\n    assert example_workflow(example_input) == example_output\n\n"})}),"\n",(0,s.jsx)(t.h3,{id:"mocking",children:"Mocking"}),"\n",(0,s.jsxs)(t.p,{children:["It is often useful in testing to mock your workflows and steps.\nBecause workflows and steps are just Python functions, they can be mocked using popular mocking libraries like ",(0,s.jsx)(t.a,{href:"https://docs.python.org/3/library/unittest.mock.html",children:"unittest.mock"}),".\nFor example, say we have a workflow ",(0,s.jsx)(t.code,{children:"record_recent_earthquakes"})," that calls two steps (",(0,s.jsx)(t.code,{children:"get_earthquake_data"})," and ",(0,s.jsx)(t.code,{children:"record_earthquake_data"}),"):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@DBOS.workflow()\ndef record_recent_earthquakes(current_time: datetime):\n    end_time = current_time\n    start_time = current_time - timedelta(hours=1)\n    earthquakes = get_earthquake_data(start_time, end_time)\n    if len(earthquakes) == 0:\n        DBOS.logger.info(f"No earthquakes found between {start_time} and {end_time}")\n    for earthquake in earthquakes:\n        new_earthquake = record_earthquake_data(earthquake)\n        if new_earthquake:\n            DBOS.logger.info(f"Recorded earthquake: {earthquake}")\n'})}),"\n",(0,s.jsx)(t.p,{children:"We can test the workflow in isolation by mocking its two steps:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from unittest.mock import patch\n\ndef test_record_recent_earthquakes(reset_dbos):\n    now = datetime.now()\n    earthquake: EarthquakeData = {\n        "id": "ci40171730",\n        "place": "15 km SW of Searles Valley, CA",\n        "magnitude": 2.21,\n        "timestamp": 1738136375670,\n    }\n    # Create a mock for get_earthquake_data that returns one earthquake\n    with patch("earthquake_tracker.main.get_earthquake_data") as mock_get_data:\n        mock_get_data.return_value = [earthquake]\n        # Create a mock for record_earthquake_data\n        with patch("earthquake_tracker.main.record_earthquake_data") as mock_record_data:\n            mock_record_data.return_value = True\n\n            # Call the workflow\n            record_recent_earthquakes(now)\n\n            # Verify get_earthquake_data was called once with correct parameters\n            start_time = now - timedelta(hours=1)\n            mock_get_data.assert_called_once_with(start_time, now)\n\n            # Verify record_earthquake_data was called once with correct parameters\n            mock_record_data.assert_called_once_with(earthquake)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"example-test-suite",children:"Example Test Suite"}),"\n",(0,s.jsxs)(t.p,{children:["To see a DBOS app tested using pytest, check out the ",(0,s.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/earthquake-tracker",children:"Earthquake Tracker"})," example on GitHub."]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(6540);const s={},r=a.createContext(s);function o(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);