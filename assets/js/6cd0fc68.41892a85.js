"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[543],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3,title:"Transactions",description:"Write transactional code"},i=void 0,l={unversionedId:"tutorials/transaction-tutorial",id:"tutorials/transaction-tutorial",title:"Transactions",description:"Write transactional code",source:"@site/docs/tutorials/transaction-tutorial.md",sourceDirName:"tutorials",slug:"/tutorials/transaction-tutorial",permalink:"/operon-docs/tutorials/transaction-tutorial",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Transactions",description:"Write transactional code"},sidebar:"tutorialSidebar",previous:{title:"HTTP handlers",permalink:"/operon-docs/tutorials/handlers-tutorial"},next:{title:"Workflows",permalink:"/operon-docs/tutorials/workflow-tutorial"}},s={},c=[{value:"Full code",id:"full-code",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"An operon transaction is a function decorated with ",(0,a.kt)("inlineCode",{parentName:"p"},"@OperonTransaction")," and taking a ",(0,a.kt)("inlineCode",{parentName:"p"},"TransactionContext")," as a first argument. In this example, we will extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"greetingEndpoint")," to record greetings in the database."),(0,a.kt)("p",null,"First, let's add a new static function in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'@OperonTransaction()\nstatic async hello(txnCtxt: TransactionContext, name: string) {\n  const greeting = `Hello, ${name}!`\n  const { rows } = await txnCtxt.pgClient.query<{ greeting_id: number }>("INSERT INTO OperonHello(greeting) VALUES ($1) RETURNING greeting_id", [greeting])\n  return `Greeting ${rows[0].greeting_id}: ${greeting}`;\n}\n')),(0,a.kt)("p",null,"The function is annotated with the ",(0,a.kt)("a",{parentName:"p",href:"../api-reference/decorators#OperonTransaction"},"OperonTransaction decoratator"),".\nIt takes as parameters a ",(0,a.kt)("a",{parentName:"p",href:"../api-reference/contexts#transactioncontext"},(0,a.kt)("inlineCode",{parentName:"a"},"TransactionContext"))," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," to greet. It uses the transaction context to insert a record in your database using a postgres client. Finally, it returns the greeting."),(0,a.kt)("p",null,"now, let's modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"greetingEndpoint")," to invoke the transaction:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"@GetApi('/greeting/:name')\nstatic async greetingEndpoint(ctx: HandlerContext, name: string) {\n  return await ctx.invoke(Hello).hello(name);\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctx.invoke(Hello)")," returns a proxy object containing all Operon operations registered with the ",(0,a.kt)("inlineCode",{parentName:"li"},"Hello")," class"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".hello(name)")," calls the ",(0,a.kt)("inlineCode",{parentName:"li"},"hello")," transaction with the ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," received in the HTTP request and returns a promise")),(0,a.kt)("p",null,"Note Operon will automatically pass a ",(0,a.kt)("inlineCode",{parentName:"p"},"TransactionContext")," to your registered transactions under the hood."),(0,a.kt)("h2",{id:"full-code"},"Full code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import {\xa0HandlerContext, OperonTransaction, TransactionContext, GetApi } from '@dbos-inc/operon'\n\nexport class Hello {\n  @OperonTransaction()\n  static async hello(txnCtxt: TransactionContext, name: string) {\n    const greeting = `Hello, ${name}!`\n    const { rows } = await txnCtxt.pgClient.query<{ greeting_id: number }>(\"INSERT INTO OperonHello(greeting) VALUES ($1) RETURNING greeting_id\", [greeting])\n    return `Greeting ${rows[0].greeting_id}: ${greeting}`;\n  }\n\n  @GetApi('/greeting/:name')\n  static async greetingEndpoint(ctx: HandlerContext, name: string) {\n    return await ctx.invoke(Hello).hello(name);\n  }\n}\n")))}d.isMDXComponent=!0}}]);