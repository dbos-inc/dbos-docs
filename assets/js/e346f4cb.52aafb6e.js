"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6388],{1506:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(4848),s=t(8453);const o={sidebar_position:4,title:"Queues & Parallelism"},u=void 0,a={id:"python/tutorials/queue-tutorial",title:"Queues & Parallelism",description:"Queues allow you to submit functions to run in the background with a controlled degree of concurrency.",source:"@site/docs/python/tutorials/queue-tutorial.md",sourceDirName:"python/tutorials",slug:"/python/tutorials/queue-tutorial",permalink:"/python/tutorials/queue-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Queues & Parallelism"},sidebar:"tutorialSidebar",previous:{title:"Idempotency",permalink:"/python/tutorials/idempotency-tutorial"},next:{title:"Scheduled Workflows",permalink:"/python/tutorials/scheduled-workflows"}},i={},c=[{value:"Queue Example",id:"queue-example",level:3},{value:"Managing Concurrency",id:"managing-concurrency",level:3},{value:"In-Order Processing",id:"in-order-processing",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Queues allow you to submit functions to run in the background with a controlled degree of concurrency.\nThey are useful for running many functions in parallel."}),"\n",(0,r.jsx)(n.p,{children:"To create a queue, specify its name and the maximum number of functions that it may run concurrently:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue", concurrency=10)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can then enqueue any DBOS-annotated function.\nEnqueuing a function submits it for execution and returns a ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," to it.\nEnqueued tasks are executed in first-in, first-out (FIFO) order."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\ntask = ...\nhandle = queue.enqueue(process_task, task)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"queue-example",children:"Queue Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a workflow using a queue to process many tasks in parallel:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue\n\nqueue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\n@DBOS.workflow()\ndef process_tasks(tasks):\n  task_handles = []\n  # Enqueue each task so all tasks are processed concurrently.\n  for task in tasks:\n    handle = queue.enqueue(process_task, task)\n    task_handles.append(handle)\n  # Wait for each task to complete and retrieve its result.\n  # Return the results of all tasks.\n  return [handle.get_result() for handle in task_handles]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"managing-concurrency",children:"Managing Concurrency"}),"\n",(0,r.jsxs)(n.p,{children:["You can specify the ",(0,r.jsx)(n.em,{children:"concurrency"})," of a queue, the maximum number of functions from this queue that may run concurrently.\nConcurrency limits are global across all DBOS processes using this queue.\nIf no limit is provided, any number of functions may run concurrently.\nFor example, this queue has a maximum concurrency of 10, so at most 10 functions submitted to it may run at once:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue", concurrency=10)\n'})}),"\n",(0,r.jsx)(n.p,{children:"You may want to specify a maximum concurrency if functions in your queue submit work to an external process or call a rate-limited API.\nThe concurrency limit guarantees that even if many functions are submitted at once, they won't overwhelm the worker process or trigger the API's rate limit."}),"\n",(0,r.jsx)(n.h3,{id:"in-order-processing",children:"In-Order Processing"}),"\n",(0,r.jsxs)(n.p,{children:["You can use a queue with ",(0,r.jsx)(n.code,{children:"concurrency=1"})," to guarantee sequential, in-order processing of events.\nOnly a single event will be processed at a time.\nFor example, this app processes events sequentially in the order of their arrival:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom dbos import DBOS, Queue\n\napp = FastAPI()\nDBOS(fastapi=app)\n\nqueue = Queue("in_order_queue", concurrency=1)\n\n@DBOS.step()\ndef process_event(event: str):\n   ...\n\n@app.post("/events/{event}")\ndef event_endpoint(event: str):\n   queue.enqueue(process_event, event)\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function u(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:u(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);