"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[5029],{3415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"python/tutorials/workflow-communication","title":"Communicating with Workflows","description":"DBOS provides a few different ways to communicate with your workflows.","source":"@site/docs/python/tutorials/workflow-communication.md","sourceDirName":"python/tutorials","slug":"/python/tutorials/workflow-communication","permalink":"/python/tutorials/workflow-communication","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":50,"frontMatter":{"sidebar_position":50,"title":"Communicating with Workflows"},"sidebar":"tutorialSidebar","previous":{"title":"Queues & Concurrency","permalink":"/python/tutorials/queue-tutorial"},"next":{"title":"Workflow Management","permalink":"/python/tutorials/workflow-management"}}');var o=t(4848),r=t(8453);const a={sidebar_position:50,title:"Communicating with Workflows"},i=void 0,l={},c=[{value:"Workflow Messaging and Notifications",id:"workflow-messaging-and-notifications",level:2},{value:"Send",id:"send",level:4},{value:"Recv",id:"recv",level:4},{value:"Messages Example",id:"messages-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees",level:4},{value:"Workflow Events",id:"workflow-events",level:2},{value:"set_event",id:"set_event",level:4},{value:"get_event",id:"get_event",level:4},{value:"Events Example",id:"events-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees-1",level:4},{value:"Workflow Streaming",id:"workflow-streaming",level:2},{value:"Writing to Streams",id:"writing-to-streams",level:4},{value:"Reading from Streams",id:"reading-from-streams",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"DBOS provides a few different ways to communicate with your workflows.\nYou can:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#workflow-messaging-and-notifications",children:"Send messages to workflows"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#workflow-events",children:"Publish events from workflows for clients to read"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#workflow-streaming",children:"Stream values from workflows to clients"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"workflow-messaging-and-notifications",children:"Workflow Messaging and Notifications"}),"\n",(0,o.jsx)(n.p,{children:"You can send messages to a specific workflow.\nThis is useful for signaling a workflow or sending notifications to it while it's running."}),"\n",(0,o.jsx)("img",{src:t(4737).A,alt:"DBOS Steps",width:"750",className:"custom-img"}),"\n",(0,o.jsx)(n.h4,{id:"send",children:"Send"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.send(\n    destination_id: str,\n    message: Any,\n    topic: Optional[str] = None\n) -> None\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can call ",(0,o.jsx)(n.code,{children:"DBOS.send()"})," to send a message to a workflow.\nMessages can optionally be associated with a topic and are queued on the receiver per topic."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also call ",(0,o.jsx)(n.a,{href:"/python/reference/client#send",children:(0,o.jsx)(n.code,{children:"send"})})," from outside of your DBOS application with the ",(0,o.jsx)(n.a,{href:"/python/reference/client",children:"DBOS Client"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"recv",children:"Recv"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.recv(\n    topic: Optional[str] = None,\n    timeout_seconds: float = 60,\n) -> Any\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Workflows can call ",(0,o.jsx)(n.code,{children:"DBOS.recv()"})," to receive messages sent to them, optionally for a particular topic.\nEach call to ",(0,o.jsx)(n.code,{children:"recv()"})," waits for and consumes the next message to arrive in the queue for the specified topic, returning ",(0,o.jsx)(n.code,{children:"None"})," if the wait times out.\nIf the topic is not specified, this method only receives messages sent without a topic."]}),"\n",(0,o.jsx)(n.h4,{id:"messages-example",children:"Messages Example"}),"\n",(0,o.jsxs)(n.p,{children:["Messages are especially useful for sending notifications to a workflow.\nFor example, in the ",(0,o.jsx)(n.a,{href:"/python/examples/widget-store",children:"widget store demo"}),", the checkout workflow, after redirecting customers to a payments page, must wait for a notification that the user has paid."]}),"\n",(0,o.jsxs)(n.p,{children:["To wait for this notification, the payments workflow uses ",(0,o.jsx)(n.code,{children:"recv()"}),", executing failure-handling code if the notification doesn't arrive in time:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef checkout_workflow():\n  ... # Validate the order, then redirect customers to a payments service.\n  payment_status = DBOS.recv(PAYMENT_STATUS)\n  if payment_status is not None and payment_status == "paid":\n      ... # Handle a successful payment.\n  else:\n      ... # Handle a failed payment or timeout.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["An endpoint waits for the payment processor to send the notification, then uses ",(0,o.jsx)(n.code,{children:"send()"})," to forward it to the workflow:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@app.post("/payment_webhook/{workflow_id}/{payment_status}")\ndef payment_endpoint(payment_id: str, payment_status: str) -> Response:\n    # Send the payment status to the checkout workflow.\n    DBOS.send(payment_id, payment_status, PAYMENT_STATUS)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"reliability-guarantees",children:"Reliability Guarantees"}),"\n",(0,o.jsxs)(n.p,{children:["All messages are persisted to the database, so if ",(0,o.jsx)(n.code,{children:"send"})," completes successfully, the destination workflow is guaranteed to be able to ",(0,o.jsx)(n.code,{children:"recv"})," it.\nIf you're sending a message from a workflow, DBOS guarantees exactly-once delivery.\nIf you're sending a message from normal Python code, you can use ",(0,o.jsx)(n.a,{href:"/python/reference/contexts#setworkflowid",children:(0,o.jsx)(n.code,{children:"SetWorkflowID"})})," with an idempotency key to guarantee exactly-once delivery."]}),"\n",(0,o.jsx)(n.h2,{id:"workflow-events",children:"Workflow Events"}),"\n",(0,o.jsxs)(n.p,{children:["Workflows can publish ",(0,o.jsx)(n.em,{children:"events"}),", which are key-value pairs associated with the workflow.\nThey are useful for publishing information about the status of a workflow or to send a result to clients while the workflow is running."]}),"\n",(0,o.jsx)("img",{src:t(7534).A,alt:"DBOS Steps",width:"750",className:"custom-img"}),"\n",(0,o.jsx)(n.h4,{id:"set_event",children:"set_event"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.set_event(\n    key: str,\n    value: Any,\n) -> None\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Any workflow can call ",(0,o.jsx)(n.a,{href:"/python/reference/contexts#set_event",children:(0,o.jsx)(n.code,{children:"DBOS.set_event"})})," to publish a key-value pair, or update its value if has already been published."]}),"\n",(0,o.jsx)(n.h4,{id:"get_event",children:"get_event"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.get_event(\n    workflow_id: str,\n    key: str,\n    timeout_seconds: float = 60,\n) -> None\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can call ",(0,o.jsx)(n.a,{href:"/python/reference/contexts#get_event",children:(0,o.jsx)(n.code,{children:"DBOS.get_event"})})," to retrieve the value published by a particular workflow identity for a particular key.\nIf the event does not yet exist, this call waits for it to be published, returning ",(0,o.jsx)(n.code,{children:"None"})," if the wait times out."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also call ",(0,o.jsx)(n.a,{href:"/python/reference/client#get_event",children:(0,o.jsx)(n.code,{children:"get_event"})})," from outside of your DBOS application with ",(0,o.jsx)(n.a,{href:"/python/reference/client",children:"DBOS Client"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"events-example",children:"Events Example"}),"\n",(0,o.jsxs)(n.p,{children:["Events are especially useful for writing interactive workflows that communicate information to their caller.\nFor example, in the ",(0,o.jsx)(n.a,{href:"/python/examples/widget-store",children:"widget store demo"}),", the checkout workflow, after validating an order, needs to send the customer a unique payment ID.\nTo communicate the payment ID to the customer, it uses events."]}),"\n",(0,o.jsxs)(n.p,{children:["The payments workflow emits the payment ID using ",(0,o.jsx)(n.code,{children:"set_event()"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"@DBOS.workflow()\ndef checkout_workflow():\n    ...\n    payment_id = ...\n    dbos.set_event(PAYMENT_ID, payment_id)\n    ...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The FastAPI handler that originally started the workflow uses ",(0,o.jsx)(n.code,{children:"get_event()"})," to await this payment ID, then returns it:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@app.post("/checkout/{idempotency_key}")\ndef checkout_endpoint(idempotency_key: str) -> Response:\n    # Idempotently start the checkout workflow in the background.\n    with SetWorkflowID(idempotency_key):\n        handle = DBOS.start_workflow(checkout_workflow)\n    # Wait for the checkout workflow to send a payment ID, then return it.\n    payment_id = DBOS.get_event(handle.workflow_id, PAYMENT_ID)\n    if payment_id is None:\n        raise HTTPException(status_code=404, detail="Checkout failed to start")\n    return Response(payment_id)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"reliability-guarantees-1",children:"Reliability Guarantees"}),"\n",(0,o.jsxs)(n.p,{children:["All events are persisted to the database, so the latest version of an event is always retrievable.\nAdditionally, if ",(0,o.jsx)(n.code,{children:"get_event"})," is called in a workflow, the retrieved value is persisted in the database so workflow recovery can use that value, even if the event is later updated."]}),"\n",(0,o.jsx)(n.h2,{id:"workflow-streaming",children:"Workflow Streaming"}),"\n",(0,o.jsx)(n.p,{children:"Workflows can stream data in real time to clients.\nThis is useful for streaming results from a long-running workflow or LLM call or for monitoring or progress reporting."}),"\n",(0,o.jsx)("img",{src:t(538).A,alt:"DBOS Steps",width:"750",className:"custom-img"}),"\n",(0,o.jsx)(n.h4,{id:"writing-to-streams",children:"Writing to Streams"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.write_stream(\n    key: str, \n    value: Any\n) -> None:\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can write values to a stream from a workflow or its steps using ",(0,o.jsx)(n.a,{href:"/python/reference/contexts#write_stream",children:(0,o.jsx)(n.code,{children:"DBOS.write_stream"})}),".\nA workflow may have any number of streams, each identified by a unique key."]}),"\n",(0,o.jsxs)(n.p,{children:["When you are done writing to a stream, you should close it with ",(0,o.jsx)(n.a,{href:"/python/reference/contexts#close_stream",children:(0,o.jsx)(n.code,{children:"DBOS.close_stream"})}),".\nOtherwise, streams are automatically closed when the workflow terminates."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.close_stream(\n    key: str\n) -> None\n"})}),"\n",(0,o.jsx)(n.p,{children:"DBOS streams are immutable and append-only:.\nWrites to a stream from a workflow happen exactly-once.\nWrites to a stream from a step happen at-least-once; if a step fails and is retried, it may write to the stream multiple times.\nReaders will see all values written to the stream from all tries of the step in the order in which they were written."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef producer_workflow():\n    DBOS.write_stream(example_key, {"step": 1, "data": "value1"})\n    DBOS.write_stream(example_key, {"step": 2, "data": "value2"})\n    DBOS.close_stream(example_key)  # Signal completion\n'})}),"\n",(0,o.jsx)(n.h4,{id:"reading-from-streams",children:"Reading from Streams"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.read_stream(\n    workflow_id: str,\n    key: str\n) -> Generator[Any, Any, None]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can read values from a stream from anywhere using ",(0,o.jsx)(n.a,{href:"/python/reference/contexts#read_stream",children:(0,o.jsx)(n.code,{children:"DBOS.read_stream"})}),".\nThis function reads values from a stream identified by a workflow ID and key, yielding each value in order until the stream is closed or the workflow terminates."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also read from a stream from outside a DBOS application with a ",(0,o.jsx)(n.a,{href:"/python/reference/client#read_stream",children:"DBOS Client"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'for value in DBOS.read_stream(workflow_id, example_key):\n    print(f"Received: {value}")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},7534:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/workflow-events-8ca174bbcef9b282b65a91c1fcf83a26.png"},4737:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/workflow-messages-227c431621648ccf5b74b8b69ad7ffa0.png"},538:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/workflow-streams-2f388ab9c4c12cb7ce0280712bb9365c.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);