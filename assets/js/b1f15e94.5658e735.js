"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3006],{9410:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"production/self-hosting/admin-api","title":"Admin API Reference","description":"The DBOS library exposes an admin API to perform operations on durable workflows.","source":"@site/docs/production/self-hosting/admin-api.md","sourceDirName":"production/self-hosting","slug":"/production/self-hosting/admin-api","permalink":"/production/self-hosting/admin-api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":100,"frontMatter":{"sidebar_position":100,"title":"Admin API Reference"},"sidebar":"tutorialSidebar","previous":{"title":"Workflow Retention Policies","permalink":"/production/self-hosting/retention"},"next":{"title":"Deploying to DBOS Cloud","permalink":"/production/dbos-cloud/deploying-to-cloud"}}');var r=s(4848),i=s(8453);const t={sidebar_position:100,title:"Admin API Reference"},l=void 0,c={},d=[{value:"Health Check",id:"health-check",level:3},{value:"Workflow Recovery",id:"workflow-recovery",level:3},{value:"Deactivate",id:"deactivate",level:3}];function a(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The DBOS library exposes an admin API to perform operations on durable workflows.\nBy default, this API is on port 3001, though this is configurable."}),"\n",(0,r.jsx)(n.h3,{id:"health-check",children:"Health Check"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Endpoint"}),": ",(0,r.jsx)(n.code,{children:"/dbos-healthz"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP Method"}),": GET"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Performs a health check on the application."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Status Code"}),": 200 OK if the system is healthy; otherwise, appropriate error codes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"workflow-recovery",children:"Workflow Recovery"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Endpoint"}),": ",(0,r.jsx)(n.code,{children:"/dbos-workflow-recovery"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Method"}),": POST"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Recover all pending workflows associated with input executor IDs. Returns the IDs of all workflows queued for recovery."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Request Body Format"}),": JSON list of executors whose pending workflows to recover.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'["executor-id-1", "executor-id-2", "..."]\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Status Code"}),": 200 OK on successful recovery initiation; otherwise, appropriate error codes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Body Format"}),": JSON list of the IDs of workflows queued for recovery."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'["workflow-uuid-1", "workflow-uuid-2", "..."]\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deactivate",children:"Deactivate"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Endpoint"}),": ",(0,r.jsx)(n.code,{children:"/deactivate"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Method"}),": GET"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Deactivate an executor. A deactivated executor may complete active workflows and recover ",(0,r.jsx)(n.code,{children:"PENDING"})," workflows, but may not start new workflows or dequeue workflows."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Status Code"}),": 200 OK if the request succeeeded; otherwise, appropriate error codes."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var o=s(6540);const r={},i=o.createContext(r);function t(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);