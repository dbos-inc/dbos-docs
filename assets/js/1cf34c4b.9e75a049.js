"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6571],{2266:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"typescript/reference/client","title":"DBOS Client","description":"DBOS Client reference","source":"@site/docs/typescript/reference/client.md","sourceDirName":"typescript/reference","slug":"/typescript/reference/client","permalink":"/typescript/reference/client","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":25,"frontMatter":{"sidebar_position":25,"title":"DBOS Client","description":"DBOS Client reference"},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/typescript/reference/configuration"},"next":{"title":"DBOS Transact CLI","permalink":"/typescript/reference/tools/cli"}}');var t=o(4848),s=o(8453);const i={sidebar_position:25,title:"DBOS Client",description:"DBOS Client reference"},l=void 0,a={},c=[{value:"class DBOSClient",id:"class-dbosclient",level:3},{value:"<code>create</code>",id:"create",level:4},{value:"<code>destroy</code>",id:"destroy",level:4},{value:"Workflow Interaction",id:"workflow-interaction",level:3},{value:"<code>enqueue</code>",id:"enqueue",level:4},{value:"<code>send</code>",id:"send",level:4},{value:"<code>getEvent</code>",id:"getevent",level:4},{value:"<code>retrieveWorkflow</code>",id:"retrieveworkflow",level:4},{value:"Workflow Inspection",id:"workflow-inspection",level:3},{value:"<code>getWorkflow</code>",id:"getworkflow",level:4},{value:"<code>listWorkflows</code>",id:"listworkflows",level:4},{value:"<code>listQueuedWorkflows</code>",id:"listqueuedworkflows",level:4},{value:"<code>listWorkflowSteps</code>",id:"listworkflowsteps",level:4},{value:"Workflow Management",id:"workflow-management",level:3},{value:"<code>cancelWorkflow</code>",id:"cancelworkflow",level:4},{value:"<code>resumeWorkflow</code>",id:"resumeworkflow",level:4},{value:"<code>forkWorkflow</code>",id:"forkworkflow",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DBOSClient"})," provides a programmatic way to interact with your DBOS application from external code.\n",(0,t.jsx)(n.code,{children:"DBOSClient"})," includes methods similar to ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class",children:(0,t.jsx)(n.code,{children:"DBOS"})}),"\nthat make sense to be used outside of a DBOS workflow or step, such as ",(0,t.jsx)(n.code,{children:"enqueueWorkflow"})," or ",(0,t.jsx)(n.code,{children:"getEvent"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DBOSClient"})," is included in the ",(0,t.jsx)(n.code,{children:"@dbos-inc/dbos-sdk"})," package, the same package that used by DBOS applications.\nWhere DBOS applications use the ",(0,t.jsxs)(n.a,{href:"/typescript/reference/transactapi/dbos-class",children:["static ",(0,t.jsx)(n.code,{children:"DBOS"})," class"]}),",\nexternal applications use the ",(0,t.jsx)(n.code,{children:"DBOSClient"})," class instead."]})]}),"\n",(0,t.jsx)(n.h3,{id:"class-dbosclient",children:"class DBOSClient"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface EnqueueOptions {\n    workflowName: string;\n    workflowClassName: string;\n    queueName: string;\n    workflowID?: string;\n    appVersion?: string;\n}\n\nclass DBOSClient {\n    static create(databaseUrl: string, systemDatabase?: string): Promise<DBOSClient>;\n    destroy(): Promise<void>;\n\n    async enqueue<T extends (...args: any[]) => Promise<any>>(\n        options: EnqueueOptions,\n        ...args: Parameters<T>\n    ): Promise<WorkflowHandle<Awaited<ReturnType<T>>>>;\n    send<T>(destinationID: string, message: T, topic?: string, idempotencyKey?: string): Promise<void>;\n    getEvent<T>(workflowID: string, key: string, timeoutSeconds?: number): Promise<T | null>;\n    retrieveWorkflow<T = unknown>(workflowID: string): WorkflowHandle<Awaited<T>>;\n\n    getWorkflow(workflowID: string): Promise<WorkflowStatus | undefined>;\n    listWorkflows(input: GetWorkflowsInput): Promise<WorkflowStatus[]>;\n    listQueuedWorkflows(input: GetQueuedWorkflowsInput): Promise<WorkflowStatus[]>;\n    listWorkflowSteps(workflowID: string): Promise<StepInfo[] | undefined>;\n\n    cancelWorkflow(workflowID: string): Promise<void>;\n    resumeWorkflow(workflowID: string): Promise<void>;\n    forkWorkflow(workflowID: string, startStep: number,\n        options?: { newWorkflowID?: string; applicationVersion?: string }): Promise<string>;\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"create",children:(0,t.jsx)(n.code,{children:"create"})}),"\n",(0,t.jsxs)(n.p,{children:["You construct a ",(0,t.jsx)(n.code,{children:"DBOSClient"})," with the static ",(0,t.jsx)(n.code,{children:"create"})," function."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"databaseUrl"})," parameter is a ",(0,t.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING-URIS",children:"standard PostgreSQL connection URI"}),"\nfor the DBOS application database. Please see ",(0,t.jsx)(n.a,{href:"/typescript/reference/configuration#configuring-dbos",children:"Configuring DBOS"})," for more info."]}),"\n",(0,t.jsxs)(n.p,{children:["DBOS Client needs to connect to the ",(0,t.jsx)(n.a,{href:"/explanations/system-tables",children:"system database"})," of your DBOS application.\nThe system database is stored on the same database server as the application database and typically has the same name as your application database, but suffixed with ",(0,t.jsx)(n.code,{children:"_dbos_sys"}),".\nIf you are using a non-standard system database name in your DBOS application, you must also provide the name to ",(0,t.jsx)(n.code,{children:"DBOSClient.create"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { DBOSClient } from "@dbos-inc/dbos-sdk";\n\nconst client = await DBOSClient.create(process.env.DBOS_DATABASE_URL);\n'})}),"\n",(0,t.jsx)(n.h4,{id:"destroy",children:(0,t.jsx)(n.code,{children:"destroy"})}),"\n",(0,t.jsxs)(n.p,{children:["Asynchronously destroys a ",(0,t.jsx)(n.code,{children:"DBOSClient"})," instance."]}),"\n",(0,t.jsx)(n.h3,{id:"workflow-interaction",children:"Workflow Interaction"}),"\n",(0,t.jsx)(n.h4,{id:"enqueue",children:(0,t.jsx)(n.code,{children:"enqueue"})}),"\n",(0,t.jsxs)(n.p,{children:["Enqueues a workflow, similar to ",(0,t.jsxs)(n.a,{href:"/typescript/reference/transactapi/dbos-class#starting-background-workflows",children:["passing a queue name to ",(0,t.jsx)(n.code,{children:"startWorkflow"})]}),"\nor using ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#using-workflow-queues",children:(0,t.jsx)(n.code,{children:"DBOS.withWorkflowQueue"})}),".\nLike ",(0,t.jsx)(n.code,{children:"startWorkflow"}),", the ",(0,t.jsx)(n.code,{children:"enqueue"})," method returns a ",(0,t.jsx)(n.code,{children:"WorkflowHandle"})," that you can use to retrieve the workflow results\nasynchronously from an external application."]}),"\n",(0,t.jsxs)(n.p,{children:["When enqueuing a workflow from within a DBOS application, the workflow and queue metadata can be retrieved automatically.\nHowever, since ",(0,t.jsx)(n.code,{children:"DBOSClient"})," runs outside the DBOS application, the metadata must be specified explicitly."]}),"\n",(0,t.jsx)(n.p,{children:"Required metadata includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"workflowName"}),": The name of the workflow method being enqueued."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"workflowClassName"}),": The name of the class the workflow method is a member of."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"queueName"}),": The name of the ",(0,t.jsx)(n.a,{href:"./transactapi/workflow-queues#class-workflowqueue",children:"WorkflowQueue"})," to enqueue the workflow on."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Additional but optional metadata includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"workflowID"}),": The unique ID for the enqueued workflow.\nIf left undefined, DBOS Client will generate a ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"}),".\nPlease see ",(0,t.jsx)(n.a,{href:"../tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"Workflow IDs and Idempotency"})," for more information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"appVersion"}),": The version of your application that should process this workflow.\nIf left undefined, it will be updated to the current version when the workflow is first dequeued.\nPlease see ",(0,t.jsx)(n.a,{href:"../../production/self-hosting/workflow-recovery#managing-application-versions",children:"Managing Application Versions"})," for more information."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In addition to the ",(0,t.jsx)(n.code,{children:"EnqueueOptions"})," described above, you must also provide the workflow arguments to ",(0,t.jsx)(n.code,{children:"enqueue"}),".\nThese are passed to ",(0,t.jsx)(n.code,{children:"enqueue"})," after the initial ",(0,t.jsx)(n.code,{children:"EnqueueOptions"})," parameter."]}),"\n",(0,t.jsxs)(n.p,{children:["Since DBOS Client works independently of your DBOS application code, ",(0,t.jsx)(n.code,{children:"enqueue"})," accepts whatever arguments you provide it without verifying if they match the workflow's expected argument types.\nHowever, you can get type safety by providing a function declaration type parameter to ",(0,t.jsx)(n.code,{children:"enqueue"}),".\nThis enables TypeScript to verify that the provided arguments match the provided declaration and to infer the returned ",(0,t.jsx)(n.code,{children:"WorkflowHandle"})," result type."]}),"\n",(0,t.jsx)(n.p,{children:"Untyped Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Because we did not provide a function type declaration to enqueue,\n// there is no way to verify the workflow arguments are of the correct type. \nconst handle = await client.enqueue(\n    {\n        workflowName: 'indexDocument',\n        workflowClassName: 'DocumentDetective',\n        queueName: 'indexingQueue',\n    }, \n    \"https://arxiv.org/pdf/2208.13068\");\n\n// Explicitly specify the result type since we did not provide a \n// function type declaration to enqueue.\nconst result: number = await handle.getResult();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Typed Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// TypeScript type declaration for our sample app workflow\ndeclare class DocumentDetective {\n    static indexDocument(url: string): Promise<number>\n}\n\n// Because we provided the function type declaration to enqueue, TypeScript\n// can validate the workflow parameters and infer the workflow return type.\nconst handle = await client.enqueue<typeof DocumentDetective.indexDocument>(\n    {\n        workflowName: 'indexDocument',\n        workflowClassName: 'DocumentDetective',\n        queueName: 'indexingQueue',\n    }, \n    \"https://arxiv.org/pdf/2208.13068\");\n\n// TypeScript can also infer the result type because \n// we provided the function type declaration to enqueue\nconst result = await handle.getResult();\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["TypeScript automatically generates type declarations during compilation of your DBOS application.\nYou can copy or import the function type declaration from your application's\n",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html",children:"generated declaration file (aka.d.ts file)"}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"send",children:(0,t.jsx)(n.code,{children:"send"})}),"\n",(0,t.jsxs)(n.p,{children:["Sends a message to a specified workflow. Identical to ",(0,t.jsx)(n.a,{href:"./transactapi/dbos-class#dbossend",children:(0,t.jsx)(n.code,{children:"DBOS.send"})}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Since DBOS Client is running outside of a DBOS application,\nit is highly recommended that you use the ",(0,t.jsx)(n.code,{children:"idempotencyKey"})," parameter in order to get exactly-once behavior."]})}),"\n",(0,t.jsx)(n.h4,{id:"getevent",children:(0,t.jsx)(n.code,{children:"getEvent"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves an event published by workflowID for a given key using the ",(0,t.jsx)(n.a,{href:"../tutorials/workflow-tutorial#workflow-events",children:"events API"}),".\nIdentical to ",(0,t.jsx)(n.a,{href:"./transactapi/dbos-class#dbosgetevent",children:"DBOS.getEvent"})]}),"\n",(0,t.jsx)(n.h4,{id:"retrieveworkflow",children:(0,t.jsx)(n.code,{children:"retrieveWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves a workflow by ID, similar to ",(0,t.jsx)(n.a,{href:"./transactapi/dbos-class#dbosretrieveworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.retrieveWorkflow"})}),".\nReturns a ",(0,t.jsx)(n.a,{href:"./transactapi/workflow-handles",children:"WorkflowHandle"})," that can be used to retrieve information about the workflow,\nincluding its current state and its eventual result."]}),"\n",(0,t.jsxs)(n.p,{children:["Similar to enqueue, ",(0,t.jsx)(n.code,{children:"retrieveWorkflow"})," can be made type safe by use of a class declaration\nand the ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype",children:"ReturnType Utility Class"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const handle = client.retrieveWorkflow<ReturnType<IndexDocument>>(documentWFID);\nconst pageCount = await handle.getResult();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"workflow-inspection",children:"Workflow Inspection"}),"\n",(0,t.jsx)(n.h4,{id:"getworkflow",children:(0,t.jsx)(n.code,{children:"getWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves the status of a single workflow, given its workflow ID.\nIf the specified workflow ID does not exist, getWorkflow returns undefined.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dbosgetworkflowstatus",children:(0,t.jsx)(n.code,{children:"DBOS.getWorkflowStatus"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"listworkflows",children:(0,t.jsx)(n.code,{children:"listWorkflows"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves information about workflow execution history.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dboslistworkflows",children:(0,t.jsx)(n.code,{children:"DBOS.listWorkflows"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"listqueuedworkflows",children:(0,t.jsx)(n.code,{children:"listQueuedWorkflows"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves information about workflow execution history for a given workflow queue.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dboslistqueuedworkflows",children:(0,t.jsx)(n.code,{children:"DBOS.listQueuedWorkflows"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"listworkflowsteps",children:(0,t.jsx)(n.code,{children:"listWorkflowSteps"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves information about the steps executed in a specified workflow.\nIf the specified workflow is not found, ",(0,t.jsx)(n.code,{children:"listWorkflowSteps"})," returns undefined\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dboslistworkflowsteps",children:(0,t.jsx)(n.code,{children:"DBOS.listWorkflowSteps"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h3,{id:"workflow-management",children:"Workflow Management"}),"\n",(0,t.jsx)(n.h4,{id:"cancelworkflow",children:(0,t.jsx)(n.code,{children:"cancelWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Cancels a workflow. If the workflow is currently running, ",(0,t.jsx)(n.code,{children:"DBOSWorkflowCancelledError"})," will be thrown from its next DBOS call.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dboscancelworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.cancelWorkflow"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"resumeworkflow",children:(0,t.jsx)(n.code,{children:"resumeWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Resumes a workflow that had stopped during execution (due to cancellation or error).\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dbosresumeworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.resumeWorkflow"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"forkworkflow",children:(0,t.jsx)(n.code,{children:"forkWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Start a new execution of a workflow from a specific step.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dbosforkworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.forkWorkflow"})})," for more for more information."]})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var r=o(6540);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);