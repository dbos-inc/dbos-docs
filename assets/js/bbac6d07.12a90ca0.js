"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9788],{5232:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(5893),a=r(1151);const o={sidebar_position:2,description:"Learn the core ideas underlying DBOS Transact"},s="DBOS Transact Core Concepts",i={id:"explanations/core-concepts",title:"DBOS Transact Core Concepts",description:"Learn the core ideas underlying DBOS Transact",source:"@site/docs/explanations/core-concepts.md",sourceDirName:"explanations",slug:"/explanations/core-concepts",permalink:"/explanations/core-concepts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Learn the core ideas underlying DBOS Transact"},sidebar:"tutorialSidebar",previous:{title:"Application Structure",permalink:"/explanations/application-structure-explanation"},next:{title:"How Workflows Work",permalink:"/explanations/how-workflows-work"}},l={},c=[{value:"Programming Model",id:"programming-model",level:3},{value:"Reliable by Default",id:"reliable-by-default",level:3}];function d(e){const t={a:"a",em:"em",h1:"h1",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"dbos-transact-core-concepts",children:"DBOS Transact Core Concepts"}),"\n",(0,n.jsxs)(t.p,{children:["DBOS Transact is a TypeScript framework that helps you develop backend applications that work right by default.\nIts two main principles are inspired by the ",(0,n.jsx)(t.a,{href:"https://dbos-project.github.io/",children:"DBOS research project from Stanford and MIT"}),":"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Store all application state in the database."})," By managing database connections and transactions, DBOS makes it easy for you to store all your app state in the database so it can be safe, consistent, and durable.  Under the hood, we use the database to manage the state of workflow execution as well as all ",(0,n.jsx)(t.a,{href:"../tutorials/workflow-communication-tutorial#messages-api",children:"messages"})," and ",(0,n.jsx)(t.a,{href:"../tutorials/workflow-communication-tutorial#events-api",children:"events"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Access state only through database transactions."})," All database operations in DBOS are transactional, making it easy for you to leverage databases' strong safety guarantees and eliminating most race conditions.  Under the hood, we use transactions to guarantee your workflows ",(0,n.jsx)(t.a,{href:"../tutorials/workflow-tutorial#reliability-guarantees",children:"always run to completion"}),", your operations ",(0,n.jsx)(t.a,{href:"../tutorials/idempotency-tutorial",children:"execute exactly-once"}),", and your messages are delievered reliably."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"programming-model",children:"Programming Model"}),"\n",(0,n.jsxs)(t.p,{children:["In DBOS Transact, you build your applications from Typescript functions, annotating them with ",(0,n.jsx)(t.a,{href:"../api-reference/decorators",children:"decorators"})," to declare their properties.\nThere are four basic types of functions:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"../tutorials/transaction-tutorial",children:"Transactions"})})," run your core business logic transactionally in the database."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"../tutorials/communicator-tutorial",children:"Communicators"})})," talk to external services and APIs, with built-in automatic retries."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"../tutorials/workflow-tutorial",children:"Workflows"})})," reliably orchestrate other functions\u2014if a workflow is ever interrupted for any reason (like a server crash), it always resumes from where it left off."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"../tutorials/http-serving-tutorial",children:"Handlers"})})," serve HTTP requests."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"When you launch an application, DBOS automatically wires these functions together for you, setting up an HTTP server for your endpoints and a database connection pool for your transactions."}),"\n",(0,n.jsx)(t.h3,{id:"reliable-by-default",children:"Reliable by Default"}),"\n",(0,n.jsxs)(t.p,{children:["A critical component of DBOS's programming model is ",(0,n.jsx)(t.em,{children:"reliability"}),", guaranteed by the database.\nYour ",(0,n.jsx)(t.a,{href:"/tutorials/transaction-tutorial",children:"transactions"})," are always ACID.\nYour ",(0,n.jsx)(t.a,{href:"/tutorials/workflow-tutorial",children:"workflows"})," always run to completion, even when interrupted by a server crash\u2014when the server is restarted, they resume from where they left off and don't repeat any operation they previously completed.\nYour ",(0,n.jsx)(t.a,{href:"../tutorials/workflow-communication-tutorial",children:"messages"})," come with guaranteed exactly-once delivery.\nOur goal is to make your app work the way you think it should."]})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>i,a:()=>s});var n=r(7294);const a={},o=n.createContext(a);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);