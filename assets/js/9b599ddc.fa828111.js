"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7700],{5667:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"java/programming-guide","title":"Learn DBOS Java","description":"This guide shows you how to use DBOS to build Java apps that are resilient to any failure.","source":"@site/docs/java/programming-guide.md","sourceDirName":"java","slug":"/java/programming-guide","permalink":"/java/programming-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Learn DBOS Java","pagination_prev":"quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"Get Started with DBOS","permalink":"/quickstart"},"next":{"title":"Add DBOS To Your App","permalink":"/java/integrating-dbos"}}');var s=o(4848),r=o(8453);const a={sidebar_position:10,title:"Learn DBOS Java",pagination_prev:"quickstart"},i=void 0,l={},p=[{value:"1. Setting Up Your Environment",id:"1-setting-up-your-environment",level:2},{value:"2. Workflows and Steps",id:"2-workflows-and-steps",level:2},{value:"3. Queues and Parallelism",id:"3-queues-and-parallelism",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This guide shows you how to use DBOS to build Java apps that are ",(0,s.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"1-setting-up-your-environment",children:"1. Setting Up Your Environment"}),"\n",(0,s.jsxs)(n.p,{children:["First, initialize a new project with Gradle (See ",(0,s.jsx)(n.a,{href:"https://docs.gradle.org/current/userguide/installation.html",children:"the installation instructions"})," if you do not have Gradle set up, or do not have Gradle 8 or later):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"gradle init --type java-application --dsl groovy --test-framework junit --package com.example --project-name myapp --no-split-project --java-version 21\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, install DBOS (plus Logback for logging) by adding the following lines to your ",(0,s.jsx)(n.code,{children:"app/build.gradle"})," dependencies:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:"dependencies {\n    implementation 'dev.dbos:transact:0.6+'\n    implementation 'ch.qos.logback:logback-classic:1.5.18'\n    implementation 'org.slf4j:slf4j-api:2.0.17' // Needed for our demo code only\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"DBOS requires a Postgres database.\nIf you don't already have Postgres, you can launch it in a Docker container with this command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"docker run -d \\\n  --name dbos-postgres \\\n  -e POSTGRES_PASSWORD=dbos \\\n  -p 5432:5432 \\\n  postgres:17\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then, set the following environment variables to your connection information (later, we'll pass them into DBOS).\nFor example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export PGUSER=postgres\nexport PGPASSWORD=dbos\nexport DBOS_SYSTEM_JDBC_URL=jdbc:postgresql://localhost:5432/dbos_java_starter\n"})}),"\n",(0,s.jsx)(n.h2,{id:"2-workflows-and-steps",children:"2. Workflows and Steps"}),"\n",(0,s.jsxs)(n.p,{children:["DBOS helps you add reliability to Java programs.\nThe key feature of DBOS is ",(0,s.jsx)(n.strong,{children:"workflow functions"})," comprised of ",(0,s.jsx)(n.strong,{children:"steps"}),".\nDBOS automatically provides durability by checkpointing the state of your workflows and steps to its system database.\nIf your program crashes or is interrupted, DBOS uses this saved state to recover each of your workflows from its last completed step.\nThus, DBOS makes your application ",(0,s.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's create a simple DBOS program that runs a workflow of two steps.\nAdd the following code to your ",(0,s.jsx)(n.code,{children:"app/src/main/java/com/example/App.java"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="App.java"',children:'package com.example;\n\nimport org.slf4j.LoggerFactory;\n\nimport dev.dbos.transact.DBOS;\nimport dev.dbos.transact.config.DBOSConfig;\nimport dev.dbos.transact.workflow.Workflow;\n\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\n\ninterface Example {\n    public void workflow();\n}\n\nclass ExampleImpl implements Example {\n\n    private void stepOne() {\n        System.out.println("Step one completed!");\n    }\n\n    private void stepTwo() {\n        System.out.println("Step two completed!");\n    }\n\n    @Workflow(name = "workflow")\n    public void workflow() {\n        DBOS.runStep(() -> stepOne(), "stepOne");\n        DBOS.runStep(() -> stepTwo(), "stepTwo");\n    }\n}\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        Logger root = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        root.setLevel(Level.INFO);\n        DBOSConfig config = DBOSConfig.defaults("dbos-java-starter")\n            .withDatabaseUrl(System.getenv("DBOS_SYSTEM_JDBC_URL"))\n            .withDbUser(System.getenv("PGUSER"))\n            .withDbPassword(System.getenv("PGPASSWORD"));\n        DBOS.configure(config);\n        Example proxy = DBOS.registerWorkflows(Example.class, new ExampleImpl());\n        DBOS.launch();\n        proxy.workflow();\n        DBOS.shutdown();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now, build and run this code with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"./gradlew assemble\n./gradlew run\n"})}),"\n",(0,s.jsx)(n.p,{children:"Your program should print output like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"09:20:59.009 [main] INFO dev.dbos.transact.execution.DBOSExecutor -- DBOS started\nStep one completed!\nStep two completed!\n09:20:59.952 [main] INFO dev.dbos.transact.DBOS -- DBOS shut down\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To see durable execution in action, let's modify the app to serve a DBOS workflow from an HTTP endpoint using Javalin.\nReplace the contents of ",(0,s.jsx)(n.code,{children:"app/src/main/java/com/example/App.java"})," with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="App.java"',children:'package com.example;\n\nimport java.time.Duration;\n\nimport org.slf4j.LoggerFactory;\n\nimport dev.dbos.transact.DBOS;\nimport dev.dbos.transact.config.DBOSConfig;\nimport dev.dbos.transact.workflow.Workflow;\nimport io.javalin.Javalin;\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\n\ninterface Example {\n    public void workflow() throws InterruptedException;\n}\n\nclass ExampleImpl implements Example {\n\n    private void stepOne() {\n        System.out.println("Step one completed!");\n    }\n\n    private void stepTwo() {\n        System.out.println("Step two completed!");\n    }\n\n    @Workflow(name="workflow")\n    public void workflow() throws InterruptedException {\n        DBOS.runStep(() -> stepOne(), "stepOne");\n        for (int i = 0; i < 5; i++) {\n            System.out.println("Press Control + C to stop the app...");\n            DBOS.sleep(Duration.ofSeconds(1));\n        }\n        DBOS.runStep(() -> stepTwo(), "stepTwo");\n    }\n}\n\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        Logger root = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        root.setLevel(Level.INFO);\n        DBOSConfig config = DBOSConfig.defaults("dbos-java-starter")\n            .withDatabaseUrl(System.getenv("DBOS_SYSTEM_JDBC_URL"))\n            .withDbUser(System.getenv("PGUSER"))\n            .withDbPassword(System.getenv("PGPASSWORD"));\n        DBOS.configure(config);\n        Example proxy = DBOS.registerWorkflows(Example.class, new ExampleImpl());\n        DBOS.launch();\n        Javalin.create().get("/", ctx -> {\n            proxy.workflow();\n            ctx.result("Workflow executed!");\n        }).start(8080);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now, add the Javalin web server to your ",(0,s.jsx)(n.code,{children:"app/build.gradle"})," ",(0,s.jsx)(n.code,{children:"dependencies"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'implementation "io.javalin:javalin:6.7.0"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then, build and run this code with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"./gradlew assemble\n./gradlew run\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Next, visit this URL: ",(0,s.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In your terminal, you should see an output like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"12:45:26.519 [main] INFO io.javalin.Javalin -- Listening on http://localhost:8080/\nStep one completed!\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, press CTRL+C stop your app. Then, run ",(0,s.jsx)(n.code,{children:"./gradlew run"})," to restart it. You should see an output like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"12:45:37.794 [main] INFO io.javalin.Javalin -- Listening on http://localhost:8080/\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nStep two completed!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can see how DBOS ",(0,s.jsx)(n.strong,{children:"recovers your workflow from the last completed step"}),", executing step two without re-executing step one.\nLearn more about workflows, steps, and their guarantees ",(0,s.jsx)(n.a,{href:"/java/tutorials/workflow-tutorial",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"3-queues-and-parallelism",children:"3. Queues and Parallelism"}),"\n",(0,s.jsxs)(n.p,{children:["To run many functions concurrently, use DBOS ",(0,s.jsx)(n.em,{children:"queues"}),".\nTo try them out, copy this code into ",(0,s.jsx)(n.code,{children:"App.java"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'showLineNumbers title="App.java"',children:'package com.example;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.slf4j.LoggerFactory;\n\nimport dev.dbos.transact.DBOS;\nimport dev.dbos.transact.StartWorkflowOptions;\nimport dev.dbos.transact.config.DBOSConfig;\nimport dev.dbos.transact.workflow.Queue;\nimport dev.dbos.transact.workflow.Workflow;\nimport dev.dbos.transact.workflow.WorkflowHandle;\nimport io.javalin.Javalin;\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\n\ninterface Example {\n    public void setProxy(Example proxy);\n\n    public void taskWorkflow(int i) throws InterruptedException;\n\n    public void queueWorkflow() throws InterruptedException;\n}\n\nclass ExampleImpl implements Example {\n\n    private final Queue queue;\n    private Example proxy;\n\n    public ExampleImpl(Queue queue) {\n        this.queue = queue;\n    }\n\n    public void setProxy(Example proxy) {\n        this.proxy = proxy;\n    }\n\n    @Workflow(name = "task-workflow")\n    public void taskWorkflow(int i) throws InterruptedException {\n        Thread.sleep(5000);\n        System.out.printf("Task %d completed!\\n", i);\n    }\n\n    @Workflow(name = "queue-workflow")\n    public void queueWorkflow() throws InterruptedException {\n        List<WorkflowHandle<Void, InterruptedException>> handles = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            final int index = i;\n            WorkflowHandle<Void, InterruptedException> handle = DBOS.startWorkflow(\n                    () -> this.proxy.taskWorkflow(index),\n                    new StartWorkflowOptions().withQueue(this.queue));\n            handles.add(handle);\n        }\n        for (WorkflowHandle<Void, InterruptedException> handle : handles) {\n            handle.getResult();\n        }\n        System.out.printf("Successfully completed %d workflows!", handles.size());\n    }\n}\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        Logger root = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        root.setLevel(Level.INFO);\n        DBOSConfig config = DBOSConfig.defaults("dbos-java-starter")\n            .withDatabaseUrl(System.getenv("DBOS_SYSTEM_JDBC_URL"))\n            .withDbUser(System.getenv("PGUSER"))\n            .withDbPassword(System.getenv("PGPASSWORD"));\n        DBOS.configure(config);\n        Queue queue = new Queue("example-queue");\n        DBOS.registerQueue(queue);\n        ExampleImpl impl = new ExampleImpl(queue);\n        Example proxy = DBOS.registerWorkflows(Example.class, impl);\n        impl.setProxy(proxy);\n        DBOS.launch();\n        Javalin.create().get("/", ctx -> {\n            proxy.queueWorkflow();\n            ctx.result("Workflow executed!");\n        }).start(8080);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When you enqueue a function by passing ",(0,s.jsx)(n.code,{children:"new StartWorkflowOptions().withQueue(this.queue)"})," into ",(0,s.jsx)(n.code,{children:"DBOS.startWorkflow"}),", DBOS executes it ",(0,s.jsx)(n.em,{children:"asynchronously"}),", running it in the background without waiting for it to finish.\n",(0,s.jsx)(n.code,{children:"DBOS.startWorkflow"})," returns a handle representing the state of the enqueued function.\nThis example enqueues ten functions, then waits for them all to finish using ",(0,s.jsx)(n.code,{children:".getResult()"})," to wait for each of their handles."]}),"\n",(0,s.jsx)(n.p,{children:"Now, restart your app with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"./gradlew assemble\n./gradlew run\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, visit this URL: ",(0,s.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),".\nWait five seconds and you should see an output like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Task 0 completed!\nTask 1 completed!\nTask 2 completed!\nTask 3 completed!\nTask 4 completed!\nTask 5 completed!\nTask 6 completed!\nTask 7 completed!\nTask 8 completed!\nTask 9 completed!\nSuccessfully completed 10 workflows!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can see how all ten steps run concurrently\u2014even though each takes five seconds, they all finish at the same time.\nLearn more about DBOS queues ",(0,s.jsx)(n.a,{href:"/java/tutorials/queue-tutorial",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! You've finished the DBOS Java guide.\nNext, to learn how to build more complex applications, check out the Java tutorials and example apps."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);