"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[1613],{8511:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"java/reference/lifecycle","title":"DBOS Lifecycle","description":"The DBOS class is a singleton&mdash;you should configure and launch it exactly once in a program\'s lifetime.","source":"@site/docs/java/reference/lifecycle.md","sourceDirName":"java/reference","slug":"/java/reference/lifecycle","permalink":"/java/reference/lifecycle","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"DBOS Lifecycle"},"sidebar":"tutorialSidebar","previous":{"title":"Scheduled Workflows","permalink":"/java/tutorials/scheduled-workflows"},"next":{"title":"Workflows & Steps","permalink":"/java/reference/workflows-steps"}}');var i=s(4848),o=s(8453);const t={sidebar_position:10,title:"DBOS Lifecycle"},c=void 0,a={},d=[{value:"DBOS.configure",id:"dbosconfigure",level:3},{value:"DBOS.launch",id:"dboslaunch",level:3},{value:"DBOS.shutdown",id:"dbosshutdown",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The DBOS class is a singleton\u2014you should configure and launch it exactly once in a program's lifetime.\nYou manage and access it through static methods (e.g., ",(0,i.jsx)(n.code,{children:"DBOS.configure()"}),", ",(0,i.jsx)(n.code,{children:"DBOS.launch()"}),").\nHere, we document configuration and lifecycle methods."]}),"\n",(0,i.jsx)(n.h3,{id:"dbosconfigure",children:"DBOS.configure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"static synchronized Instance configure(DBOSConfig config)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configure the DBOS singleton."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"DBOSConfig"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"DBOSConfig"})," is a with-based configuration record for configuring DBOS.\nThe application name, database URL, database user, and database password are required."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constructor:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"DBOSConfig.defaults(String appName)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a DBOSConfig object.  This configuration can be adjusted by using ",(0,i.jsx)(n.code,{children:"with"})," methods that produce new configurations."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"With Methods:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withAppName(String appName)"})}),": Your application's name. Required."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withDatabaseUrl(String databaseUrl)"})}),": The JDBC URL for your system database. Required. A valid JDBC URL is of the form ",(0,i.jsx)(n.code,{children:"jdbc:postgresql://host:port/database"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withDbUser(String dbUser)"})}),": Your Postgres username or role. Required."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withDbPassword(String dbPassword)"})}),": The password for your Postgres user or role. Required."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withMaximumPoolSize(int maximumPoolSize)"})}),": The maximum size for the system database connection pool created by DBOS."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withConnectionTimeout(int connectionTimeout)"})}),": The connection timeout for the system database connection created by DBOS."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withAdminServer(boolean enable)"})}),": Whether to run an ",(0,i.jsx)(n.a,{href:"/production/self-hosting/admin-api",children:"HTTP admin server"})," for workflow management operations. Defaults to false."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withAdminServerPort(int port)"})}),": The port on which the admin server runs. Defaults to 3001."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withMigrate(boolean enable)"})}),": If true, attempt to apply migrations to the system database.  Defaults to true."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withConductorKey(String key)"})}),": An API key for ",(0,i.jsx)(n.a,{href:"/production/self-hosting/conductor",children:"DBOS Conductor"}),". If provided, application is connected to Conductor. API keys can be created from the ",(0,i.jsx)(n.a,{href:"https://console.dbos.dev",children:"DBOS console"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"withAppVersion(String appVersion)"})}),": The code version for this application and its workflows. Workflow versioning is documented ",(0,i.jsx)(n.a,{href:"/java/tutorials/workflow-tutorial#workflow-versioning-and-recovery",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dboslaunch",children:"DBOS.launch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"static void launch()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Launch DBOS, initializing database connections and beginning workflow recovery and queue processing.\nThis should be called after all workflows and queues are registered.\n",(0,i.jsx)(n.strong,{children:"You should not call a DBOS workflow until after DBOS is launched."})]}),"\n",(0,i.jsx)(n.h3,{id:"dbosshutdown",children:"DBOS.shutdown"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"static void shutdown()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Destroy the DBOS singleton.\nAfter DBOS is shut down, a new singleton can be configured and launched.\nThis may be useful for testing DBOS applications."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);