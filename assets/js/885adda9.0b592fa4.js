"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9935],{4389:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"python/reference/dbos-class","title":"DBOS Class","description":"The DBOS class is a singleton&mdash;you must instantiate it (by calling its constructor) exactly once in a program\'s lifetime.","source":"@site/docs/python/reference/dbos-class.md","sourceDirName":"python/reference","slug":"/python/reference/dbos-class","permalink":"/python/reference/dbos-class","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"DBOS Class","pagination_prev":null},"sidebar":"tutorialSidebar","next":{"title":"Decorators","permalink":"/python/reference/decorators"}}');var r=s(4848),o=s(8453);const a={sidebar_position:1,title:"DBOS Class",pagination_prev:null},i=void 0,l={},c=[{value:"class dbos.DBOS",id:"class-dbosdbos",level:2},{value:"launch",id:"launch",level:3},{value:"destroy",id:"destroy",level:3},{value:"reset_system_database",id:"reset_system_database",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The DBOS class is a singleton\u2014you must instantiate it (by calling its constructor) exactly once in a program's lifetime.\nHere, we document its constructor and lifecycle methods.\nDecorators are documented ",(0,r.jsx)(n.a,{href:"/python/reference/decorators",children:"here"})," and context methods and variables ",(0,r.jsx)(n.a,{href:"/python/reference/contexts",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"class-dbosdbos",children:"class dbos.DBOS"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"DBOS(\n    *,\n    config: Optional[DBOSConfig] = None,\n    fastapi: Optional[FastAPI] = None,\n    flask: Optional[Flask] = None,\n    conductor_key: Optional[str] = None,\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config"}),": Configuration parameters for DBOS. See the ",(0,r.jsx)(n.a,{href:"/python/reference/configuration",children:"configuration docs"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fastapi"}),": If your application is using FastAPI, the ",(0,r.jsx)(n.code,{children:"FastAPI"})," object. If this is passed in, DBOS automatically calls ",(0,r.jsx)(n.a,{href:"#launch",children:(0,r.jsx)(n.code,{children:"dbos.launch"})})," when FastAPI is fully initialized. DBOS also adds to all routes a middleware that enables ",(0,r.jsx)(n.a,{href:"/python/tutorials/logging-and-tracing#tracing",children:"tracing"})," through FastAPI HTTP endpoints."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"flask"}),": If your application is using Flask, the ",(0,r.jsx)(n.code,{children:"flask"})," object. If this is passed in, DBOS adds to all routes a middleware that enables ",(0,r.jsx)(n.a,{href:"/python/tutorials/logging-and-tracing#tracing",children:"tracing"})," through Flask HTTP endpoints."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"conductor_key"}),": An API key for ",(0,r.jsx)(n.a,{href:"/production/self-hosting/conductor",children:"DBOS Conductor"}),". If provided, application is connected to Conductor. API keys can be created from the ",(0,r.jsx)(n.a,{href:"https://console.dbos.dev",children:"DBOS console"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"launch",children:"launch"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"DBOS.launch()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Launch DBOS, initializing database connections and starting scheduled workflows.\nShould be called after all decorators run.\n",(0,r.jsx)(n.strong,{children:"You should not call a DBOS function until after DBOS is launched."}),"\nIf a FastAPI app is passed into the ",(0,r.jsx)(n.code,{children:"DBOS"})," constructor, ",(0,r.jsx)(n.code,{children:"launch"})," is called automatically during FastAPI setup."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS\n\n# Initialize the DBOS object\nDBOS()\n\n# Define a scheduled workflow\n@DBOS.scheduled("* * * * *")\n@DBOS.workflow()\ndef run_every_minute(scheduled_time: datetime, actual_time: datetime):\n    DBOS.logger.info("This is a scheduled workflow!")\n\n# After all decorators run, launch DBOS\nDBOS.launch()\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example using Flask:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from flask import Flask\nfrom dbos import DBOS\n\napp = Flask(__name__)\nDBOS(flask=app)\n\n@app.route("/")\n@DBOS.workflow()\ndef test_workflow():\n    return "<p>Workflow successful!</p>"\n\n# After all decorators run, launch DBOS\nDBOS.launch()\n\nif __name__ == "__main__":\n    app.run()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Assuming your file is ",(0,r.jsx)(n.code,{children:"main.py"}),", run with ",(0,r.jsx)(n.code,{children:"python3 -m main"})," (dev) or ",(0,r.jsx)(n.code,{children:"gunicorn -w 1 'main:app' -b 0.0.0.0:8000"})," (prod)"]}),"\n",(0,r.jsx)(n.h3,{id:"destroy",children:"destroy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"DBOS.destroy(\n    destroy_registry: bool = False\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Destroy the DBOS singleton, terminating all active workflows and closing database connections.\nAfter this completes, the singleton can be re-initialized.\nUseful for testing."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"destroy_registry"}),": Whether to destroy the global registry of decorated functions. If set to ",(0,r.jsx)(n.code,{children:"True"}),", ",(0,r.jsx)(n.code,{children:"destroy"}),' will "un-register" all decorated functions. You probably want to leave this ',(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"reset_system_database",children:"reset_system_database"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"DBOS.reset_system_database()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Destroy the DBOS ",(0,r.jsx)(n.a,{href:"/explanations/system-tables",children:"system database"}),", resetting DBOS's internal state in Postgres.\nUseful when testing a DBOS application to reset the internal state of DBOS between tests.\nFor example, see its use in the ",(0,r.jsx)(n.a,{href:"/python/tutorials/testing",children:"testing tutorial"}),".\n",(0,r.jsx)(n.strong,{children:"This is a destructive operation and should only be used in a test environment."})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);