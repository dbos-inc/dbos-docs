"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[1153],{1481:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=r(4848),i=r(8453);const o={sidebar_position:1,title:"DBOS Transact CLI",description:"DBOS Transact CLI reference",pagination_prev:null},t=void 0,c={id:"typescript/reference/cli",title:"DBOS Transact CLI",description:"DBOS Transact CLI reference",source:"@site/docs/typescript/reference/cli.md",sourceDirName:"typescript/reference",slug:"/typescript/reference/cli",permalink:"/typescript/reference/cli",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"DBOS Transact CLI",description:"DBOS Transact CLI reference",pagination_prev:null},sidebar:"tutorialSidebar",next:{title:"DBOS Compiler",permalink:"/typescript/reference/dbos-compiler"}},l={},d=[{value:"Commands",id:"commands",level:2},{value:"<code>npx dbos start</code>",id:"npx-dbos-start",level:3},{value:"<code>npx @dbos-inc/create</code>",id:"npx-dbos-inccreate",level:3},{value:"<code>npx dbos migrate</code>",id:"npx-dbos-migrate",level:3},{value:"<code>npx dbos rollback</code>",id:"npx-dbos-rollback",level:3},{value:"<code>npx dbos configure</code>",id:"npx-dbos-configure",level:3},{value:"<code>npx dbos debug</code>",id:"npx-dbos-debug",level:3},{value:"<code>npx dbos-openapi generate</code>",id:"npx-dbos-openapi-generate",level:3},{value:"Workflow Management Commands",id:"workflow-management-commands",level:2},{value:"<code>npx dbos workflow list</code>",id:"npx-dbos-workflow-list",level:3},{value:"<code>npx dbos workflow get</code>",id:"npx-dbos-workflow-get",level:3},{value:"<code>npx dbos workflow cancel</code>",id:"npx-dbos-workflow-cancel",level:3},{value:"<code>npx dbos workflow resume</code>",id:"npx-dbos-workflow-resume",level:3},{value:"<code>npx dbos workflow restart</code>",id:"npx-dbos-workflow-restart",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The DBOS Transact CLI helps you run applications locally."}),"\n",(0,s.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-start",children:(0,s.jsx)(n.code,{children:"npx dbos start"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nThis command launches the DBOS Transact runtime and HTTP server to serve an application.\nIt registers all functions and serves all endpoints in classes and dependencies of the ",(0,s.jsx)(n.a,{href:"./configuration#runtime",children:"declared entrypoint files"})," (",(0,s.jsx)(n.code,{children:"dist/operations.js"})," by default).\nParameters set from the command line take precedence over parameters set in the ",(0,s.jsx)(n.a,{href:"./configuration",children:"configuration file"}),".\nYou must compile your code (",(0,s.jsx)(n.code,{children:"npm run build"}),") before running this command."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-p, --port <port-number>"}),": The port on which to serve your functions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-l, --loglevel <log-level>"}),": The severity of log entries emitted. Can be one of ",(0,s.jsx)(n.code,{children:"debug"}),", ",(0,s.jsx)(n.code,{children:"info"}),", ",(0,s.jsx)(n.code,{children:"warn"}),", ",(0,s.jsx)(n.code,{children:"error"}),", ",(0,s.jsx)(n.code,{children:"emerg"}),", ",(0,s.jsx)(n.code,{children:"crit"}),", ",(0,s.jsx)(n.code,{children:"alert"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-d, --appDir <application-directory>"}),": The path to your application root directory."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-inccreate",children:(0,s.jsx)(n.code,{children:"npx @dbos-inc/create"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Synonyms"}),"\n",(0,s.jsx)(n.code,{children:"npm create @dbos-inc"})," and ",(0,s.jsx)(n.code,{children:"npm init @dbos-inc"})," are synonyms for ",(0,s.jsx)(n.code,{children:"npx @dbos-inc/create"}),".  When using ",(0,s.jsx)(n.code,{children:"npm create @dbos-inc"})," with any of the command line switches below, be sure to use ",(0,s.jsx)(n.code,{children:"--"})," to separate ",(0,s.jsx)(n.code,{children:"npm"})," arguments from the arguments intended for ",(0,s.jsx)(n.code,{children:"@dbos-inc/create"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),'\nThis command initializes a new DBOS application from a template into a target directory. By default, it instantiates the "Hello, Database!" application used in the ',(0,s.jsx)(n.a,{href:"../../quickstart",children:"quickstart"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-n, --appName <app-name>"}),": The name and directory to which to instantiate the application. Application names should be between 3 and 30 characters and must contain only lowercase letters and numbers, dashes (",(0,s.jsx)(n.code,{children:"-"}),"), and underscores (",(0,s.jsx)(n.code,{children:"_"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-t, --templateName <template>"}),": The template to use for project creation, such as 'hello'."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-migrate",children:(0,s.jsx)(n.code,{children:"npx dbos migrate"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRun all migration commands specified in your ",(0,s.jsx)(n.a,{href:"./configuration",children:"configuration file"})," to apply your application's schema to the database."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-rollback",children:(0,s.jsx)(n.code,{children:"npx dbos rollback"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRun all rollback commands specified in your ",(0,s.jsx)(n.a,{href:"./configuration",children:"configuration file"})," to roll back the last batch of schema migrations."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-configure",children:(0,s.jsx)(n.code,{children:"npx dbos configure"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nThis command configures which database server your application connects to.\nIt applies changes to your ",(0,s.jsx)(n.a,{href:"./configuration",children:"configuration file"}),".\nIf parameters are not specified, it prompts for them."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-h, --host <string>"}),": Your Postgres server hostname (Default: ",(0,s.jsx)(n.code,{children:"localhost"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-p, --port <number>"}),": Your Postgres server port (Default: ",(0,s.jsx)(n.code,{children:"5432"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-U, --username <string>"}),": Your Postgres username (Default: ",(0,s.jsx)(n.code,{children:"postgres"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-debug",children:(0,s.jsx)(n.code,{children:"npx dbos debug"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nThis command launches the DBOS runtime in debug mode to replay a specified workflow.\nIt is similar to ",(0,s.jsx)(n.code,{children:"dbos start"}),", but instead of starting an HTTP server, it replays a single workflow and connects to a locally running DBOS ",(0,s.jsx)(n.a,{href:"/cloud-tutorials/timetravel-debugging#time-travel-with-dbos-cli-non-vs-code-users",children:"time travel debug proxy"}),".\nYou must compile your code (",(0,s.jsx)(n.code,{children:"npm run build"}),") and start the debug proxy before running this command."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-u, --uuid <string>"}),": The workflow identity to replay."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-x, --proxy <string>"}),': The time travel debug proxy URL (default: "postgresql://localhost:2345").']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-l, --loglevel <log-level>"}),": The severity of log entries emitted. Can be one of ",(0,s.jsx)(n.code,{children:"debug"}),", ",(0,s.jsx)(n.code,{children:"info"}),", ",(0,s.jsx)(n.code,{children:"warn"}),", ",(0,s.jsx)(n.code,{children:"error"}),", ",(0,s.jsx)(n.code,{children:"emerg"}),", ",(0,s.jsx)(n.code,{children:"crit"}),", ",(0,s.jsx)(n.code,{children:"alert"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-d, --appDir <application-directory>"}),": The path to your application root directory."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-openapi-generate",children:(0,s.jsx)(n.code,{children:"npx dbos-openapi generate"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nThis command generates an ",(0,s.jsx)(n.a,{href:"https://www.openapis.org/",children:"OpenAPI 3.0.x"})," definition file for a DBOS application.\nThe generated file is named ",(0,s.jsx)(n.code,{children:"openapi.yaml"})," and is saved to the same directory as the TypeScript entrypoint file.\nFor more information, please see the ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/openapi-tutorial",children:"OpenAPI Tutorial"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<entrypoints>"}),": Path to the application's TypeScript entrypoints (for example, ",(0,s.jsx)(n.code,{children:"src/a.ts src/b.ts"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-management-commands",children:"Workflow Management Commands"}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-workflow-list",children:(0,s.jsx)(n.code,{children:"npx dbos workflow list"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nThis command lists workflows run by your application in JSON format ordered by recency (most recent workflows last)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-l, --limit <string>"}),": The number of results to retrieve (only the most recent results are returned). Defaults to 10."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-u, --user <string>"}),": Retrieve results run by this user."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-s, --start-time <string>"}),": Retrieve workflows starting after this timestamp (ISO 8601 format)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-e, --end-time <string>"}),": Retrieve workflows starting before this timestamp (ISO 8601 format)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-S, --status <string>"}),": Retrieve workflows with this status (",(0,s.jsx)(n.code,{children:"PENDING"}),", ",(0,s.jsx)(n.code,{children:"SUCCESS"}),", ",(0,s.jsx)(n.code,{children:"ERROR"}),", ",(0,s.jsx)(n.code,{children:"RETRIES_EXCEEDED"}),", or ",(0,s.jsx)(n.code,{children:"CANCELLED"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-d, --appDir <application-directory>"}),": The path to your application root directory."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--request"}),": Display workflow request information."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output:"}),"\nFor each retrieved workflow, emit a JSON whose fields are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"status"}),": The status of the workflow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowName"}),": The name of the workflow function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowClassName"}),": The name of the class in which the workflow function is implemented"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowConfigName"}),": If the workflow is in a ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/configured-instances",children:"configured class"}),", the name of the configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authenticatedUser"}),": The user who ran the workflow, if specified"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"assumedRole"}),": The role with which the workflow ran, if specified"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authenticatedRoles"}),": All roles which the authenticated user could assume"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowUUID"}),": The ID of the workflow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"input"}),": The input arguments to the workflow, in array format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"output"}),": If the workflow completed successfuly, its output"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"}),": If the workflow threw an error, the serialized error object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request"}),": If the workflow was invoked via HTTP and this field was specified, the serialized request object"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-workflow-get",children:(0,s.jsx)(n.code,{children:"npx dbos workflow get"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRetrieve information on a workflow run by your application."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<workflow-uuid>"}),": The ID of the workflow to retrieve."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-d, --appDir <application-directory>"}),": The path to your application root directory."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--request"}),": Display workflow request information."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output:"}),"\nA JSON whose fields are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"status"}),": The status of the workflow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowName"}),": The name of the workflow function"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowClassName"}),": The name of the class in which the workflow function is implemented"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowConfigName"}),": If the workflow is in a ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/configured-instances",children:"configured class"}),", the name of the configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authenticatedUser"}),": The user who ran the workflow, if specified"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"assumedRole"}),": The role with which the workflow ran, if specified"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authenticatedRoles"}),": All roles which the authenticated user could assume"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"workflowUUID"}),": The UUID of the workflow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"input"}),": The input arguments to the workflow, in array format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"output"}),": If the workflow completed successfuly, its output"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"}),": If the workflow threw an error, the serialized error object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request"}),": If the workflow was invoked via HTTP and this field was specified, the serialized request object"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-workflow-cancel",children:(0,s.jsx)(n.code,{children:"npx dbos workflow cancel"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nCancel a workflow so it is no longer automatically retried or restarted. Active executions are not halted and the workflow can still be manually retried or restarted."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<workflow-uuid>"}),": The UUID of the workflow to cancel."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-d, --appDir <application-directory>"}),": The path to your application root directory."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-workflow-resume",children:(0,s.jsx)(n.code,{children:"npx dbos workflow resume"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nRetries a workflow from the last step it executed, keeping its UUID."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<workflow-uuid>"}),": The UUID of the workflow to resume."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-d, --appDir <application-directory>"}),": The path to your application root directory."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"npx-dbos-workflow-restart",children:(0,s.jsx)(n.code,{children:"npx dbos workflow restart"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Description:"}),"\nResubmits a workflow, restarting it from the beginning with the same arguments but a new UUID."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arguments:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<workflow-uuid>"}),": The UUID of the workflow to restart."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-d, --appDir <application-directory>"}),": The path to your application root directory."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);