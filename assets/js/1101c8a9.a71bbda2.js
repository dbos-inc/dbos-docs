"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[1259],{4293:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"python/reference/queues","title":"Queues","description":"Queues allow you to ensure that functions will be run, without starting them immediately.","source":"@site/docs/python/reference/queues.md","sourceDirName":"python/reference","slug":"/python/reference/queues","permalink":"/python/reference/queues","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Queues"},"sidebar":"tutorialSidebar","previous":{"title":"DBOS Methods & Variables","permalink":"/python/reference/contexts"},"next":{"title":"Workflow Handles","permalink":"/python/reference/workflow_handles"}}');var t=s(4848),a=s(8453);const o={sidebar_position:4,title:"Queues"},u=void 0,l={},c=[{value:"class dbos.Queue",id:"class-dbosqueue",level:3},{value:"enqueue",id:"enqueue",level:3},{value:"enqueue_async",id:"enqueue_async",level:3}];function i(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Queues allow you to ensure that functions will be run, without starting them immediately.\nQueues are useful for controlling the number of functions run in parallel, or the rate at which functions are started."}),"\n",(0,t.jsx)(n.h3,{id:"class-dbosqueue",children:"class dbos.Queue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Queue(\n    name: str = None,\n    concurrency: Optional[int] = None,\n    limiter: Optional[Limiter] = None\n    *,\n    worker_concurrency: Optional[int] = None,\n        priority_enabled: bool = False,\n)\n\nclass Limiter(TypedDict):\n    limit: int\n    period: float # In seconds\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": The name of the queue. Must be unique among all queues in the application."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"concurrency"}),": The maximum number of functions from this queue that may run concurrently.\nThis concurrency limit is global across all DBOS processes using this queue.\nIf not provided, any number of functions may run concurrently."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"limiter"}),": A limit on the maximum number of functions which may be started in a given period."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"worker_concurrency"}),": The maximum number of functions from this queue that may run concurrently on a given DBOS process. Must be less than or equal to ",(0,t.jsx)(n.code,{children:"concurrency"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"priority_enabled"}),": Enable setting priority for workflows on this queue."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,t.jsx)(n.p,{children:"This queue may run no more than 10 functions concurrently and may not start more than 50 functions per 30 seconds:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue", concurrency=10, limiter={"limit": 50, "period": 30})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enqueue",children:"enqueue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"queue.enqueue(\n    func: Callable[P, R],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -> WorkflowHandle[R]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Enqueue a function for processing and return a ",(0,t.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandle",children:"handle"})," to it.\nYou can enqueue any DBOS-annotated function.\nThe ",(0,t.jsx)(n.code,{children:"enqueue"})," method durably enqueues your function; after it returns your function is guaranteed to eventually execute even if your app is interrupted."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue\n\nqueue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\n@DBOS.workflow()\ndef process_tasks(tasks):\n  task_handles = []\n  # Enqueue each task so all tasks are processed concurrently.\n  for task in tasks:\n    handle = queue.enqueue(process_task, task)\n    task_handles.append(handle)\n  # Wait for each task to complete and retrieve its result.\n  # Return the results of all tasks.\n  return [handle.get_result() for handle in task_handles]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enqueue_async",children:"enqueue_async"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"queue.enqueue_async(\n    func: Callable[P, Coroutine[Any, Any, R]],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -> WorkflowHandle[R]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Asynchronously enqueue an async function for processing and return an ",(0,t.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandleasync",children:"async handle"})," to it.\nYou can enqueue any DBOS-annotated async function.\nThe ",(0,t.jsx)(n.code,{children:"enqueue_async"})," method durably enqueues your function; after it returns your function is guaranteed to eventually execute even if your app is interrupted."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue\n\nqueue = Queue("example_queue")\n\n@DBOS.step()\nasync def process_task_async(task):\n  ...\n\n@DBOS.workflow()\nasync def process_tasks(tasks):\n  task_handles = []\n  # Enqueue each task so all tasks are processed concurrently.\n  for task in tasks:\n    handle = await queue.enqueue_async(process_task_async, task)\n    task_handles.append(handle)\n  # Wait for each task to complete and retrieve its result.\n  # Return the results of all tasks.\n  return [await handle.get_result() for handle in task_handles]\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>u});var r=s(6540);const t={},a=r.createContext(t);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);