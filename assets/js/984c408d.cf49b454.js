"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3675],{4724:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"java/tutorials/workflow-communication","title":"Communicating with Workflows","description":"DBOS provides a few different ways to communicate with your workflows.","source":"@site/docs/java/tutorials/workflow-communication.md","sourceDirName":"java/tutorials","slug":"/java/tutorials/workflow-communication","permalink":"/java/tutorials/workflow-communication","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":50,"frontMatter":{"sidebar_position":50,"title":"Communicating with Workflows"},"sidebar":"tutorialSidebar","previous":{"title":"Queues & Concurrency","permalink":"/java/tutorials/queue-tutorial"},"next":{"title":"Workflow Management","permalink":"/java/tutorials/workflow-management"}}');var i=n(4848),s=n(8453);const o={sidebar_position:50,title:"Communicating with Workflows"},r=void 0,l={},c=[{value:"Workflow Messaging and Notifications",id:"workflow-messaging-and-notifications",level:2},{value:"Send",id:"send",level:4},{value:"Recv",id:"recv",level:4},{value:"Messages Example",id:"messages-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees",level:4},{value:"Workflow Events",id:"workflow-events",level:2},{value:"setEvent",id:"setevent",level:4},{value:"getEvent",id:"getevent",level:4},{value:"Events Example",id:"events-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees-1",level:4}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"DBOS provides a few different ways to communicate with your workflows.\nYou can:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#workflow-messaging-and-notifications",children:"Send messages to workflows"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#workflow-events",children:"Publish events from workflows for clients to read"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"workflow-messaging-and-notifications",children:"Workflow Messaging and Notifications"}),"\n",(0,i.jsx)(t.p,{children:"You can send messages to a specific workflow.\nThis is useful for signaling a workflow or sending notifications to it while it's running."}),"\n",(0,i.jsx)("img",{src:n(4737).A,alt:"DBOS Steps",width:"750",className:"custom-img"}),"\n",(0,i.jsx)(t.h4,{id:"send",children:"Send"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"static void send(String destinationId, Object message, String topic)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can call ",(0,i.jsx)(t.code,{children:"DBOS.send()"})," to send a message to a workflow.\nMessages can optionally be associated with a topic and are queued on the receiver per topic."]}),"\n",(0,i.jsxs)(t.p,{children:["You can also call ",(0,i.jsx)(t.a,{href:"/java/reference/client#send",children:(0,i.jsx)(t.code,{children:"send"})})," from outside of your DBOS application with the ",(0,i.jsx)(t.a,{href:"/java/reference/client",children:"DBOS Client"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"recv",children:"Recv"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"static Object recv(String topic, Duration timeout)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Workflows can call ",(0,i.jsx)(t.code,{children:"DBOS.recv()"})," to receive messages sent to them, optionally for a particular topic.\nEach call to ",(0,i.jsx)(t.code,{children:"recv()"})," waits for and consumes the next message to arrive in the queue for the specified topic, returning ",(0,i.jsx)(t.code,{children:"null"})," if the wait times out.\nIf the topic is not specified, this method only receives messages sent without a topic."]}),"\n",(0,i.jsx)(t.h4,{id:"messages-example",children:"Messages Example"}),"\n",(0,i.jsx)(t.p,{children:"Messages are especially useful for sending notifications to a workflow.\nFor example, in a payments system, after redirecting customers to a payments page, the checkout workflow must wait for a notification that the user has paid."}),"\n",(0,i.jsxs)(t.p,{children:["To wait for this notification, the payments workflow uses ",(0,i.jsx)(t.code,{children:"recv()"}),", executing failure-handling code if the notification doesn't arrive in time:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'interface Checkout {\n    void checkoutWorkflow();\n}\n\nclass CheckoutImpl implements Checkout {\n    private static final String PAYMENT_STATUS = "payment_status";\n\n    @Workflow(name = "checkout-workflow")\n    public void checkoutWorkflow() {\n        // Validate the order, redirect the customer to a payments page,\n        // then wait for a notification.\n        String paymentStatus = (String) DBOS.recv(PAYMENT_STATUS, Duration.ofSeconds(60));\n        if (paymentStatus != null && paymentStatus.equals("paid")) {\n            // Handle a successful payment.\n        } else {\n            // Handle a failed payment or timeout.\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["An endpoint waits for the payment processor to send the notification, then uses ",(0,i.jsx)(t.code,{children:"send()"})," to forward it to the workflow:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'app.post("/payment_webhook/{workflow_id}/{payment_status}", ctx -> {\n    String workflowId = ctx.pathParam("workflow_id");\n    String paymentStatus = ctx.pathParam("payment_status");\n    // Send the payment status to the checkout workflow.\n    DBOS.send(workflowId, paymentStatus, PAYMENT_STATUS);\n    ctx.result("Payment status sent");\n});\n'})}),"\n",(0,i.jsx)(t.h4,{id:"reliability-guarantees",children:"Reliability Guarantees"}),"\n",(0,i.jsxs)(t.p,{children:["All messages are persisted to the database, so if ",(0,i.jsx)(t.code,{children:"send"})," completes successfully, the destination workflow is guaranteed to be able to ",(0,i.jsx)(t.code,{children:"recv"})," it.\nIf you're sending a message from a workflow, DBOS guarantees exactly-once delivery.\nIf you're sending a message from normal Java code, you can use a unique workflow ID to guarantee exactly-once delivery."]}),"\n",(0,i.jsx)(t.h2,{id:"workflow-events",children:"Workflow Events"}),"\n",(0,i.jsxs)(t.p,{children:["Workflows can publish ",(0,i.jsx)(t.em,{children:"events"}),", which are key-value pairs associated with the workflow.\nThey are useful for publishing information about the status of a workflow or to send a result to clients while the workflow is running."]}),"\n",(0,i.jsx)("img",{src:n(7534).A,alt:"DBOS Steps",width:"750",className:"custom-img"}),"\n",(0,i.jsx)(t.h4,{id:"setevent",children:"setEvent"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"static void setEvent(String key, Object value)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Any workflow can call ",(0,i.jsx)(t.a,{href:"/java/reference/methods#setevent",children:(0,i.jsx)(t.code,{children:"DBOS.setEvent"})})," to publish a key-value pair, or update its value if it has already been published."]}),"\n",(0,i.jsx)(t.h4,{id:"getevent",children:"getEvent"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"static Object getEvent(String workflowId, String key, Duration timeout)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can call ",(0,i.jsx)(t.a,{href:"/java/reference/methods#getevent",children:(0,i.jsx)(t.code,{children:"DBOS.getEvent"})})," to retrieve the value published by a particular workflow identity for a particular key.\nIf the event does not yet exist, this call waits for it to be published, returning ",(0,i.jsx)(t.code,{children:"null"})," if the wait times out."]}),"\n",(0,i.jsxs)(t.p,{children:["You can also call ",(0,i.jsx)(t.a,{href:"/java/reference/client#getevent",children:(0,i.jsx)(t.code,{children:"getEvent"})})," from outside of your DBOS application with ",(0,i.jsx)(t.a,{href:"/java/reference/client",children:"DBOS Client"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"events-example",children:"Events Example"}),"\n",(0,i.jsx)(t.p,{children:"Events are especially useful for writing interactive workflows that communicate information to their caller.\nFor example, in a checkout system, after validating an order, the checkout workflow needs to send the customer a unique payment ID.\nTo communicate the payment ID to the customer, it uses events."}),"\n",(0,i.jsxs)(t.p,{children:["The payments workflow emits the payment ID using ",(0,i.jsx)(t.code,{children:"setEvent()"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'interface Checkout {\n    void checkoutWorkflow();\n}\n\nclass CheckoutImpl implements Checkout {\n    private static final String PAYMENT_ID = "payment_id";\n\n    @Workflow(name = "checkout-workflow")\n    public void checkoutWorkflow() {\n        // ... validation logic\n        String paymentId = generatePaymentId();\n        DBOS.setEvent(PAYMENT_ID, paymentId);\n        // ... continue processing\n    }\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The handler that originally started the workflow uses ",(0,i.jsx)(t.code,{children:"getEvent()"})," to await this payment ID, then returns it:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'app.post("/checkout/{idempotency_key}", ctx -> {\n    String idempotencyKey = ctx.pathParam("idempotency_key");\n\n    // Idempotently start the checkout workflow in the background.\n    WorkflowHandle<Void, RuntimeException> handle = DBOS.startWorkflow(\n        () -> checkoutProxy.checkoutWorkflow(),\n        new StartWorkflowOptions().withWorkflowId(idempotencyKey)\n    );\n\n    // Wait for the checkout workflow to send a payment ID, then return it.\n    String paymentId = (String) DBOS.getEvent(handle.workflowId(), PAYMENT_ID, Duration.ofSeconds(60));\n    if (paymentId == null) {\n        ctx.status(404);\n        ctx.result("Checkout failed to start");\n    } else {\n        ctx.result(paymentId);\n    }\n});\n'})}),"\n",(0,i.jsx)(t.h4,{id:"reliability-guarantees-1",children:"Reliability Guarantees"}),"\n",(0,i.jsxs)(t.p,{children:["All events are persisted to the database, so the latest version of an event is always retrievable.\nAdditionally, if ",(0,i.jsx)(t.code,{children:"getEvent"})," is called in a workflow, the retrieved value is persisted in the database so workflow recovery can use that value, even if the event is later updated."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7534:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/workflow-events-8ca174bbcef9b282b65a91c1fcf83a26.png"},4737:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/workflow-messages-227c431621648ccf5b74b8b69ad7ffa0.png"},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(6540);const i={},s=a.createContext(i);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);