"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[5513],{4828:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"typescript/reference/transactapi/eventreceivercontext","title":"Event Receivers","description":"API reference for custom event receivers and context.","source":"@site/docs/typescript/reference/transactapi/eventreceivercontext.md","sourceDirName":"typescript/reference/transactapi","slug":"/typescript/reference/transactapi/eventreceivercontext","permalink":"/typescript/reference/transactapi/eventreceivercontext","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":45,"frontMatter":{"sidebar_position":45,"title":"Event Receivers","description":"API reference for custom event receivers and context."},"sidebar":"tutorialSidebar","previous":{"title":"Workflow Queues","permalink":"/typescript/reference/transactapi/workflow-queues"},"next":{"title":"Configuration","permalink":"/typescript/reference/configuration"}}');var o=n(4848),i=n(8453);const s={sidebar_position:45,title:"Event Receivers",description:"API reference for custom event receivers and context."},c=void 0,a={},d=[{value:"Extensibility",id:"extensibility",level:2},{value:"Decorators",id:"decorators",level:3},{value:"Calling DBOS Functions From Event Dispatchers",id:"calling-dbos-functions-from-event-dispatchers",level:3},{value:"Setting Authenticated User And Roles",id:"setting-authenticated-user-and-roles",level:4},{value:"Example",id:"example",level:4},{value:"<code>DBOSExecutorContext</code>",id:"dbosexecutorcontext",level:2},{value:"Properties and Methods",id:"properties-and-methods",level:3},{value:"<code>DBOSExecutorContext.logger</code>",id:"dbosexecutorcontextlogger",level:4},{value:"<code>DBOSExecutorContext.tracer</code>",id:"dbosexecutorcontexttracer",level:4},{value:"<code>DBOSExecutorContext.getConfig</code>",id:"dbosexecutorcontextgetconfig",level:4},{value:"<code>DBOSExecutorContext.getRegistrationsFor</code>",id:"dbosexecutorcontextgetregistrationsfor",level:4},{value:"<code>DBOSExecutorContext.workflow</code>",id:"dbosexecutorcontextworkflow",level:4},{value:"<code>DBOSExecutorContext.transaction</code>",id:"dbosexecutorcontexttransaction",level:4},{value:"<code>DBOSExecutorContext.external</code>",id:"dbosexecutorcontextexternal",level:4},{value:"<code>DBOSExecutorContext.send</code>",id:"dbosexecutorcontextsend",level:4},{value:"<code>DBOSExecutorContext.getEvent</code>",id:"dbosexecutorcontextgetevent",level:4},{value:"<code>DBOSExecutorContext.retrieveWorkflow</code>",id:"dbosexecutorcontextretrieveworkflow",level:4},{value:"<code>DBOSExecutorContext.upsertEventDispatchState</code>",id:"dbosexecutorcontextupserteventdispatchstate",level:4},{value:"<code>DBOSExecutorContext.getEventDispatchState</code>",id:"dbosexecutorcontextgeteventdispatchstate",level:4},{value:"<code>DBOSExecutorContext.queryUserDB</code>",id:"dbosexecutorcontextqueryuserdb",level:4},{value:"<code>DBOSExecutorContext.userDBListen</code>",id:"dbosexecutorcontextuserdblisten",level:4}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"extensibility",children:"Extensibility"}),"\n",(0,o.jsx)(t.p,{children:"DBOS Transact allows libraries, such as those designed to receive external events, to initiate DBOS functions."}),"\n",(0,o.jsx)(t.h3,{id:"decorators",children:"Decorators"}),"\n",(0,o.jsxs)(t.p,{children:["Such libraries may choose to implement method decorators.  If the method decorator is registering a function with DBOS Transact, it should call ",(0,o.jsx)(t.code,{children:"DBOS.registerAndWrapContextFreeFunction"})," for functions that do not accept a context as the first parameter."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"DBOS.registerAndWrapContextFreeFunction<This, Args extends unknown[], Return>(\n    target: object,\n    propertyKey: string,\n    descriptor: TypedPropertyDescriptor<(this: This, ...args: Args) => Promise<Return>>,\n)\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"DBOS.registerAndWrapContextFreeFunction"})," registers the function named ",(0,o.jsx)(t.code,{children:"propertyKey"})," on the ",(0,o.jsx)(t.code,{children:"target"})," class, creates a wrapper function, and updates the ",(0,o.jsx)(t.code,{children:"descriptor"})," to use the wrapper function."]}),"\n",(0,o.jsx)(t.h3,{id:"calling-dbos-functions-from-event-dispatchers",children:"Calling DBOS Functions From Event Dispatchers"}),"\n",(0,o.jsxs)(t.p,{children:["DBOS functions that are decorated as ",(0,o.jsx)(t.code,{children:"DBOS.workflow"}),", ",(0,o.jsx)(t.code,{children:"DBOS.transaction"}),", or ",(0,o.jsx)(t.code,{children:"DBOS.step"}),", can be run directly from event receiver dispatch loops.\nFor more complex circumstances, such as invoking functions with a context argument, ",(0,o.jsx)(t.code,{children:"DBOS.executor"})," provides access to the ",(0,o.jsxs)(t.a,{href:"#dbosexecutorcontext",children:[(0,o.jsx)(t.code,{children:"DBOSExecutorContext"})," interface"]}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"setting-authenticated-user-and-roles",children:"Setting Authenticated User And Roles"}),"\n",(0,o.jsx)(t.p,{children:"When calling DBOS functions, it may be desired to set context variables, such as the authenticated user, and the current tracing span.  The following functions can be used for these purposes:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"// Set the authenticated user, and roles allowed by the authentication system for the scope of the callback() function\nDBOS.withAuthedContext<R>(authedUser: string, authedRoles: string[], callback: () => Promise<R>): Promise<R>\n\n// Set the tracing span for the scope of the callback() function\nDBOS.withTracedContext<R>(callerName: string, span: Span, request: HTTPRequest, callback: () => Promise<R>): Promise<R>\n\n// Set the caller name for the scope of the callback() function\nDBOS.withNamedContext<R>(callerName: string, callback: () => Promise<R>): Promise<R>\n"})}),"\n",(0,o.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(t.p,{children:["In the following example, the ",(0,o.jsx)(t.code,{children:"TestSecurity.testWorkflow"}),' function is executed for authenticated user "joe", with role "user".']}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"  const hijoe = await DBOS.withAuthedContext('joe', ['user'], async() => {\n    return await TestSecurity.testWorkflow('joe');\n  });\n"})}),"\n",(0,o.jsx)(t.h2,{id:"dbosexecutorcontext",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"DBOSExecutorContext"})," is used by event receivers to get their configuration information and invoke workflows, transactions, or communicators in response to received events."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"export interface DBOSExecutorContext\n{\n  readonly logger: Logger;\n  readonly tracer: Tracer;\n\n  getRegistrationsFor(eri: DBOSEventReceiver) : DBOSEventReceiverRegistration[];\n\n  workflow<T extends unknown[], R>(wf: WorkflowFunction<T, R>, params: WorkflowParams, ...args: T): Promise<WorkflowHandle<R>>;\n  transaction<T extends unknown[], R>(txnFn: TransactionFunction<T, R>, params: WorkflowParams, ...args: T): Promise<R>;\n  external<T extends unknown[], R>(stepFn: StepFunction<T, R>, params: WorkflowParams, ...args: T): Promise<R>;\n\n  send<T>(destinationUUID: string, message: T, topic?: string, idempotencyKey?: string): Promise<void>;\n  getEvent<T>(workflowID: string, key: string, timeoutSeconds: number): Promise<T | null>;\n  retrieveWorkflow<R>(workflowID: string): WorkflowHandle<R>;\n\n  getEventDispatchState(svc: string, wfn: string, key: string): Promise<DBOSEventReceiverState | undefined>;\n  upsertEventDispatchState(state: DBOSEventReceiverState): Promise<DBOSEventReceiverState>;\n\n  queryUserDB(sql: string, params?: unknown[]): Promise<unknown[]>;\n\n  userDBListen(channels: string[], callback: DBNotificationCallback): Promise<DBNotificationListener>;\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"properties-and-methods",children:"Properties and Methods"}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextlogger",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.logger"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"readonly logger: Logger\n"})}),"\n",(0,o.jsxs)(t.p,{children:["A reference to DBOS's global logger.  Event receivers may log information related to event dispatch to this logger.\nPlease see our ",(0,o.jsx)(t.a,{href:"/typescript/tutorials/logging",children:"logging tutorial"})," for more information."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontexttracer",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.tracer"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"readonly tracer: Tracer;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["A reference to DBOS's tracer.  Event receivers may initiate or propagate tracing information via ",(0,o.jsx)(t.code,{children:"tracer"}),".\nPlease see our ",(0,o.jsx)(t.a,{href:"/typescript/tutorials/logging",children:"logging tutorial"})," for more information."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextgetconfig",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.getConfig"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"getConfig<T>(key: string, defaultValue: T | undefined) : T | undefined\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"getConfig"})," retrieves configuration information (from .yaml config file / environment).  If ",(0,o.jsx)(t.code,{children:"key"})," is not present in the configuration, ",(0,o.jsx)(t.code,{children:"defaultValue"})," is returned."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextgetregistrationsfor",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.getRegistrationsFor"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"export interface DBOSEventReceiverRegistration {\n  methodConfig: unknown,\n  classConfig: unknown,\n  methodReg: MethodRegistrationBase\n}\n\ngetRegistrationsFor(eri: DBOSEventReceiver) : DBOSEventReceiverRegistration[];\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"getRegistrationsFor"})," provides a list of all method registrations associated with the specified ",(0,o.jsx)(t.code,{children:"DBOSEventReceiver"}),".  Each method registration includes configuration and dispatch information:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"classConfig"}),": Any configuration information collected by class-level decorators"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"methodConfig"}),": Any configuration information collected by method-level decorators"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"methodReg"}),": Reference to the method to be called for each event"]}),"\n"]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextworkflow",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.workflow"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"workflow<T extends unknown[], R>(\n  wf: WorkflowFunction<T, R>, params: WorkflowParams, ...args: T\n) : Promise<WorkflowHandle<R>>;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Invokes the provided ",(0,o.jsx)(t.code,{children:"wf"})," workflow function, with inputs specified by ",(0,o.jsx)(t.code,{children:"args"}),".  The ",(0,o.jsx)(t.code,{children:"WorkflowParams"})," control how the workflow is started:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"WorkflowParams.workflowUUID"}),": Set the workflow ",(0,o.jsx)(t.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"idempotency key"}),", for OAOO."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"WorkflowParams.queueName"}),": Indicate that the workflow is to be run in a ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/workflow-queues#class-workflowqueue",children:"queue"}),", with the provided name.  The queue with the provided ",(0,o.jsx)(t.code,{children:"queueName"})," must have been created and registered prior to executing ",(0,o.jsx)(t.code,{children:"workflow"}),", as the queue provides necessary concurrency and rate-limiting information."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The return value of ",(0,o.jsx)(t.code,{children:"workflow"})," is a ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/workflow-handles",children:(0,o.jsx)(t.code,{children:"WorkflowHandle"})})," for the running or queued workflow."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontexttransaction",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.transaction"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"transaction<T extends unknown[], R>(\n  txnFn: TransactionFunction<T, R>, params: WorkflowParams, ...args: T\n) : Promise<R>;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Invokes a single-operation workflow consisting of the provided ",(0,o.jsx)(t.code,{children:"txnFn"})," function, with inputs specified by ",(0,o.jsx)(t.code,{children:"args"}),".  For additional information, see ",(0,o.jsx)(t.a,{href:"#dbosexecutorcontextworkflow",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.workflow"})}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextexternal",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.external"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"external<T extends unknown[], R>(\n  stepFn: StepFunction<T, R>, params: WorkflowParams, ...args: T\n) : Promise<R>;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Invokes a single-operation workflow consisting of the provided ",(0,o.jsx)(t.code,{children:"stepFn"})," function, with inputs specified by ",(0,o.jsx)(t.code,{children:"args"}),".  For additional information on ",(0,o.jsx)(t.code,{children:"WorkflowParams"}),", see ",(0,o.jsx)(t.a,{href:"#dbosexecutorcontextworkflow",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.workflow"})}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextsend",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.send"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"send<T extends NonNullable<any>>(destinationID: string, message: T, topic?: string, idempotencyKey?: string): Promise<void>\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Sends a message to the workflow identified by ",(0,o.jsx)(t.code,{children:"destinationID"}),".\nMessages can optionally be associated with a topic.\nYou can provide an optional idempotency key to guarantee only a single message is sent even if ",(0,o.jsx)(t.code,{children:"send"})," is called more than once.\nFor more information, see the ",(0,o.jsx)(t.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-messaging-and-notifications",children:"messages API tutorial"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextgetevent",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.getEvent"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"getEvent<T extends NonNullable<any>>(workflowID: string, key: string, timeoutSeconds?: number): Promise<T | null>\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Retrieves an event published by ",(0,o.jsx)(t.code,{children:"workflowID"})," for a given key using the ",(0,o.jsx)(t.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-events",children:"events API"}),".\nAwaiting on the promise returned by ",(0,o.jsx)(t.code,{children:"getEvent()"})," waits for the workflow to set the key, returning ",(0,o.jsx)(t.code,{children:"null"})," if the wait times out."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextretrieveworkflow",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.retrieveWorkflow"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"retrieveWorkflow<R>(workflowID: string): WorkflowHandle<R>\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Returns a ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/workflow-handles",children:"workflow handle"})," to the workflow with ",(0,o.jsx)(t.a,{href:"../../tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"identity"})," ",(0,o.jsx)(t.code,{children:"workflowID"}),".\n",(0,o.jsx)(t.code,{children:"R"})," is the return type of the target workflow."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextupserteventdispatchstate",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.upsertEventDispatchState"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"upsertEventDispatchState(state: DBOSEventReceiverState): Promise<DBOSEventReceiverState>;\n\nexport interface DBOSEventReceiverState\n{\n  service: string;\n  workflowFnName: string;\n  key: string;\n  value?: string;\n  updateTime?: number;\n  updateSeq?: bigint;\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["An event receiver may keep state in the system database.  This state may be helpful for backfilling events that came in while the event receiver was not running.  This state uses a key/value store design, where the event receiver may use ",(0,o.jsx)(t.code,{children:"upsertEventDispatchState"})," to insert/update the value associated with a key, and retrieve the value associated with a key.  This implementation also supports the notion of an update time or update sequence; updates made with lower sequence numbers or times are discared if the existing entry is marked with a later sequence / time."]}),"\n",(0,o.jsx)(t.p,{children:"The key consists of:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"service"}),": ",(0,o.jsx)(t.code,{children:"service"})," should be unique to the event receiver keeping state, to separate from other table users"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"workflowFnName"}),": ",(0,o.jsx)(t.code,{children:"workflowFnName"})," workflow function name should be the fully qualified / unique function name dispatched, to keep state separate by event function"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"key"}),": The ",(0,o.jsx)(t.code,{children:"key"})," field allows multiple records per service / workflow function"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The value stored for each ",(0,o.jsx)(t.code,{children:"service"}),"/",(0,o.jsx)(t.code,{children:"workflowFnName"}),"/",(0,o.jsx)(t.code,{children:"key"})," combination includes:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"value"}),": ",(0,o.jsx)(t.code,{children:"value"})," is a string value.  JSON can be used to encode more complex values."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"updateTime"}),": The time ",(0,o.jsx)(t.code,{children:"value"})," was set.  Upserts of records with an earlier ",(0,o.jsx)(t.code,{children:"updateTime"})," will have no effect on the stored state."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"updateSeq"}),": An integer number indicating when the value was set.  Upserts of records with a smaller ",(0,o.jsx)(t.code,{children:"updateSeq"})," will have no effect on the stored state."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"upsertEventDispatchState"})," inserts a value associated with a key.  If a value is already associated with the specified key, the stored value will be updated, unless ",(0,o.jsx)(t.code,{children:"updateTime"})," or ",(0,o.jsx)(t.code,{children:"updateSeq"})," is provided, and is less that what is already stored in the system database."]}),"\n",(0,o.jsx)(t.p,{children:"The function return value indicates the contents of the system database for the specified key.  This is useful to detect if a more recent record is alreadys stored in the database."}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextgeteventdispatchstate",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.getEventDispatchState"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"getEventDispatchState(service: string, workflowFnName: string, key: string)\n  : Promise<DBOSEventReceiverState | undefined>;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Retrieve the value set for an event receiver's key, as stored by ",(0,o.jsx)(t.a,{href:"#dbosexecutorcontextupserteventdispatchstate",children:(0,o.jsx)(t.code,{children:"upsertEventDispatchState"})})," above.  If no value has been associated with the combination of ",(0,o.jsx)(t.code,{children:"service"}),"/",(0,o.jsx)(t.code,{children:"workflowFnName"}),"/",(0,o.jsx)(t.code,{children:"key"})," above, then ",(0,o.jsx)(t.code,{children:"undefined"})," is returned."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextqueryuserdb",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.queryUserDB"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"queryUserDB(sql: string, params?: unknown[]): Promise<unknown[]>;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Executes the provided ",(0,o.jsx)(t.code,{children:"sql"})," template against the default user application database, using ",(0,o.jsx)(t.code,{children:"params"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"dbosexecutorcontextuserdblisten",children:(0,o.jsx)(t.code,{children:"DBOSExecutorContext.userDBListen"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"interface DBNotification {\n    channel: string;\n    payload?: string;\n}\n\ntype DBNotificationCallback = (n: DBNotification) => void;\n\ninterface DBNotificationListener {\n  close(): Promise<void>;\n}\n\nuserDBListen(channels: string[], callback: DBNotificationCallback): Promise<DBNotificationListener>;\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"userDBListen"})," listens for notifications within the default user application database:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"channels"})," is a list of notification channels of interest"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"callback"})," will be executed for each notification received\nThe return value of ",(0,o.jsx)(t.code,{children:"userDBListen"})," is a ",(0,o.jsx)(t.code,{children:"DBNotificationListener"})," which should be used to ",(0,o.jsx)(t.code,{children:"close"})," the listener and stop the listening operation cleanly."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"callback"})," is the function that will be called when notifications arrive; it is provided with a ",(0,o.jsx)(t.code,{children:"DBNotification"})," containing the ",(0,o.jsx)(t.code,{children:"channel"})," and optional ",(0,o.jsx)(t.code,{children:"payload"})," of the received notification."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);