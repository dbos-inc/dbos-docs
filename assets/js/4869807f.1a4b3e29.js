"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6927],{8540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"python/tutorials/transaction-tutorial","title":"Transactions","description":"Learn how to perform database operations","source":"@site/docs/python/tutorials/transaction-tutorial.md","sourceDirName":"python/tutorials","slug":"/python/tutorials/transaction-tutorial","permalink":"/python/tutorials/transaction-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Transactions","description":"Learn how to perform database operations"},"sidebar":"tutorialSidebar","previous":{"title":"Steps","permalink":"/python/tutorials/step-tutorial"},"next":{"title":"Queues & Concurrency","permalink":"/python/tutorials/queue-tutorial"}}');var s=t(4848),o=t(8453);const r={sidebar_position:3,title:"Transactions",description:"Learn how to perform database operations"},i=void 0,c={},l=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components},{TabItem:t,Tabs:a}=n;return t||p("TabItem",!0),a||p("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Transactions are a special type of ",(0,s.jsx)(n.a,{href:"/python/tutorials/step-tutorial",children:"step"})," that are optimized for database accesses.\nThey execute as a single ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_transaction",children:"database transaction"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To make a Python function a transaction, annotate it with the ",(0,s.jsx)(n.a,{href:"/python/reference/decorators#transaction",children:(0,s.jsx)(n.code,{children:"@DBOS.transaction"})})," decorator.\nThen, access the database using the ",(0,s.jsx)(n.a,{href:"/python/reference/contexts#sql_session",children:(0,s.jsx)(n.code,{children:"DBOS.sql_session"})})," client, which is a ",(0,s.jsx)(n.a,{href:"https://www.sqlalchemy.org/",children:"SQLAlchemy"})," client DBOS automatically connects to your database.\nHere are some examples:"]}),"\n",(0,s.jsxs)(a,{groupId:"database-clients",children:[(0,s.jsx)(t,{value:"sqlalchemy",label:"SQLAlchemy",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'greetings = Table(\n    "greetings", \n    MetaData(), \n    Column("name", String), \n    Column("note", String)\n)\n\n@DBOS.transaction()\ndef example_insert(name: str, note: str) -> None:\n    # Insert a new greeting into the database\n    DBOS.sql_session.execute(greetings.insert().values(name=name, note=note))\n\n@DBOS.transaction()\ndef example_select(name: str) -> Optional[str]:\n    # Select the first greeting to a particular name\n    row = DBOS.sql_session.execute(\n        select(greetings.c.note).where(greetings.c.name == name)\n    ).first()\n    return row[0] if row else None\n'})})}),(0,s.jsx)(t,{value:"raw",label:"Raw SQL",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@DBOS.transaction()\ndef example_insert(name: str, note: str) -> None:\n    # Insert a new greeting into the database\n    sql = text("INSERT INTO greetings (name, note) VALUES (:name, :note)")\n    DBOS.sql_session.execute(sql, {"name": name, "note": note})\n\n\n@DBOS.transaction()\ndef example_select(name: str) -> Optional[str]:\n    # Select the first greeting to a particular name\n    sql = text("SELECT note FROM greetings WHERE name = :name LIMIT 1")\n    row = DBOS.sql_session.execute(sql, {"name": name}).first()\n    return row[0] if row else None\n'})})})]}),"\n",(0,s.jsxs)(n.p,{children:["Transactions should run in the database in which your application stores data.\nYou can specify the database in which transactions run by setting an ",(0,s.jsx)(n.code,{children:"application_database_url"})," when you configure DBOS.\nThe application database (the database in which transactions run) does not need to be the same database (or even on the same server) as your system database.\nFor example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'config: DBOSConfig = {\n    "name": "dbos-example",\n    "system_database_url": os.environ["DBOS_SYSTEM_DATABASE_URL"],\n    "application_database_url": os.environ["APP_DATABASE_URL"],\n}\nDBOS(config=config)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For more information, see the ",(0,s.jsx)(n.a,{href:"/python/reference/configuration",children:"DBOS configuration reference"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["At this time, DBOS does not support coroutine transactions.\nDecorating an ",(0,s.jsx)(n.code,{children:"async def"})," function with ",(0,s.jsx)(n.code,{children:"@DBOS.transaction"})," will raise an error at runtime."]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(6540);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);