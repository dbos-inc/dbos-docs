"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9453],{4924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"typescript/examples/checkout-tutorial","title":"Fault-Tolerant Checkout","description":"This example is also available in Python and Go.","source":"@site/docs/typescript/examples/checkout-tutorial.md","sourceDirName":"typescript/examples","slug":"/typescript/examples/checkout-tutorial","permalink":"/typescript/examples/checkout-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":1,"title":"Fault-Tolerant Checkout"},"sidebar":"examplesSidebar","previous":{"title":"Hacker News Slackbot","permalink":"/python/examples/hacker-news-bot"},"next":{"title":"Hacker News Research Agent","permalink":"/typescript/examples/hacker-news-agent"}}');var s=t(4848),a=t(8453);const o={displayed_sidebar:"examplesSidebar",sidebar_position:1,title:"Fault-Tolerant Checkout"},i=void 0,c={},d=[{value:"Building the Checkout Workflow",id:"building-the-checkout-workflow",level:2},{value:"The Checkout and Payment Endpoints",id:"the-checkout-and-payment-endpoints",level:2},{value:"Database Operations",id:"database-operations",level:2},{value:"Finishing Up",id:"finishing-up",level:2},{value:"Try it Yourself!",id:"try-it-yourself",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["This example is also available in ",(0,s.jsx)(n.a,{href:"../../python/examples/widget-store",children:"Python"})," and ",(0,s.jsx)(n.a,{href:"/golang/examples/widget-store",children:"Go"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we use DBOS and Fastify to deploy an online storefront that's resilient to any failure."}),"\n",(0,s.jsxs)(n.p,{children:["You can see the application live ",(0,s.jsx)(n.a,{href:"https://demo-widget-store.cloud.dbos.dev/",children:"here"}),".\nTry playing with it and pressing the crash button as often as you want.\nWithin a few seconds, the app will recover and resume as if nothing happened."]}),"\n",(0,s.jsxs)(n.p,{children:["All source code is ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/widget-store",children:"available on GitHub"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Widget store UI",src:t(8662).A+"",width:"1243",height:"915"})}),"\n",(0,s.jsx)(n.h2,{id:"building-the-checkout-workflow",children:"Building the Checkout Workflow"}),"\n",(0,s.jsx)(n.p,{children:"The heart of this application is the checkout workflow, which orchestrates the entire purchase process.\nThis workflow is triggered whenever a customer buys a widget and handles the complete order lifecycle:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Creates a new order in the system"}),"\n",(0,s.jsx)(n.li,{children:"Reserves inventory to ensure the item is available"}),"\n",(0,s.jsx)(n.li,{children:"Processes payment"}),"\n",(0,s.jsx)(n.li,{children:"Marks the order as paid and initiates fulfillment"}),"\n",(0,s.jsx)(n.li,{children:"Handles failures gracefully by releasing reserved inventory and canceling orders when necessary"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["DBOS ",(0,s.jsx)(n.strong,{children:"durably executes"})," this workflow.\nIt checkpoints each step in the database so that if the app fails or is interrupted during checkout, it will automatically recover from the last completed step.\nThis means that customers never lose their order progress, no matter what breaks."]}),"\n",(0,s.jsxs)(n.p,{children:["You can try this yourself!\nOn the ",(0,s.jsx)(n.a,{href:"https://demo-widget-store.cloud.dbos.dev/",children:"live application"}),", start an order and press the crash button at any time.\nWithin seconds, your app will recover to exactly the state it was in before the crash and continue as if nothing happened."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"export const checkoutWorkflow = DBOS.registerWorkflow(\n  async () => {\n    // Attempt to reserve inventory, failing if no inventory remains\n    try {\n      await subtractInventory();\n    } catch (error) {\n      console.error(`Failed to update inventory: ${(error as Error).message}`);\n      await DBOS.setEvent(PAYMENT_ID_EVENT, null);\n      return;\n    }\n\n    // Create a new order\n    const orderID = await createOrder();\n\n    // Send a unique payment ID to the checkout endpoint so it can\n    // redirect the customer to the payments page\n    await DBOS.setEvent(PAYMENT_ID_EVENT, DBOS.workflowID);\n    const notification = await DBOS.recv<string>(PAYMENT_TOPIC, 120);\n\n    // If payment succeeded, mark the order as paid and start the order dispatch workflow.\n    // Otherwise, return reserved inventory and cancel the order.\n    if (notification && notification === 'paid') {\n      console.info(`Payment successful!`);\n      await markOrderPaid(orderID);\n      await DBOS.startWorkflow(dispatchOrder)(orderID);\n    } else {\n      console.warn(`Payment failed...`);\n      await errorOrder(orderID);\n      await undoSubtractInventory();\n    }\n\n    // Finally, send the order ID to the payment endpoint so it can redirect\n    // the customer to the order status page.\n    await DBOS.setEvent(ORDER_ID_EVENT, orderID);\n  },\n  { name: 'checkoutWorkflow' },\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"the-checkout-and-payment-endpoints",children:"The Checkout and Payment Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"Now let's implement the HTTP endpoints that handle customer interactions with the checkout system."}),"\n",(0,s.jsx)(n.p,{children:'The checkout endpoint is triggered when a customer clicks the "Buy Now" button.\nIt starts the checkout workflow in the background, then waits for the workflow to generate and send it a unique payment ID.\nIt then returns the payment ID so the browser can redirect the user to the payments page.'}),"\n",(0,s.jsxs)(n.p,{children:["The endpoint accepts an ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"idempotency key"}),' so that even if the customer presses "buy now" multiple times, only one checkout workflow is started.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const fastify = Fastify({logger: true});\n\nfastify.post<{\n  Params: { key: string };\n}>('/checkout/:key', async (req, reply) => {\n  const key = req.params.key;\n  // Idempotently start the checkout workflow in the background.\n  const handle = await DBOS.startWorkflow(checkoutWorkflow, { workflowID: key })();\n  // Wait for the checkout workflow to send a payment ID, then return it.\n  const paymentID = await DBOS.getEvent<string | null>(handle.workflowID, PAYMENT_ID_EVENT);\n  if (paymentID === null) {\n    DBOS.logger.error('checkout failed');\n    return reply.code(500).send('Error starting checkout');\n  }\n  return paymentID;\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"The payment endpoint handles the communication between the payment system and the checkout workflow.\nIt uses the payment ID to signal the checkout workflow whether the payment succeeded or failed.\nIt then retrieves the order ID from the checkout workflow so the browser can redirect the customer to the order status page."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"fastify.post<{\n  Params: { key: string; status: string };\n}>('/payment_webhook/:key/:status', async (req, reply) => {\n  const { key, status } = req.params;\n  // Send the payment status to the checkout workflow.\n  await DBOS.send(key, status, PAYMENT_TOPIC);\n  // Wait for the checkout workflow to send an order ID, then return it.\n  const orderID = await DBOS.getEvent<string>(key, ORDER_ID_EVENT);\n  if (orderID === null) {\n    DBOS.logger.error('retrieving order ID failed');\n    return reply.code(500).send('Error retrieving order ID');\n  }\n  return orderID;\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"database-operations",children:"Database Operations"}),"\n",(0,s.jsxs)(n.p,{children:["Now, let's implement the checkout workflow's steps.\nEach step performs a database operation, like updating inventory or order status.\nBecause these steps access the database, they are implemented using ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/transaction-tutorial",children:"datasource transactions"}),"."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("strong",{children:"Database Operations"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"\nexport const knexds = new KnexDataSource('app-db', config);\n\nexport async function subtractInventory(): Promise<void> {\n  return knexds.runTransaction(\n    async () => {\n      const numAffected = await KnexDataSource.client<Product>('products')\n        .where('product_id', PRODUCT_ID)\n        .andWhere('inventory', '>=', 1)\n        .update({\n          inventory: KnexDataSource.client.raw('inventory - ?', 1),\n        });\n      if (numAffected <= 0) {\n        throw new Error('Insufficient Inventory');\n      }\n    },\n    { name: 'subtractInventory' },\n  );\n}\n\nexport async function undoSubtractInventory(): Promise<void> {\n  return knexds.runTransaction(\n    async () => {\n      await KnexDataSource.client<Product>('products')\n        .where({ product_id: PRODUCT_ID })\n        .update({ inventory: KnexDataSource.client.raw('inventory + ?', 1) });\n    },\n    { name: 'undoSubtractInventory' },\n  );\n}\n\nexport async function setInventory(inventory: number): Promise<void> {\n  return knexds.runTransaction(\n    async () => {\n      await KnexDataSource.client<Product>('products').where({ product_id: PRODUCT_ID }).update({ inventory });\n    },\n    { name: 'setInventory' },\n  );\n}\n\nexport async function retrieveProduct(): Promise<Product> {\n  return knexds.runTransaction(\n    async () => {\n      const item = await KnexDataSource.client<Product>('products').select('*').where({ product_id: PRODUCT_ID });\n      if (!item.length) {\n        throw new Error(`Product ${PRODUCT_ID} not found`);\n      }\n      return item[0];\n    },\n    { name: 'retrieveProduct' },\n  );\n}\n\nexport async function createOrder(): Promise<number> {\n  return knexds.runTransaction(\n    async () => {\n      const orders = await KnexDataSource.client<Order>('orders')\n        .insert({\n          order_status: OrderStatus.PENDING,\n          product_id: PRODUCT_ID,\n          last_update_time: KnexDataSource.client.fn.now(),\n          progress_remaining: 10,\n        })\n        .returning('order_id');\n      const orderID = orders[0].order_id;\n      return orderID;\n    },\n    { name: 'createOrder' },\n  );\n}\n\nexport async function markOrderPaid(order_id: number): Promise<void> {\n  return knexds.runTransaction(\n    async () => {\n      await KnexDataSource.client<Order>('orders').where({ order_id: order_id }).update({\n        order_status: OrderStatus.PAID,\n        last_update_time: KnexDataSource.client.fn.now(),\n      });\n    },\n    { name: 'markOrderPaid' },\n  );\n}\n\nexport async function errorOrder(order_id: number): Promise<void> {\n  return knexds.runTransaction(\n    async () => {\n      await KnexDataSource.client<Order>('orders').where({ order_id: order_id }).update({\n        order_status: OrderStatus.CANCELLED,\n        last_update_time: KnexDataSource.client.fn.now(),\n      });\n    },\n    { name: 'errorOrder' },\n  );\n}\n\nexport async function retrieveOrder(order_id: number): Promise<Order> {\n  return knexds.runTransaction(\n    async () => {\n      const item = await KnexDataSource.client<Order>('orders').select('*').where({ order_id: order_id });\n      if (!item.length) {\n        throw new Error(`Order ${order_id} not found`);\n      }\n      return item[0];\n    },\n    { name: 'retrieveOrder' },\n  );\n}\n\nexport async function retrieveOrders() {\n  return knexds.runTransaction(\n    async () => {\n      return KnexDataSource.client<Order>('orders').select('*');\n    },\n    { name: 'retrieveOrders' },\n  );\n}\n\nexport const dispatchOrder = DBOS.registerWorkflow(\n  async (order_id: number) => {\n    for (let i = 0; i < 10; i++) {\n      await DBOS.sleep(1000);\n      await updateOrderProgress(order_id);\n    }\n  },\n  { name: 'dispatchOrder' },\n);\n\nexport async function updateOrderProgress(order_id: number): Promise<void> {\n  return knexds.runTransaction(\n    async () => {\n      const orders = await KnexDataSource.client<Order>('orders').where({\n        order_id: order_id,\n        order_status: OrderStatus.PAID,\n      });\n      if (!orders.length) {\n        throw new Error(`No PAID order with ID ${order_id} found`);\n      }\n\n      const order = orders[0];\n      if (order.progress_remaining > 1) {\n        await KnexDataSource.client<Order>('orders')\n          .where({ order_id: order_id })\n          .update({ progress_remaining: order.progress_remaining - 1 });\n      } else {\n        await KnexDataSource.client<Order>('orders').where({ order_id: order_id }).update({\n          order_status: OrderStatus.DISPATCHED,\n          progress_remaining: 0,\n        });\n      }\n    },\n    { name: 'updateOrderProgress' },\n  );\n}\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"finishing-up",children:"Finishing Up"}),"\n",(0,s.jsx)(n.p,{children:"Let's add the final touches to the app.\nThis Fastify endpoint serves its frontend:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"fastify.get('/', async (req, reply) => {\n  async function render(file: string, ctx?: object): Promise<string> {\n    const engine = new Liquid({\n      root: path.resolve(__dirname, '..', 'public'),\n    });\n    return (await engine.renderFile(file, ctx)) as string;\n  }\n  const html = await render('app.html', {});\n  return reply.type('text/html').send(html);\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here is the crash endpoint. It crashes your app. Trigger it as many times as you want\u2014DBOS always comes back, resuming from exactly where it left off!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"fastify.post('/crash_application', () => {\n  process.exit(1);\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Finally, let's start DBOS and the Fastify server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function main() {\n  const PORT = parseInt(process.env.NODE_PORT || '3000');\n  DBOS.setConfig({\n    \"name\": 'widget-store-node',\n    \"systemDatabaseUrl\": process.env.DBOS_SYSTEM_DATABASE_URL,\n  });\n  DBOS.logRegisteredEndpoints();\n  await DBOS.launch();\n  await fastify.listen({ port: PORT, host: '0.0.0.0' });\n  console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n}\n\nif (require.main === module) {\n  main().catch(console.log);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"try-it-yourself",children:"Try it Yourself!"}),"\n",(0,s.jsxs)(n.p,{children:["First, clone and enter the ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"dbos-demo-apps"})," repository:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps.git\ncd typescript/widget-store\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then install dependencies and build the application:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm install\nnpm run build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, start Postgres in a local Docker container.\nIf you already use Postgres, you can set the ",(0,s.jsx)(n.code,{children:"DBOS_DATABASE_URL"})," (for application data) and ",(0,s.jsx)(n.code,{children:"DBOS_SYSTEM_DATABASE_URL"})," (for DBOS system data) environment variables to your database connection string."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npx dbos postgres start\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create database tables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm run db:setup\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then start your app:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm run start\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Visit ",(0,s.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," to see your app!"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8662:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/widget_store_ui-a4c2b42a8c4b98b711e3a2aa714511c9.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);