"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[5457],{1468:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var t=s(4848),r=s(8453);const a={displayed_sidebar:"examplesSidebar",sidebar_position:2,title:"AI-Powered Storyteller",hide_table_of_contents:!1},o=void 0,i={id:"python/examples/ai-starter",title:"AI-Powered Storyteller",description:"In this tutorial, you'll learn how to build a reliable AI agent with DBOS from scratch.",source:"@site/docs/python/examples/ai-starter.md",sourceDirName:"python/examples",slug:"/python/examples/ai-starter",permalink:"/python/examples/ai-starter",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{displayed_sidebar:"examplesSidebar",sidebar_position:2,title:"AI-Powered Storyteller",hide_table_of_contents:!1},sidebar:"examplesSidebar",previous:{title:"Widget Store",permalink:"/python/examples/widget-store"},next:{title:"Earthquake Tracker",permalink:"/python/examples/earthquake-tracker"}},l={},d=[{value:"Preparation",id:"preparation",level:3},{value:"Load Data and Build a Q&amp;A Engine",id:"load-data-and-build-a-qa-engine",level:3},{value:"HTTP Serving",id:"http-serving",level:3},{value:"Hosting on DBOS Cloud",id:"hosting-on-dbos-cloud",level:3},{value:"Building a Reliable AI Agent",id:"building-a-reliable-ai-agent",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{BrowserWindow:s,Details:a,TabItem:o,Tabs:i}=n;return s||p("BrowserWindow",!0),a||p("Details",!0),o||p("TabItem",!0),i||p("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In this tutorial, you'll learn how to build a reliable AI agent with DBOS from scratch.\nIn just ",(0,t.jsx)(n.strong,{children:"9 lines of code"})," build an interactive AI application with LlamaIndex and OpenAI and host it on the cloud."]}),"\n",(0,t.jsxs)(n.p,{children:["All source code is ",(0,t.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/ai-storyteller",children:"available on GitHub"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"preparation",children:"Preparation"}),"\n",(0,t.jsxs)("section",{className:"row list",children:[(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsxs)(n.p,{children:["First, you need to create a folder for your app and activate a virtual environment. You also want to create an empty file named ",(0,t.jsx)(n.code,{children:"main.py"})," for your code."]})}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsxs)(i,{groupId:"operating-systems",className:"small-tabs",children:[(0,t.jsx)(o,{value:"maclinux",label:"macOS/Linux",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"python3 -m venv ai-app/.venv\ncd ai-app\nsource .venv/bin/activate\ntouch main.py\n"})})}),(0,t.jsx)(o,{value:"win-ps",label:"Windows (PowerShell)",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"python3 -m venv ai-app/.venv\ncd ai-app\n.venv\\Scripts\\activate.ps1\nNew-Item main.py\n"})})}),(0,t.jsx)(o,{value:"win-cmd",label:"Windows (cmd)",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"python3 -m venv ai-app/.venv\ncd ai-app\n.venv\\Scripts\\activate.bat\nTYPE nul > main.py\n"})})})]})}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsx)(n.p,{children:"Then, install dependencies and initialize a DBOS config file."})}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"pip install dbos llama-index\ndbos init --config\n"})})}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsxs)(n.p,{children:["Next, to run this app, you need an OpenAI developer account. Obtain an API key ",(0,t.jsx)(n.a,{href:"https://platform.openai.com/api-keys",children:"here"}),". Set the API key as an environment variable."]})}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsxs)(i,{groupId:"operating-systems",className:"small-tabs",children:[(0,t.jsx)(o,{value:"maclinux",label:"macOS/Linux",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"export OPENAI_API_KEY=XXXXX\n"})})}),(0,t.jsx)(o,{value:"win-ps",label:"Windows (PowerShell)",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"set OPENAI_API_KEY=XXXXX\n"})})}),(0,t.jsx)(o,{value:"win-cmd",label:"Windows (cmd)",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"set OPENAI_API_KEY=XXXXX\n"})})})]})}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsxs)(n.p,{children:["Declare the environment variable in ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"}),":"]})}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="dbos-config.yaml"',children:"env:\n  OPENAI_API_KEY: ${OPENAI_API_KEY}\n"})})}),(0,t.jsxs)("article",{className:"col col--6",children:[(0,t.jsxs)(n.p,{children:["Finally, let's download some data. This app uses the text from Paul Graham's ",(0,t.jsx)(n.a,{href:"http://paulgraham.com/worked.html",children:'"What I Worked On"'}),". You can download the text from ",(0,t.jsx)(n.a,{href:"https://raw.githubusercontent.com/run-llama/llama_index/main/docs/docs/examples/data/paul_graham/paul_graham_essay.txt",children:"this link"})," and save it under ",(0,t.jsx)(n.code,{children:"data/paul_graham_essay.txt"})," of your app folder."]}),(0,t.jsx)(n.p,{children:"Now, your app folder structure should look like this:"})]}),(0,t.jsx)("article",{className:"col col--6",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"ai-app/\n\u251c\u2500\u2500 dbos-config.yaml\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 data/\n    \u2514\u2500\u2500 paul_graham_essay.txt\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"load-data-and-build-a-qa-engine",children:"Load Data and Build a Q&A Engine"}),"\n",(0,t.jsxs)(n.p,{children:["Let's start with a 5 line-of-code LlamaIndex starter.\nAdd the following code to your ",(0,t.jsx)(n.code,{children:"main.py"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'from llama_index.core import VectorStoreIndex, SimpleDirectoryReader\n\ndocuments = SimpleDirectoryReader("data").load_data()\nindex = VectorStoreIndex.from_documents(documents)\n\nquery_engine = index.as_query_engine()\nresponse = query_engine.query("What did the author do growing up?")\nprint(response)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This script loads data and builds an index over the documents under the ",(0,t.jsx)(n.code,{children:"data/"})," folder, and it generates an answer by querying the index. You can run this script and it should give you a response, for example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ python3 main.py\n\nThe author worked on writing short stories and programming...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"http-serving",children:"HTTP Serving"}),"\n",(0,t.jsxs)(n.p,{children:["Now, let's add a FastAPI endpoint to serve responses through HTTP. Modify your ",(0,t.jsx)(n.code,{children:"main.py"})," as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'from llama_index.core import VectorStoreIndex, SimpleDirectoryReader\n#highlight-next-line\nfrom fastapi import FastAPI\n\n#highlight-next-line\napp = FastAPI()\n\ndocuments = SimpleDirectoryReader("data").load_data()\nindex = VectorStoreIndex.from_documents(documents)\nquery_engine = index.as_query_engine()\n\n#highlight-start\n@app.get("/")\ndef get_answer():\n#highlight-end\n    response = query_engine.query("What did the author do growing up?")\n#highlight-next-line\n    return str(response)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Now you can start your app with ",(0,t.jsx)(n.code,{children:"fastapi run main.py"}),". To see that it's working, visit this URL: ",(0,t.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"})]}),"\n",(0,t.jsx)(s,{url:"http://localhost:8000",children:(0,t.jsx)(n.p,{children:'"The author worked on writing short stories and programming..."'})}),"\n",(0,t.jsx)(n.p,{children:"The result may be slightly different every time you refresh your browser window!"}),"\n",(0,t.jsx)(n.h3,{id:"hosting-on-dbos-cloud",children:"Hosting on DBOS Cloud"}),"\n",(0,t.jsxs)(n.p,{children:["To deploy your app to DBOS Cloud, you only need to add two lines to ",(0,t.jsx)(n.code,{children:"main.py"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'from llama_index.core import VectorStoreIndex, SimpleDirectoryReader\nfrom fastapi import FastAPI\n#highlight-next-line\nfrom dbos import DBOS\n\napp = FastAPI()\n#highlight-next-line\nDBOS(fastapi=app)\n\ndocuments = SimpleDirectoryReader("data").load_data()\nindex = VectorStoreIndex.from_documents(documents)\nquery_engine = index.as_query_engine()\n\n@app.get("/")\ndef get_answer():\n    response = query_engine.query("What did the author do growing up?")\n    return str(response)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, install the DBOS Cloud CLI if you haven't already (requires Node):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"npm i -g @dbos-inc/dbos-cloud\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then freeze dependencies to ",(0,t.jsx)(n.code,{children:"requirements.txt"})," and deploy to DBOS Cloud:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"pip freeze > requirements.txt\ndbos-cloud app deploy\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In less than a minute, it should print ",(0,t.jsx)(n.code,{children:"Access your application at <URL>"}),".\nTo see that your app is working, visit ",(0,t.jsx)(n.code,{children:"<URL>"})," in your browser."]}),"\n",(0,t.jsx)(s,{url:"https://<username>-ai-app.cloud.dbos.dev",children:(0,t.jsx)(n.p,{children:'"The author worked on writing short stories and programming..."'})}),"\n",(0,t.jsxs)(n.p,{children:["Congratulations, you've successfully deployed your first AI app to DBOS Cloud! You can see your deployed app in the ",(0,t.jsx)(n.a,{href:"https://console.dbos.dev/login-redirect",children:"cloud console"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"building-a-reliable-ai-agent",children:"Building a Reliable AI Agent"}),"\n",(0,t.jsxs)(n.p,{children:["Want to have some fun?\nLet's add multiple steps and turn this simple Q&A app into a more complex AI agent -- a storyteller Slackbot! Add the following lines to ",(0,t.jsx)(n.code,{children:"main.py"}),".\nNote that this is normal Python code, with DBOS-specific lines highlighted."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'#highlight-next-line\nfrom dbos import SetWorkflowID\nimport os\nimport requests\n\nslack_webhook_url = os.getenv("SLACK_WEBHOOK_URL")\n\n#highlight-next-line\n@DBOS.step()\ndef get_growup():\n    response = query_engine.query("What did the author do growing up?")\n    return str(response)\n\n#highlight-next-line\n@DBOS.step()\ndef get_start_yc():\n    response = query_engine.query("How did the author start YC?")\n    return str(response)\n\n#highlight-next-line\n@DBOS.step()\ndef get_after_yc():\n    response = query_engine.query("What happened after YC?")\n    return str(response)\n\n#highlight-next-line\n@DBOS.step()\ndef post_to_slack(message: str):\n    requests.post(slack_webhook_url, headers={"Content-Type": "application/json"}, json={"text": message})\n    DBOS.logger.info(f"Sent story version {DBOS.workflow_id} to Slack!")\n\n# This workflow invokes the above three steps to tell a whole story.\n# Then, optionally send the story to a Slack channel.\n#highlight-next-line\n@DBOS.workflow()\ndef story_workflow():\n    res1 = get_growup()\n    res2 = get_start_yc()\n    res3 = get_after_yc()\n    story = f"Story Version {DBOS.workflow_id}: First, {res1} Then, {res2} Finally, {res3}"\n    if slack_webhook_url:\n        post_to_slack(story)\n    return story\n\n# Let\'s define a route that generates a version of the story.\n# Every time you visit the same version, you get the same story.\n@app.get("/story/{version}")\ndef get_story(version: str):\n    #highlight-next-line\n    with SetWorkflowID(version):\n        return story_workflow()\n'})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"(Optional) Setting up a Slack webhook "}),(0,t.jsxs)(n.p,{children:["Optionally, you can create an ",(0,t.jsx)(n.a,{href:"https://api.slack.com/messaging/webhooks",children:"incoming webhook"})," to post stories from your app to your Slack workspace.\nIt should look something like this:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\n"})}),(0,t.jsx)(n.p,{children:"Set it as an environment variable:"}),(0,t.jsxs)(i,{groupId:"operating-systems",className:"small-tabs",children:[(0,t.jsx)(o,{value:"maclinux",label:"macOS or Linux",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"export SLACK_WEBHOOK_URL=XXXXX\n"})})}),(0,t.jsx)(o,{value:"win-ps",label:"Windows (PowerShell)",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"set SLACK_WEBHOOK_URL=XXXXX\n"})})}),(0,t.jsx)(o,{value:"win-cmd",label:"Windows (cmd)",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"set SLACK_WEBHOOK_URL=XXXXX\n"})})})]}),(0,t.jsxs)(n.p,{children:["Declare the environment variable in ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="dbos-config.yaml"',children:"env:\n  SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["Deploy it to DBOS Cloud again (or ",(0,t.jsx)(n.a,{href:"../../quickstart#run-your-app-locally",children:"run it locally"}),"). Visit ",(0,t.jsx)(n.code,{children:"<URL>/story/<version>"})," in your browser. For example:"]}),"\n",(0,t.jsx)(s,{url:"https://<username>-ai-app.cloud.dbos.dev/story/v1",children:(0,t.jsx)(n.p,{children:'"First, The author worked on writing short stories and programming... Then, The author started Y Combinator (YC) by organizing a summer program called the Summer Founders Program... Finally, After YC, the individual decided to pursue painting as a new endeavor..."'})}),"\n",(0,t.jsx)(n.p,{children:"If you configured a Slack webhook, you should be able to see a copy of this story in your Slack channel!"}),"\n",(0,t.jsx)(n.p,{children:"To tell a slightly different version of the story, visit another version. For example:"}),"\n",(0,t.jsx)(s,{url:"https://<username>-ai-app.cloud.dbos.dev/story/v2",children:(0,t.jsx)(n.p,{children:'"First, The author wrote short stories and tried programming on the IBM 1401 in 9th grade using an early version of Fortran... Then, The author started YC by deciding to create an investment firm with Jessica after facing delays from VCs... Finally, Paul Graham decided to hand over Y Combinator (YC) to someone else after his mother had a stroke in 2012..."'})}),"\n",(0,t.jsxs)(n.p,{children:["Because this app uses a DBOS workflow, it ",(0,t.jsx)(n.em,{children:"executes durably"}),": if it is ever interrupted, it automatically resumes from the last completed step, completing the story and posting it to Slack.\nIt is also ",(0,t.jsx)(n.em,{children:"idempotent"}),", using the version number you provide as an idempotency key (through ",(0,t.jsx)(n.code,{children:"SetWorkflowID"}),").\nThat way, if you submit multiple requests for the same version, the workflow only executes once and subsequent re-executions with the same version number return the same story and don't re-post to Slack."]}),"\n",(0,t.jsxs)(n.p,{children:["Now you know how to build a reliable AI app! This is just the beginning of your DBOS journey. Check out the ",(0,t.jsx)(n.a,{href:"/python/programming-guide",children:"Python guide"})," to learn more or try out more ",(0,t.jsx)(n.a,{href:"../../examples",children:"examples"})," of apps you can build with DBOS."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(6540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);