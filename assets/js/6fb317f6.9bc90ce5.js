"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7402],{6908:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>h,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"explanations/system-tables","title":"DBOS System Tables","description":"DBOS system tables reference","source":"@site/docs/explanations/system-tables.md","sourceDirName":"explanations","slug":"/explanations/system-tables","permalink":"/explanations/system-tables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"DBOS System Tables","description":"DBOS system tables reference"},"sidebar":"tutorialSidebar","previous":{"title":"How Workflows Work","permalink":"/explanations/how-workflows-work"},"next":{"title":"Troubleshooting & FAQ","permalink":"/faq"}}');var i=n(4848),o=n(8453);const r={sidebar_position:10,title:"DBOS System Tables",description:"DBOS system tables reference"},l=void 0,h={},d=[{value:"System Tables",id:"system-tables",level:2},{value:"dbos.workflow_status",id:"dbosworkflow_status",level:3},{value:"dbos.operation_outputs",id:"dbosoperation_outputs",level:3},{value:"dbos.notifications",id:"dbosnotifications",level:3},{value:"dbos.workflow_events",id:"dbosworkflow_events",level:3},{value:"dbos.streams",id:"dbosstreams",level:3}];function a(e){const s={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"system-tables",children:"System Tables"}),"\n",(0,i.jsxs)(s.p,{children:["DBOS records application execution history in several system tables.\nThese tables are located in your system database, whose name by default is your application name suffixed with ",(0,i.jsx)(s.code,{children:"_dbos_sys"}),".\nFor example, if your application is named ",(0,i.jsx)(s.code,{children:"dbos_app_starter"}),", your system database is by default named ",(0,i.jsx)(s.code,{children:"dbos_app_starter_dbos_sys"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"dbosworkflow_status",children:"dbos.workflow_status"}),"\n",(0,i.jsx)(s.p,{children:"This table stores workflow execution information.\nEach row represents a different workflow execution."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Columns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"workflow_uuid"}),": The unique identifier of the workflow execution."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"status"}),": The status of the workflow execution. One of ",(0,i.jsx)(s.code,{children:"PENDING"}),", ",(0,i.jsx)(s.code,{children:"SUCCESS"}),", ",(0,i.jsx)(s.code,{children:"ERROR"}),", ",(0,i.jsx)(s.code,{children:"MAX_RECOVERY_ATTEMPTS_EXCEEDED"}),", or ",(0,i.jsx)(s.code,{children:"CANCELLED"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"name"}),": The name (in Python, fully qualified name) of the workflow function."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"authenticated_user"}),": The user who ran the workflow. Empty string if not set."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"assumed_role"}),": The role used to run this workflow.  Empty string if authorization is not required."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"authenticated_roles"}),": All roles the authenticated user has, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"request"}),": The serialized HTTP Request that triggered this workflow, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"inputs"}),": The serialized inputs of the workflow execution."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"output"}),": The serialized workflow output, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"error"}),": The serialized error thrown by the workflow, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"created_at"}),": The epoch timestamp of when this workflow was created (enqueued or started)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"updated_at"}),": The latest epoch timestamp when this workflow status was updated."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"application_version"}),": The application version of this workflow code."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"class_name"}),": The class name of the workflow function."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"config_name"}),": The name of the configured instance of this workflow, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"recovery_attempts"}),": The number of attempts (so far) to recovery this workflow."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"queue_name"}),": If this workflow is or was enqueued, the name of the queue."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"executor_id"}),": The ID of the executor that ran this workflow."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"workflow_timeout_ms"}),": The timeout of the workflow, if specified."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"workflow_deadline_epoch_ms"}),": The deadline at which the workflow times out, if the workflow has a timeout. Derived when the workflow starts by adding the timeout to the workflow start time (which may be different than the creation time for enqueued workflows)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"started_at_epoch_ms"}),": If this workflow was enqueued, the time at which it was dequeued and began excution."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"deduplication_id"}),": The deduplication key for this workflow, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"priority"}),": The priority of this workflow on its queue, if enqueued. Defaults to 0 if not specified. Lower priorities execute first."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dbosoperation_outputs",children:"dbos.operation_outputs"}),"\n",(0,i.jsxs)(s.p,{children:["This table stores the outputs of workflow steps.\nEach row represents a different workflow step execution.\nExecutions of DBOS methods like ",(0,i.jsx)(s.code,{children:"DBOS.sleep"})," and ",(0,i.jsx)(s.code,{children:"DBOS.send"})," are also recorded here as steps, as is enqueueing or starting a child workflow."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Columns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"workflow_uuid"}),": The unique identifier of the workflow execution this function belongs to."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"function_id"}),": The monotonically increasing ID of the step (starts from 0) within the workflow, based on the order in which steps execute."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"function_name"}),": The name of the step."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"output"}),": The serialized step output, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"error"}),": The serialized error thrown by the step, if any."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"child_workflow_id"}),": If the step starts a new child workflow, its ID."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dbosnotifications",children:"dbos.notifications"}),"\n",(0,i.jsx)(s.p,{children:"This table stores workflow messages/notifications.\nEach entry represents a different message."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Columns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"destination_uuid"}),": The ID of the workflow to which the message is sent."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"topic"}),": The topic to which the message is sent."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"message"}),": The serialized contents of the message."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"created_at_epoch_ms"}),": The epoch timestamp when this message was created."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"message_uuid"}),": The unique ID of the message."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dbosworkflow_events",children:"dbos.workflow_events"}),"\n",(0,i.jsx)(s.p,{children:"This table stores workflow events.\nEach entry represents a different event."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Columns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"workflow_uuid"}),": The ID of the workflow that published this event."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"key"}),": The serialized key of the event."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"value"}),": The serialized value of the event."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dbosstreams",children:"dbos.streams"}),"\n",(0,i.jsx)(s.p,{children:"This table stores workflow streams.\nEach entry represents a different message in a stream."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Columns:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"workflow_uuid"}),": The ID of the workflow that wrote this stream message."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"key"}),": The serialized key of the stream."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"value"}),": The serialized value of the message."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"offset"}),": The offset of the message in the stream (the first message written has offset 0, the second offset 1, and so on)."]}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(6540);const i={},o=t.createContext(i);function r(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);