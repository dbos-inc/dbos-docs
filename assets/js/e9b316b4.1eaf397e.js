"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[2067],{9951:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"golang/programming-guide","title":"Learn DBOS Go","description":"This guide shows you how to use DBOS to build Go apps that are resilient to any failure.","source":"@site/docs/golang/programming-guide.md","sourceDirName":"golang","slug":"/golang/programming-guide","permalink":"/golang/programming-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Learn DBOS Go","pagination_prev":"quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"Get Started with DBOS","permalink":"/quickstart"},"next":{"title":"Add DBOS To Your App","permalink":"/golang/integrating-dbos"}}');var r=t(4848),s=t(8453);const i={sidebar_position:10,title:"Learn DBOS Go",pagination_prev:"quickstart"},a=void 0,l={},d=[{value:"1. Setting Up Your Environment",id:"1-setting-up-your-environment",level:2},{value:"2. Workflows and Steps",id:"2-workflows-and-steps",level:2},{value:"3. Queues and Parallelism",id:"3-queues-and-parallelism",level:2}];function c(n){const e={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["This guide shows you how to use DBOS to build Go apps that are ",(0,r.jsx)(e.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"1-setting-up-your-environment",children:"1. Setting Up Your Environment"}),"\n",(0,r.jsx)(e.p,{children:"In an empty directory, initialize a new Go project and install DBOS:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"go mod init dbos-starter\ngo get github.com/dbos-inc/dbos-transact-golang/dbos\n"})}),"\n",(0,r.jsxs)(e.p,{children:["DBOS requires a Postgres database.\nIf you don't already have Postgres, you can install the DBOS Go CLI with ",(0,r.jsx)(e.a,{href:"https://pkg.go.dev/cmd/go#hdr-Compile_and_install_packages_and_dependencies",children:"go install"})," and start Postgres in a Docker container with these commands:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"go install github.com/dbos-inc/dbos-transact-golang/cmd/dbos@latest\ndbos postgres start\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Then set the ",(0,r.jsx)(e.code,{children:"DBOS_SYSTEM_DATABASE_URL"})," environment variable to your connection string (later we'll pass that value into DBOS).\nFor example:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"export DBOS_SYSTEM_DATABASE_URL=postgres://postgres:dbos@localhost:5432/dbos_starter_go\n"})}),"\n",(0,r.jsx)(e.h2,{id:"2-workflows-and-steps",children:"2. Workflows and Steps"}),"\n",(0,r.jsxs)(e.p,{children:["DBOS helps you add reliability to Go programs.\nThe key feature of DBOS is ",(0,r.jsx)(e.strong,{children:"workflow functions"})," comprised of ",(0,r.jsx)(e.strong,{children:"steps"}),".\nDBOS automatically provides durability by checkpointing the state of your workflows and steps to its system database.\nIf your program crashes or is interrupted, DBOS uses this saved state to recover each of your workflows from its last completed step.\nThus, DBOS makes your application ",(0,r.jsx)(e.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Let's create a simple DBOS program that runs a workflow of two steps.\nCreate a file named ",(0,r.jsx)(e.code,{children:"main.go"})," and add the following code to it:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",metastring:'showLineNumbers title="main.go"',children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "os"\n    "time"\n\n    "github.com/dbos-inc/dbos-transact-golang/dbos"\n)\n\nfunc workflow(ctx dbos.DBOSContext, _ string) (string, error) {\n    _, err := dbos.RunAsStep(ctx, stepOne)\n    if err != nil {\n        return "failure", err\n    }\n    _, err = dbos.RunAsStep(ctx, stepTwo)\n    if err != nil {\n        return "failure", err\n    }\n    return "success", err\n}\n\nfunc stepOne(ctx context.Context) (string, error) {\n    fmt.Println("Step one completed")\n    return "success", nil\n}\n\nfunc stepTwo(ctx context.Context) (string, error) {\n    fmt.Println("Step two completed")\n    return "success", nil\n}\n\nfunc main() {\n    dbosContext, err := dbos.NewDBOSContext(context.Background(), dbos.Config{\n        AppName:     "dbos-starter",\n        DatabaseURL: os.Getenv("DBOS_SYSTEM_DATABASE_URL"),\n    })\n    if err != nil {\n        panic(fmt.Sprintf("Initializing DBOS failed: %v", err))\n    }\n\n    dbos.RegisterWorkflow(dbosContext, workflow)\n\n    err = dbos.Launch(dbosContext)\n    if err != nil {\n        panic(fmt.Sprintf("Launching DBOS failed: %v", err))\n    }\n    defer dbos.Shutdown(dbosContext, 5 * time.Second)\n\n    handle, err := dbos.RunWorkflow(dbosContext, workflow, "")\n    if err != nil {\n        panic(fmt.Sprintf("Error in DBOS workflow: %v", err))\n    }\n    result, err := handle.GetResult()\n    if err != nil {\n        panic(fmt.Sprintf("Error in DBOS workflow: %v", err))\n    }\n    fmt.Println("Workflow result:", result)\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Now, install dependencies and run this code with:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"go mod tidy\ngo run main.go\n"})}),"\n",(0,r.jsx)(e.p,{children:"Your program should print output like:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"Step one completed\nStep two completed\nWorkflow result: success\n"})}),"\n",(0,r.jsxs)(e.p,{children:["To see durable execution in action, let's modify the app to serve a DBOS workflow from an HTTP endpoint using Gin.\nReplace the contents of ",(0,r.jsx)(e.code,{children:"main.go"})," with:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",metastring:'showLineNumbers title="main.go"',children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "net/http"\n    "os"\n    "time"\n\n    "github.com/dbos-inc/dbos-transact-golang/dbos"\n    "github.com/gin-gonic/gin"\n)\n\nfunc workflow(ctx dbos.DBOSContext, _ string) (string, error) {\n    _, err := dbos.RunAsStep(ctx, stepOne)\n    if err != nil {\n        return "failure", err\n    }\n    for range 5 {\n        fmt.Println("Press Control + C to stop the app...")\n        dbos.Sleep(ctx, time.Second)\n    }\n    _, err = dbos.RunAsStep(ctx, stepTwo)\n    if err != nil {\n        return "failure", err\n    }\n    return "success", err\n}\n\nfunc stepOne(ctx context.Context) (string, error) {\n    fmt.Println("Step one completed")\n    return "success", nil\n}\n\nfunc stepTwo(ctx context.Context) (string, error) {\n    fmt.Println("Step two completed")\n    return "success", nil\n}\n\nfunc main() {\n    dbosContext, err := dbos.NewDBOSContext(context.Background(), dbos.Config{\n        AppName:     "dbos-starter",\n        DatabaseURL: os.Getenv("DBOS_SYSTEM_DATABASE_URL"),\n    })\n    if err != nil {\n        panic(fmt.Sprintf("Initializing DBOS failed: %v", err))\n    }\n\n    dbos.RegisterWorkflow(dbosContext, workflow)\n\n    err = dbos.Launch(dbosContext)\n    if err != nil {\n        panic(fmt.Sprintf("Launching DBOS failed: %v", err))\n    }\n    defer dbos.Shutdown(dbosContext, 5 * time.Second)\n\n    r := gin.Default()\n\n    r.GET("/", func(c *gin.Context) {\n        dbos.RunWorkflow(dbosContext, workflow, "")\n        if err != nil {\n            c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Error in DBOS workflow: %v", err)})\n            return\n        }\n        c.Status(http.StatusOK)\n    })\n\n    r.Run(":8080")\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Now, install dependencies and run this code with:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"go mod tidy\ngo run main.go\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Then, visit this URL: ",(0,r.jsx)(e.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),"."]}),"\n",(0,r.jsx)(e.p,{children:"In your terminal, you should see an output like:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'[GIN-debug] Listening and serving HTTP on :8080\n[GIN] 2025/08/19 - 14:31:56 | 200 |     6.08315ms |             ::1 | GET      "/"\nStep one completed\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Now, press CTRL+C stop your app. Then, run ",(0,r.jsx)(e.code,{children:"go run main.go"})," to restart it. You should see an output like:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"[GIN-debug] Listening and serving HTTP on :8080\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nStep two completed\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can see how DBOS ",(0,r.jsx)(e.strong,{children:"recovers your workflow from the last completed step"}),", executing step two without re-executing step one.\nLearn more about workflows, steps, and their guarantees ",(0,r.jsx)(e.a,{href:"/golang/tutorials/workflow-tutorial",children:"here"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"3-queues-and-parallelism",children:"3. Queues and Parallelism"}),"\n",(0,r.jsxs)(e.p,{children:["To run many functions concurrently, use DBOS ",(0,r.jsx)(e.em,{children:"queues"}),".\nTo try them out, copy this code into ",(0,r.jsx)(e.code,{children:"main.go"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",metastring:'showLineNumbers title="main.go"',children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "net/http"\n    "os"\n    "time"\n\n    "github.com/dbos-inc/dbos-transact-golang/dbos"\n    "github.com/gin-gonic/gin"\n)\n\nfunc taskWorkflow(ctx dbos.DBOSContext, i int) (int, error) {\n    dbos.Sleep(ctx, 5*time.Second)\n    fmt.Printf("Task %d completed\\n", i)\n    return i, nil\n}\n\nfunc queueWorkflow(ctx dbos.DBOSContext, queue dbos.WorkflowQueue) (int, error) {\n    fmt.Println("Enqueuing tasks")\n    handles := make([]dbos.WorkflowHandle[int], 10)\n    for i := range 10 {\n        handle, err := dbos.RunWorkflow(ctx, taskWorkflow, i, dbos.WithQueue(queue.Name))\n        if err != nil {\n            return 0, err\n        }\n        handles[i] = handle\n    }\n    results := make([]int, 10)\n    for i, handle := range handles {\n        result, err := handle.GetResult()\n        if err != nil {\n            return 0, err\n        }\n        results[i] = result\n    }\n    fmt.Printf("Successfully completed %d tasks\\n", len(results))\n    return len(results), nil\n}\n\nfunc main() {\n    dbosContext, err := dbos.NewDBOSContext(context.Background(), dbos.Config{\n        AppName:     "dbos-starter",\n        DatabaseURL: os.Getenv("DBOS_SYSTEM_DATABASE_URL"),\n    })\n    if err != nil {\n        panic(fmt.Sprintf("Initializing DBOS failed: %v", err))\n    }\n\n    queue := dbos.NewWorkflowQueue(dbosContext, "queue")\n    dbos.RegisterWorkflow(dbosContext, queueWorkflow)\n    dbos.RegisterWorkflow(dbosContext, taskWorkflow)\n\n    err = dbos.Launch(dbosContext)\n    if err != nil {\n        panic(fmt.Sprintf("Launching DBOS failed: %v", err))\n    }\n    defer dbos.Shutdown(dbosContext, 5 * time.Second)\n\n    r := gin.Default()\n\n    r.GET("/", func(c *gin.Context) {\n        dbos.RunWorkflow(dbosContext, queueWorkflow, queue)\n        if err != nil {\n            c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Error in DBOS workflow: %v", err)})\n            return\n        }\n        c.Status(http.StatusOK)\n    })\n\n    r.Run(":8080")\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["When you enqueue a function by passing ",(0,r.jsx)(e.code,{children:"dbos.WithQueue(queue.Name)"})," into ",(0,r.jsx)(e.code,{children:"dbos.RunWorkflow"}),", DBOS executes it ",(0,r.jsx)(e.em,{children:"asynchronously"}),", running it in the background without waiting for it to finish.\n",(0,r.jsx)(e.code,{children:"dbos.RunWorkflow"})," returns a handle representing the state of the enqueued function.\nThis example enqueues ten functions, then waits for them all to finish using ",(0,r.jsx)(e.code,{children:".GetResult()"})," to wait for each of their handles."]}),"\n",(0,r.jsx)(e.p,{children:"Now, restart your app with:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"go run main.go\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Then, visit this URL: ",(0,r.jsx)(e.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),".\nWait five seconds and you should see an output like:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'[GIN-debug] Listening and serving HTTP on :8080\n[GIN] 2025/08/19 - 14:42:14 | 200 |    6.961186ms |             ::1 | GET      "/"\nEnqueuing tasks\nTask 0 completed\nTask 2 completed\nTask 1 completed\nTask 4 completed\nTask 3 completed\nTask 5 completed\nTask 6 completed\nTask 7 completed\nTask 8 completed\nTask 9 completed\nSuccessfully completed 10 tasks\n'})}),"\n",(0,r.jsxs)(e.p,{children:["You can see how all ten steps run concurrently\u2014even though each takes five seconds, they all finish at the same time.\nLearn more about DBOS queues ",(0,r.jsx)(e.a,{href:"/golang/tutorials/queue-tutorial",children:"here"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Congratulations! You've finished the DBOS Golang guide.\nYou can find the code from this guide in the ",(0,r.jsx)(e.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/golang/dbos-toolbox",children:"DBOS Toolbox"})," template app."]}),"\n",(0,r.jsxs)(e.p,{children:["Next, to learn how to build more complex applications, check out the Go tutorials and ",(0,r.jsx)(e.a,{href:"/examples/",children:"example apps"}),"."]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);