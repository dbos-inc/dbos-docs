"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9059],{3593:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"python/examples/stock-tracker","title":"Stocks Tracker","description":"In this example, we use DBOS to build and deploy an app that tracks stock prices and send SMS alerts when the price of a stock crosses a certain threshold. We certainly don\'t want to miss a good opportunity to trade, so it\'s important this workflow is punctual and reliable!","source":"@site/docs/python/examples/stock-tracker.md","sourceDirName":"python/examples","slug":"/python/examples/stock-tracker","permalink":"/python/examples/stock-tracker","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":10,"title":"Stocks Tracker"},"sidebar":"examplesSidebar","previous":{"title":"Earthquake Tracker","permalink":"/python/examples/earthquake-tracker"},"next":{"title":"Cloud Cron Quickstart","permalink":"/python/examples/cron-starter"}}');var r=s(4848),i=s(8453);const a={displayed_sidebar:"examplesSidebar",sidebar_position:10,title:"Stocks Tracker"},o=void 0,l={},c=[{value:"Import and Initialize the App",id:"import-and-initialize-the-app",level:2},{value:"Stock Prices Watcher as an online cron job",id:"stock-prices-watcher-as-an-online-cron-job",level:2},{value:"Fetching stock prices",id:"fetching-stock-prices",level:2},{value:"Sending SMS alerts",id:"sending-sms-alerts",level:2},{value:"Saving stock prices to the database and fetching registered alerts",id:"saving-stock-prices-to-the-database-and-fetching-registered-alerts",level:2},{value:"Initializing the app",id:"initializing-the-app",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"In this example, we use DBOS to build and deploy an app that tracks stock prices and send SMS alerts when the price of a stock crosses a certain threshold. We certainly don't want to miss a good opportunity to trade, so it's important this workflow is punctual and reliable!"}),"\n",(0,r.jsxs)(t.p,{children:["You can see the application live ",(0,r.jsx)(t.a,{href:"https://max-stock-prices.cloud.dbos.dev/",children:"here"}),". All source code is ",(0,r.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/stock-prices",children:"available on GitHub"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"import-and-initialize-the-app",children:"Import and Initialize the App"}),"\n",(0,r.jsx)(t.p,{children:"Let's start off by importing the necessary libraries and initializing the app."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"import os\nimport datetime\nimport threading\nimport yfinance as yf\nfrom twilio.rest import Client\nfrom dbos import DBOS\nfrom schema import stock_prices, alerts\n\nDBOS()\n"})}),"\n",(0,r.jsx)(t.h2,{id:"stock-prices-watcher-as-an-online-cron-job",children:"Stock Prices Watcher as an online cron job"}),"\n",(0,r.jsxs)(t.p,{children:["We'll use a ",(0,r.jsx)(t.a,{href:"../tutorials/scheduled-workflows",children:"DBOS Scheduled Workflow"})," to make this job punctual and reliable.\nUnder the hood, DBOS leverages Postgres to store the job's execution status and schedule, ensuring that the job is executed even if the server is restarted."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"@DBOS.scheduled('* * * * *')\n@DBOS.workflow()\ndef fetch_stock_prices_workflow(scheduled_time: datetime, actual_time: datetime):\n    # For simplicity, let's declare inline a list of stock symbols to track\n    symbols = ['AAPL', 'GOOGL', 'AMZN', 'MSFT', 'TSLA', 'NVDA']\n    # Fetch registered alerts\n    registered_alerts = fetch_alerts()\n    # Fetch stock prices for each symbol\n    for symbol in symbols:\n        price = fetch_stock_price(symbol)\n        save_to_db(symbol, price)\n        # If there is a registered alert for that symbol, send a SMS if the price is above the alert threshold\n        if registered_alerts and symbol in registered_alerts:\n            if price > registered_alerts[symbol].price_threshold:\n                send_sms_alert(symbol, price, registered_alerts[symbol].phone_number)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"fetching-stock-prices",children:"Fetching stock prices"}),"\n",(0,r.jsxs)(t.p,{children:["We'll use the ",(0,r.jsx)(t.code,{children:"yfinance"})," library to fetch stock prices and write a DBOS ",(0,r.jsx)(t.a,{href:"../tutorials/step-tutorial",children:"step"})," to make it durable."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'@DBOS.step()\ndef fetch_stock_price(symbol):\n    stock = yf.Ticker(symbol)\n    data = stock.history(period="1d")\n    if data.empty:\n        raise ValueError("No stock data found for the symbol.")\n    DBOS.logger.info(f"Stock price for {symbol} is {data[\'Close\'].iloc[0]}")\n    return data[\'Close\'].iloc[0]\n'})}),"\n",(0,r.jsx)(t.h2,{id:"sending-sms-alerts",children:"Sending SMS alerts"}),"\n",(0,r.jsxs)(t.p,{children:["We'll use the Twilio API to send SMS alerts and write a DBOS ",(0,r.jsx)(t.a,{href:"../tutorials/step-tutorial",children:"step"})," to make it durable. You can sign up for a free Twilio account at ",(0,r.jsx)(t.a,{href:"https://www.twilio.com/try-twilio",children:"https://www.twilio.com/try-twilio"}),". We'll need a few environment variables to store our Twilio account SID, auth token and phone number. The alerts themselves are configured on the app's streamlit frontend."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"twilio_account_sid = os.environ.get('TWILIO_ACCOUNT_SID')\ntwilio_auth_token = os.environ.get('TWILIO_AUTH_TOKEN')\ntwilio_phone_number = os.environ.get('TWILIO_PHONE_NUMBER')\n@DBOS.step()\ndef send_sms_alert(symbol, price, to_phone_number):\n    client = Client(twilio_account_sid, twilio_auth_token)\n    message = client.messages.create(\n        body=f\"{symbol} stock price is {price}.\",\n        from_=twilio_phone_number,\n        to=to_phone_number\n    )\n    DBOS.logger.info(f\"SMS sent: {message.sid}\")\n"})}),"\n",(0,r.jsx)(t.h2,{id:"saving-stock-prices-to-the-database-and-fetching-registered-alerts",children:"Saving stock prices to the database and fetching registered alerts"}),"\n",(0,r.jsxs)(t.p,{children:["Let's write two small functions to retrieve registered alerts and save stock prices to the database.\nWe'll use DBOS ",(0,r.jsx)(t.a,{href:"../tutorials/transaction-tutorial",children:"Transactions"})," to make these steps durable and ensure they happen exactly once."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"@DBOS.transaction()\ndef save_to_db(symbol, price):\n    DBOS.sql_session.execute(stock_prices.insert().values(stock_symbol=symbol, stock_price=price))\n\n@DBOS.transaction()\ndef fetch_alerts():\n    query = alerts.select()\n    return {alert.stock_symbol:alert for alert in DBOS.sql_session.execute(query).fetchall()}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"initializing-the-app",children:"Initializing the app"}),"\n",(0,r.jsx)(t.p,{children:"Finally, let's initialize the app. We'll launch DBOS and have the main thread sleep forever while the background threads run."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'if __name__ == "__main__":\n    DBOS.launch()\n    threading.Event().wait()\n'})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);