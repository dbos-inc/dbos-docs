"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),k=r,m=u["".concat(s,".").concat(k)]||u[k]||d[k]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4,title:"Operon Contexts Reference",description:"API documentation for Operon Contexts"},i="Operon Context Reference",l={unversionedId:"api-reference/contexts",id:"api-reference/contexts",title:"Operon Contexts Reference",description:"API documentation for Operon Contexts",source:"@site/docs/api-reference/contexts.md",sourceDirName:"api-reference",slug:"/api-reference/contexts",permalink:"/operon-docs/api-reference/contexts",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Operon Contexts Reference",description:"API documentation for Operon Contexts"},sidebar:"tutorialSidebar",previous:{title:"Decorator Reference",permalink:"/operon-docs/api-reference/decorators"},next:{title:"Workflow Handles",permalink:"/operon-docs/api-reference/workflow-handles"}},s={},p=[{value:"Background Information",id:"background-information",level:2},{value:"Contexts Reference",id:"contexts-reference",level:2},{value:"<code>OperonContext</code>",id:"operoncontext",level:3},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods",level:4},{value:"ctxt.request",id:"ctxtrequest",level:4},{value:"ctxt.workflowUUID",id:"ctxtworkflowuuid",level:4},{value:"ctxt.authenticatedUser",id:"ctxtauthenticateduser",level:4},{value:"ctxt.logger",id:"ctxtlogger",level:4},{value:"ctxt.span",id:"ctxtspan",level:4},{value:"ctxt.getConfig(key)",id:"ctxtgetconfigkey",level:4},{value:"<code>HandlerContext</code>",id:"handlercontext",level:3},{value:"Properties",id:"properties-1",level:4},{value:"Methods",id:"methods-1",level:4},{value:"handlerCtxt.koaContext",id:"handlerctxtkoacontext",level:4},{value:"handlerCtxt.invoke(targetClass, [workflowUUID])",id:"handlerctxtinvoketargetclass-workflowuuid",level:4},{value:"handlerCtxt.retrieveWorkflow(workflowUUID)",id:"handlerctxtretrieveworkflowworkflowuuid",level:4},{value:"handlerCtxt.send(destinationUUID, message, [topic, idempotencyKey])",id:"handlerctxtsenddestinationuuid-message-topic-idempotencykey",level:4},{value:"handlerCtxt.getEvent(workflowUUID, key, [timeoutSeconds])",id:"handlerctxtgeteventworkflowuuid-key-timeoutseconds",level:4},{value:"<code>WorkflowContext</code>",id:"workflowcontext",level:3},{value:"Methods",id:"methods-2",level:4},{value:"workflowCtxt.invoke(targetClass)",id:"workflowctxtinvoketargetclass",level:4},{value:"workflowCtxt.childWorkflow(wf, ...args)",id:"workflowctxtchildworkflowwf-args",level:4},{value:"workflowCtxt.send(destinationUUID, message, [topic])",id:"workflowctxtsenddestinationuuid-message-topic",level:4},{value:"workflowCtxt.recv([topic, timeoutSeconds])",id:"workflowctxtrecvtopic-timeoutseconds",level:4},{value:"workflowCtxt.setEvent(key, value)",id:"workflowctxtseteventkey-value",level:4},{value:"<code>TransactionContext&lt;T&gt;</code>",id:"transactioncontextt",level:3},{value:"Generic Type Parameter",id:"generic-type-parameter",level:4},{value:"Properties",id:"properties-2",level:4},{value:"transactionCtxt.client",id:"transactionctxtclient",level:4},{value:"<code>CommunicatorContext</code>",id:"communicatorcontext",level:3},{value:"Properties",id:"properties-3",level:4},{value:"communicatorCtxt.retriesAllowed",id:"communicatorctxtretriesallowed",level:4},{value:"communicatorCtxt.maxAttempts",id:"communicatorctxtmaxattempts",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"operon-context-reference"},"Operon Context Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#background-information"},"Background Information")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#contexts-reference"},"Contexts Reference"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#operoncontext"},(0,r.kt)("inlineCode",{parentName:"a"},"OperonContext"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handlercontext"},(0,r.kt)("inlineCode",{parentName:"a"},"HandlerContext"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#workflowcontext"},(0,r.kt)("inlineCode",{parentName:"a"},"WorkflowContext"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#transactioncontextt"},(0,r.kt)("inlineCode",{parentName:"a"},"TransactionContext<T>"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#communicatorcontext"},(0,r.kt)("inlineCode",{parentName:"a"},"CommunicatorContext")))))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"background-information"},"Background Information"),(0,r.kt)("p",null,"Each Operon function has a ",(0,r.kt)("em",{parentName:"p"},"context")," it can use to call other functions, interact with the runtime, and interact with the database.\nContexts are created by the runtime and always passed in as a function's first argument.\nDifferent types of functions use different types of contexts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All contexts inherit from the base ",(0,r.kt)("a",{parentName:"li",href:"#operoncontext"},(0,r.kt)("inlineCode",{parentName:"a"},"OperonContext")),"."),(0,r.kt)("li",{parentName:"ul"},"Handlers use ",(0,r.kt)("a",{parentName:"li",href:"#handlercontext"},(0,r.kt)("inlineCode",{parentName:"a"},"HandlerContext")),"."),(0,r.kt)("li",{parentName:"ul"},"Workflows use ",(0,r.kt)("a",{parentName:"li",href:"#workflowcontext"},(0,r.kt)("inlineCode",{parentName:"a"},"WorkflowContext")),"."),(0,r.kt)("li",{parentName:"ul"},"Transactions use ",(0,r.kt)("a",{parentName:"li",href:"#transactioncontextt"},(0,r.kt)("inlineCode",{parentName:"a"},"TransactionContext<T>"))," with a specific database client type."),(0,r.kt)("li",{parentName:"ul"},"Communicators use ",(0,r.kt)("a",{parentName:"li",href:"#communicatorcontext"},(0,r.kt)("inlineCode",{parentName:"a"},"CommunicatorContext")),".")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"contexts-reference"},"Contexts Reference"),(0,r.kt)("h3",{id:"operoncontext"},(0,r.kt)("inlineCode",{parentName:"h3"},"OperonContext")),(0,r.kt)("p",null,"All contexts inherit from ",(0,r.kt)("inlineCode",{parentName:"p"},"OperonContext")," and share its properties and methods."),(0,r.kt)("h4",{id:"properties"},"Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ctxtrequest"},"request")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ctxtworkflowuuid"},"workflowUUID")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ctxtauthenticateduser"},"authenticatedUser")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ctxtlogger"},"logger")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ctxtspan"},"span"))),(0,r.kt)("h4",{id:"methods"},"Methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ctxtgetconfigkey"},"getConfig(key)"))),(0,r.kt)("h4",{id:"ctxtrequest"},"ctxt.request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly request: HTTPRequest\n")),(0,r.kt)("p",null,"This property exposes an HTTP request object, which contains details about the originating HTTP request that triggered this function, either directly or through its calling chain.\nIt has the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface HTTPRequest {\n  readonly headers?: IncomingHttpHeaders;  // A node's http.IncomingHttpHeaders object.\n  readonly rawHeaders?: string[];          // Raw headers.\n  readonly params?: unknown;               // Parsed path parameters from the URL.\n  readonly body?: unknown;                 // parsed HTTP body as an object.\n  readonly rawBody?: string;               // Unparsed raw HTTP body string.\n  readonly query?: ParsedUrlQuery;         // Parsed query string.\n  readonly querystring?: string;           // Unparsed raw query string.\n  readonly url?: string;                   // Request URL.\n  readonly ip?: string;                    // Request remote address.\n}\n")),(0,r.kt)("h4",{id:"ctxtworkflowuuid"},"ctxt.workflowUUID"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly workflowUUID: string\n")),(0,r.kt)("p",null,"This property exposes the current workflow's ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/workflow-tutorial#workflow-identity"},"identity UUID"),", a 128-bit UUID in string format that uniquely identifies that workflow's execution.\nIn a transaction or communicator, this field is set to the identity UUID of the calling workflow.\nIn a handler, this field is empty."),(0,r.kt)("h4",{id:"ctxtauthenticateduser"},"ctxt.authenticatedUser"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly authenticatedUser: string\n")),(0,r.kt)("p",null,"This property exposes the identity of the authenticated user who ran this function.\nAuthenticated users are set by ",(0,r.kt)("a",{parentName:"p",href:".."},"authentication middleware")," and inherited through the calling chain."),(0,r.kt)("h4",{id:"ctxtlogger"},"ctxt.logger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly logger: OperonLogger\n")),(0,r.kt)("p",null,"This property provides access to Operon's logging functionality.\nPlease see our ",(0,r.kt)("a",{parentName:"p",href:"/operon-docs/tutorials/logging#logging"},"logging tutorial")," for more information."),(0,r.kt)("h4",{id:"ctxtspan"},"ctxt.span"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly span: Span\n")),(0,r.kt)("p",null,"This property provides access to an ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/concepts/signals/traces/#spans"},"OpenTelemetry Span")," associated with this function.\nYou can assign custom trace attributes to this span.\nPlease see our ",(0,r.kt)("a",{parentName:"p",href:"/operon-docs/tutorials/logging#tracing"},"tracing tutorial")," for more information."),(0,r.kt)("h4",{id:"ctxtgetconfigkey"},"ctxt.getConfig(key)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"getConfig(key: string): any\n")),(0,r.kt)("p",null,"This method retrieves a custom property value specified in ",(0,r.kt)("a",{parentName:"p",href:"/operon-docs/api-reference/configuration#application-configuration"},"application configuration"),"."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"handlercontext"},(0,r.kt)("inlineCode",{parentName:"h3"},"HandlerContext")),(0,r.kt)("p",null,"Handlers use ",(0,r.kt)("inlineCode",{parentName:"p"},"HandlerContext")," to invoke other functions, interact with active workflows, and interact directly with HTTP requests and resposes."),(0,r.kt)("h4",{id:"properties-1"},"Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handlerctxtkoacontext"},"koaContext"))),(0,r.kt)("h4",{id:"methods-1"},"Methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handlerctxtinvoketargetclass-workflowuuid"},"invoke(targetClass, ","[","workflowUUID","]",")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handlerctxtretrieveworkflowworkflowuuid"},"retrieveWorkflow(workflowUUID)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handlerctxtsenddestinationuuid-message-topic-idempotencykey"},"send(destinationUUID, message, ","[","topic, idempotencyKey","]",")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#handlerctxtgeteventworkflowuuid-key-timeoutseconds"},"getEvent(workflowUUID, key, ","[","timeoutSeconds","]",")"))),(0,r.kt)("h4",{id:"handlerctxtkoacontext"},"handlerCtxt.koaContext"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"koaContext: Koa.Context;\n")),(0,r.kt)("p",null,"This property exposes the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/koajs/koa/blob/master/docs/api/context.md"},"Koa Context")," of the current request, giving handlers access to the raw HTTP request and response."),(0,r.kt)("h4",{id:"handlerctxtinvoketargetclass-workflowuuid"},"handlerCtxt.invoke(targetClass, ","[","workflowUUID","]",")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"invoke<T>(targetClass: T, workflowUUID?: string): InvokeFuncs<T>\n")),(0,r.kt)("p",null,"Handlers use ",(0,r.kt)("inlineCode",{parentName:"p"},"invoke()")," to invoke other functions, specifically workflows, transactions, and communicators."),(0,r.kt)("p",null,"The syntax for invoking function ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," in class ",(0,r.kt)("inlineCode",{parentName:"p"},"Bar")," with argument ",(0,r.kt)("inlineCode",{parentName:"p"},"baz")," is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"handlerCtxt.invoke(Bar).foo(baz)\n")),(0,r.kt)("p",null,"You don't need to supply the context to an invoked function","\u2014","the runtime does this for you."),(0,r.kt)("p",null,"When calling transactions or communicators, ",(0,r.kt)("inlineCode",{parentName:"p"},"invoke()")," asynchronously returns the function's output.\nWhen calling workflows, ",(0,r.kt)("inlineCode",{parentName:"p"},"invoke()")," asynchronously returns a ",(0,r.kt)("a",{parentName:"p",href:"./workflow-handles"},(0,r.kt)("inlineCode",{parentName:"a"},"handle"))," for the workflow."),(0,r.kt)("p",null,"You can optionally provide a UUID idempotency key to the invoked function.\nFor more information, see our ",(0,r.kt)("a",{parentName:"p",href:"/operon-docs/tutorials/idempotency-tutorial"},"idempotency tutorial"),"."),(0,r.kt)("h4",{id:"handlerctxtretrieveworkflowworkflowuuid"},"handlerCtxt.retrieveWorkflow(workflowUUID)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"retrieveWorkflow<R>(workflowUUID: string): WorkflowHandle<R>\n")),(0,r.kt)("p",null,"This method returns a ",(0,r.kt)("a",{parentName:"p",href:"/operon-docs/api-reference/workflow-handles"},"workflow handle")," for the workflow with the input ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/workflow-tutorial#workflow-identity"},"identity UUID"),".\nThe type ",(0,r.kt)("inlineCode",{parentName:"p"},"R")," is the return type of the target workflow."),(0,r.kt)("h4",{id:"handlerctxtsenddestinationuuid-message-topic-idempotencykey"},"handlerCtxt.send(destinationUUID, message, ","[","topic, idempotencyKey","]",")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"send<T extends NonNullable<any>>(destinationUUID: string, message: T, topic?: string, idempotencyKey?: string): Promise<void>\n")),(0,r.kt)("p",null,"This method sends a message to a destination workflow identity.\nMessages can optionally be associated with a topic and are queued on the receiver per topic.\nYou can optionally provide an idempotency key to guarantee only a single message is sent even if ",(0,r.kt)("inlineCode",{parentName:"p"},"send")," is called more than once.\nFor more information, see our ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/workflow-communication-tutorial#messages-api"},"messages API tutorial"),"."),(0,r.kt)("h4",{id:"handlerctxtgeteventworkflowuuid-key-timeoutseconds"},"handlerCtxt.getEvent(workflowUUID, key, ","[","timeoutSeconds","]",")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"getEvent<T extends NonNullable<any>>(workflowUUID: string, key: string, timeoutSeconds?: number): Promise<T | null>\n")),(0,r.kt)("p",null,"This method retrieves a value published by a workflow identity for a given key using the ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/workflow-communication-tutorial#events-api"},"events API"),".\nA call to ",(0,r.kt)("inlineCode",{parentName:"p"},"getEvent")," waits for the workflow to publish the key, returning ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if the wait times out:"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"workflowcontext"},(0,r.kt)("inlineCode",{parentName:"h3"},"WorkflowContext")),(0,r.kt)("p",null,"Workflows use ",(0,r.kt)("inlineCode",{parentName:"p"},"WorkflowContext")," to invoke other functions and interact with other workflows."),(0,r.kt)("h4",{id:"methods-2"},"Methods"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#workflowctxtinvoketargetclass"},"invoke(targetClass)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#workflowctxtchildworkflowwf-args"},"childWorkflow(wf, ...args)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#workflowctxtsenddestinationuuid-message-topic"},"send(destinationUUID, message, ","[","topic","]",")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#workflowctxtrecvtopic-timeoutseconds"},"recv(","[","topic, timeoutSeconds","]",")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#workflowctxtseteventkey-value"},"setEvent(key, value)"))),(0,r.kt)("h4",{id:"workflowctxtinvoketargetclass"},"workflowCtxt.invoke(targetClass)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"invoke<T>(targetClass: T, workflowUUID?: string): InvokeFuncs<T>\n")),(0,r.kt)("p",null,"Workflows use ",(0,r.kt)("inlineCode",{parentName:"p"},"invoke()")," to invoke other functions, specifically transactions and communicators.\nTo invoke other workflows, use ",(0,r.kt)("a",{parentName:"p",href:"#workflowctxtchildworkflowwf-args"},(0,r.kt)("inlineCode",{parentName:"a"},"childWorkflow")),"."),(0,r.kt)("p",null,"The syntax for invoking function ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," in class ",(0,r.kt)("inlineCode",{parentName:"p"},"Bar")," with argument ",(0,r.kt)("inlineCode",{parentName:"p"},"baz")," is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"workflowCtxt.invoke(Bar).foo(baz)\n")),(0,r.kt)("p",null,"You don't need to supply the context to an invoked function","\u2014","the runtime does this for you."),(0,r.kt)("h4",{id:"workflowctxtchildworkflowwf-args"},"workflowCtxt.childWorkflow(wf, ...args)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"childWorkflow<T extends any[], R>(wf: OperonWorkflow<T, R>, ...args: T): Promise<WorkflowHandle<R>>\n")),(0,r.kt)("p",null,"Workflows use ",(0,r.kt)("inlineCode",{parentName:"p"},"childWorkflow()")," to invoke another workflow.\nThis returns a ",(0,r.kt)("a",{parentName:"p",href:"./workflow-handles"},"workflow handle")," for the new workflow."),(0,r.kt)("p",null,"The syntax for invoking workflow ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," in class ",(0,r.kt)("inlineCode",{parentName:"p"},"Bar")," with argument ",(0,r.kt)("inlineCode",{parentName:"p"},"baz")," is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const workflowHandle = await ctxt.childWorkflow(Bar.foo, baz)\n")),(0,r.kt)("h4",{id:"workflowctxtsenddestinationuuid-message-topic"},"workflowCtxt.send(destinationUUID, message, ","[","topic","]",")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"send<T extends NonNullable<any>>(destinationUUID: string, message: T, topic?: string): Promise<void>\n")),(0,r.kt)("p",null,"This method sends a message to a destination workflow identity.\nMessages can optionally be associated with a topic and are queued on the receiver per topic.\nFor more information, see our ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/workflow-communication-tutorial#messages-api"},"messages API tutorial"),"."),(0,r.kt)("h4",{id:"workflowctxtrecvtopic-timeoutseconds"},"workflowCtxt.recv(","[","topic, timeoutSeconds","]",")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"recv<T extends NonNullable<any>>(topic?: string, timeoutSeconds?: number): Promise<T | null>\n")),(0,r.kt)("p",null,"Workflows use ",(0,r.kt)("inlineCode",{parentName:"p"},"recv()")," receive messages sent to their identity, optionally for a particular topic.\nEach call to ",(0,r.kt)("inlineCode",{parentName:"p"},"recv()")," waits for and consumes the next message to arrive in the queue for the specified topic, returning ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if the wait times out.\nIf the topic is not specified, this method only receives messages sent without a topic.\nFor more information, see our ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/workflow-communication-tutorial#messages-api"},"messages API tutorial"),"."),(0,r.kt)("h4",{id:"workflowctxtseteventkey-value"},"workflowCtxt.setEvent(key, value)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"setEvent<T extends NonNullable<any>>(key: string, value: T): Promise<void>\n")),(0,r.kt)("p",null,"A workflow can call ",(0,r.kt)("inlineCode",{parentName:"p"},"setEvent()")," to immutably emit a key-value pair.\nAny handler can read the event by calling ",(0,r.kt)("a",{parentName:"p",href:"#handlerctxtgeteventworkflowuuid-key-timeoutseconds"},(0,r.kt)("inlineCode",{parentName:"a"},"getEvent"))," with the workflow's identity UUID.\nIf a workflow has already set an event for a particular key, setting it again is an error.\nFor more information, see our ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/workflow-communication-tutorial#events-api"},"events API tutorial"),"."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"transactioncontextt"},(0,r.kt)("inlineCode",{parentName:"h3"},"TransactionContext<T>")),(0,r.kt)("p",null,"Transactions use ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionContext")," to interact with the database."),(0,r.kt)("h4",{id:"generic-type-parameter"},"Generic Type Parameter"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TransactionContext")," is typed generically based on the application database client in use.\nThe application database client is configurable in a project's ",(0,r.kt)("a",{parentName:"p",href:"./configuration"},"configuration file (",(0,r.kt)("inlineCode",{parentName:"a"},"user_dbclient"),")"),".\nOperon currently supports the following clients:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://knexjs.org/guide/#typescript"},"Knex"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Knex } from "knex";\nstatic async exampleTransaction(ctxt: TransactionContext<Knex>, ...)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://orkhan.gitbook.io/typeorm/docs/entity-manager-api"},"TypeORM"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { EntityManager } from "typeorm";\nstatic async exampleTransaction(ctxt: TransactionContext<EntityManager>, ...)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://www.prisma.io/docs/concepts/components/prisma-client"},"Prisma"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { PrismaClient } from "@prisma/client";\nstatic async exampleTransaction(ctxt: TransactionContext<Prisma>, ...)\n')),(0,r.kt)("h4",{id:"properties-2"},"Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#transactionctxtclient"},"client"))),(0,r.kt)("h4",{id:"transactionctxtclient"},"transactionCtxt.client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"client: T; // One of [Knex, EntityManager, PrismaClient]\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," property provides access to the chosen application database client.\nA transaction function should only interact with the application database using this client."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"communicatorcontext"},(0,r.kt)("inlineCode",{parentName:"h3"},"CommunicatorContext")),(0,r.kt)("p",null,"Communicators use ",(0,r.kt)("inlineCode",{parentName:"p"},"CommunicatorContext")," to retrieve information on communicator configuration."),(0,r.kt)("h4",{id:"properties-3"},"Properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#communicatorctxtretriesallowed"},"retriesAllowed")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#communicatorctxtmaxattempts"},"maxAttempts"))),(0,r.kt)("h4",{id:"communicatorctxtretriesallowed"},"communicatorCtxt.retriesAllowed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly retriesAllowed: boolean;\n")),(0,r.kt)("p",null,"This property specifies whether the communicator is automatically retried on failure.\nRetries are configurable through the ",(0,r.kt)("a",{parentName:"p",href:"./decorators#operoncommunicator"},(0,r.kt)("inlineCode",{parentName:"a"},"@OperonCommunicator"))," decorator."),(0,r.kt)("h4",{id:"communicatorctxtmaxattempts"},"communicatorCtxt.maxAttempts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"readonly maxAttempts: number;\n")),(0,r.kt)("p",null,"This property specifies the maximum number of times the communicator is to be retried.\nRetries are configurable through the ",(0,r.kt)("a",{parentName:"p",href:"./decorators#operoncommunicator"},(0,r.kt)("inlineCode",{parentName:"a"},"@OperonCommunicator"))," decorator."))}d.isMDXComponent=!0}}]);