"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[197],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,f=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1,title:"Operon Configuration"},i=void 0,l={unversionedId:"api-reference/configuration",id:"api-reference/configuration",title:"Operon Configuration",description:"Configuration is set of properties and values provided by the application develop to influence the behaviour of the operon runtime as well as the application.",source:"@site/docs/api-reference/configuration.md",sourceDirName:"api-reference",slug:"/api-reference/configuration",permalink:"/operon-docs/api-reference/configuration",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Operon Configuration"},sidebar:"tutorialSidebar",previous:{title:"API Reference",permalink:"/operon-docs/category/api-reference"},next:{title:"Operon Command line interface (CLI)",permalink:"/operon-docs/api-reference/cli"}},s={},p=[{value:"configuration file",id:"configuration-file",level:2},{value:"Operon configuration",id:"operon-configuration",level:2},{value:"database",id:"database",level:3},{value:"hostname",id:"hostname",level:4},{value:"port",id:"port",level:4},{value:"username",id:"username",level:4},{value:"password",id:"password",level:4},{value:"user_database",id:"user_database",level:4},{value:"system_database",id:"system_database",level:4},{value:"user_dbclient",id:"user_dbclient",level:4},{value:"connectionTimeoutMillis",id:"connectiontimeoutmillis",level:4},{value:"observability_database",id:"observability_database",level:4},{value:"ssl_ca",id:"ssl_ca",level:4},{value:"localRuntimeConfig",id:"localruntimeconfig",level:3},{value:"port",id:"port-1",level:4},{value:"telemetryExporters",id:"telemetryexporters",level:3},{value:"Application configuration",id:"application-configuration",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Configuration is set of properties and values provided by the application develop to influence the behaviour of the operon runtime as well as the application. "),(0,r.kt)("h2",{id:"configuration-file"},"configuration file"),(0,r.kt)("p",null,"Standard yaml file operon-config.yaml.\nThe file should be in the root directory of the project.\nA sample operon-config.yaml is shown below."),(0,r.kt)("p",null,"A value in the form ${SOMEVALUE} implies that the runtime will get the value from the environment variable SOMEVALUE."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"database:\n  hostname: 'localhost'\n  port: 5432\n  username: 'postgres'\n  password: ${PGPASSWORD}\n  user_database: 'hello'\n  system_database: 'hello_systemdb'\n  connectionTimeoutMillis: 3000\n  user_dbclient: 'knex'\ntelemetryExporters:\n  - 'ConsoleExporter'\n")),(0,r.kt)("h2",{id:"operon-configuration"},"Operon configuration"),(0,r.kt)("h3",{id:"database"},"database"),(0,r.kt)("p",null,"The database section contains configuration parameters needed by operon to connect to user and system databases."),(0,r.kt)("h4",{id:"hostname"},"hostname"),(0,r.kt)("p",null,"The hostname or ip address of the machine hosting the database."),(0,r.kt)("h4",{id:"port"},"port"),(0,r.kt)("p",null,"The port that the database is listening on."),(0,r.kt)("h4",{id:"username"},"username"),(0,r.kt)("p",null,"The username to use to connect to the database."),(0,r.kt)("h4",{id:"password"},"password"),(0,r.kt)("p",null,"The password to use to connect to the database. It is strongly recommended that you do not put password in cleartext here. Instead use indirection like ${PGPASSWORD} so that the runtime can get the value from the environment variable PGPASSWORD."),(0,r.kt)("h4",{id:"user_database"},"user_database"),(0,r.kt)("p",null,"This is the database that the application code reads and writes from."),(0,r.kt)("h4",{id:"system_database"},"system_database"),(0,r.kt)("p",null,"This is the database that the operon runtime reads and writes from."),(0,r.kt)("h4",{id:"user_dbclient"},"user_dbclient"),(0,r.kt)("p",null,"This is the sql builder or ORM used to communicate with the database. Supported values are knex, prisma or typeorm. Default is knex"),(0,r.kt)("h4",{id:"connectiontimeoutmillis"},"connectionTimeoutMillis"),(0,r.kt)("p",null,"The timeout in milliseconds after which the database driver will timeout from connecting to the database."),(0,r.kt)("h4",{id:"observability_database"},"observability_database"),(0,r.kt)("p",null,"The name of the database to which the observability database is written to."),(0,r.kt)("h4",{id:"ssl_ca"},"ssl_ca"),(0,r.kt)("p",null,"The path to ssl certificate to connect to the database."),(0,r.kt)("h3",{id:"localruntimeconfig"},"localRuntimeConfig"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"localRuntimeConfig\n    port: 6000\n")),(0,r.kt)("p",null,"This section has properties needed to configure the runtime."),(0,r.kt)("h4",{id:"port-1"},"port"),(0,r.kt)("p",null,"This is the port on which the embedded http server listens. Default is 3000."),(0,r.kt)("h3",{id:"telemetryexporters"},"telemetryExporters"),(0,r.kt)("p",null,"List of exporter to whom telemetry logs are to be sent. Supported values are 'ConsoleExporter', 'JaegerExporter', 'PGExporter'."),(0,r.kt)("h2",{id:"application-configuration"},"Application configuration"),(0,r.kt)("p",null,"The application section can have any user defined properties and values used by the application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"application:\n    PAYMENTS_SERVICE: 'http://stripe.com/payment'\n\n")))}d.isMDXComponent=!0}}]);