"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[5340],{1733:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>d});var t=n(5893),o=n(1151);const c={sidebar_position:7,title:"Communicator Library",description:"API reference for library of DBOS Communicators"},i=void 0,s={id:"api-reference/communicatorlib",title:"Communicator Library",description:"API reference for library of DBOS Communicators",source:"@site/docs/api-reference/communicatorlib.md",sourceDirName:"api-reference",slug:"/api-reference/communicatorlib",permalink:"/api-reference/communicatorlib",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Communicator Library",description:"API reference for library of DBOS Communicators"},sidebar:"tutorialSidebar",previous:{title:"Workflow Handles",permalink:"/api-reference/workflow-handles"},next:{title:"Static Analysis",permalink:"/api-reference/static-analysis"}},a={},d=[{value:"Background",id:"background",level:2},{value:"Usage",id:"usage",level:2},{value:"<code>BcryptCommunicator</code>",id:"bcryptcommunicator",level:2},{value:"<code>bcryptGenSalt(saltRounds?:number)</code>",id:"bcryptgensaltsaltroundsnumber",level:3},{value:"<code>bcryptHash(txt: string, saltRounds?:number)</code>",id:"bcrypthashtxt-string-saltroundsnumber",level:3},{value:"<code>CurrentTimeCommunicator</code>",id:"currenttimecommunicator",level:2},{value:"<code>getCurrentDate()</code>",id:"getcurrentdate",level:3},{value:"<code>getCurrentTime()</code>",id:"getcurrenttime",level:3},{value:"<code>RandomCommunicator</code>",id:"randomcommunicator",level:2},{value:"<code>random()</code>",id:"random",level:3}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"background",children:"Background"}),"\n",(0,t.jsx)(r.p,{children:"In DBOS, communicators represent interfaces to external systems, or wrap nondeterministic functions, and are often reusable.\nDBOS comes with a small library of communicators for common purposes."}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.p,{children:"To use a communicator from the library, first install it from the appropriate npm package:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"npm install --save @dbos-inc/communicator-datetime\n"})}),"\n",(0,t.jsx)(r.p,{children:"Import the communicator into your TypeScript code:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { CurrentTimeCommunicator } from '@dbos-inc/communicator-datetime';\nexport { CurrentTimeCommunicator }; // Currently necessary for registration to see the class\n"})}),"\n",(0,t.jsxs)(r.p,{children:["For DBOS to register the communicator functions, it is currently necessary for the communicator to be exported from your ",(0,t.jsx)(r.code,{children:"operations.ts"})," file (as it would be for any other communicator).\nIf the code using the communicator is not in ",(0,t.jsx)(r.code,{children:"operations.ts"}),", add a line to export the communicator from ",(0,t.jsx)(r.code,{children:"operations.ts"})," also."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"export { CurrentTimeCommunicator } from '@dbos-inc/communicator-datetime';\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Invoke the communicator from a ",(0,t.jsx)(r.code,{children:"WorkflowContext"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const curDate = await wfCtx.invoke(CurrentTimeCommunicator).getCurrentDate();\n"})}),"\n",(0,t.jsx)(r.p,{children:"When using the DBOS testing runtime, if you are explicitly providing the list of classes to register, it will be necessary to register any library communicator classes also:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'  testRuntime = await createTestingRuntime([Operations, CurrentTimeCommunicator], "dbos-config.yaml");\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"bcryptcommunicator",children:(0,t.jsx)(r.code,{children:"BcryptCommunicator"})}),"\n",(0,t.jsxs)(r.p,{children:["The functions in the ",(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/bcryptjs",children:(0,t.jsx)(r.code,{children:"bcryptjs"})})," package are non-deterministic because the salt is generated randomly.  To ensure consistent workflow behavior, bcrypt should therefore be run in a communicator so that the output can be recorded."]}),"\n",(0,t.jsxs)(r.p,{children:["This communicator is provided in the ",(0,t.jsx)(r.code,{children:"@dbos-inc/communicator-bcrypt"})," package."]}),"\n",(0,t.jsx)(r.h3,{id:"bcryptgensaltsaltroundsnumber",children:(0,t.jsx)(r.code,{children:"bcryptGenSalt(saltRounds?:number)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"bcryptGenSalt"})," produces a random salt.  Optional parameter is the number of rounds."]}),"\n",(0,t.jsx)(r.h3,{id:"bcrypthashtxt-string-saltroundsnumber",children:(0,t.jsx)(r.code,{children:"bcryptHash(txt: string, saltRounds?:number)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"bcryptHash"})," generates a random salt and uses it to create a hash of ",(0,t.jsx)(r.code,{children:"txt"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"currenttimecommunicator",children:(0,t.jsx)(r.code,{children:"CurrentTimeCommunicator"})}),"\n",(0,t.jsx)(r.p,{children:"For workflows to make consistent decisions based on time, reading the current time should be done via a communicator so that the value can be recorded and is available for workflow restart or replay."}),"\n",(0,t.jsxs)(r.p,{children:["This communicator is provided in the ",(0,t.jsx)(r.code,{children:"@dbos-inc/communicator-datetime"})," package."]}),"\n",(0,t.jsx)(r.h3,{id:"getcurrentdate",children:(0,t.jsx)(r.code,{children:"getCurrentDate()"})}),"\n",(0,t.jsxs)(r.p,{children:["This function returns a ",(0,t.jsx)(r.code,{children:"Date"})," object representing the current clock time."]}),"\n",(0,t.jsx)(r.h3,{id:"getcurrenttime",children:(0,t.jsx)(r.code,{children:"getCurrentTime()"})}),"\n",(0,t.jsxs)(r.p,{children:["This function returns a ",(0,t.jsx)(r.code,{children:"number"})," of milliseconds since January 1, 1970, UTC, in the same manner as ",(0,t.jsx)(r.code,{children:"new Date().getTime()"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"randomcommunicator",children:(0,t.jsx)(r.code,{children:"RandomCommunicator"})}),"\n",(0,t.jsx)(r.p,{children:"For consistent workflow execution, the results of anything random should be recorded by running the logic in a communicator."}),"\n",(0,t.jsxs)(r.p,{children:["This communicator is provided in the ",(0,t.jsx)(r.code,{children:"@dbos-inc/communicator-random"})," package."]}),"\n",(0,t.jsx)(r.h3,{id:"random",children:(0,t.jsx)(r.code,{children:"random()"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"random"})," is a wrapper for ",(0,t.jsx)(r.code,{children:"Math.random()"})," and similarly produces a ",(0,t.jsx)(r.code,{children:"number"})," in the range from 0 to 1."]})]})}function m(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>s,a:()=>i});var t=n(7294);const o={},c=t.createContext(o);function i(e){const r=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(c.Provider,{value:r},e.children)}}}]);