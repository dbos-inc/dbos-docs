"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6819],{4318:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"typescript/tutorials/workflow-tutorial","title":"Workflows","description":"Workflows provide durable execution so you can write programs that are resilient to any failure.","source":"@site/docs/typescript/tutorials/workflow-tutorial.md","sourceDirName":"typescript/tutorials","slug":"/typescript/tutorials/workflow-tutorial","permalink":"/typescript/tutorials/workflow-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Workflows","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"AI Model Prompting","permalink":"/typescript/prompting"},"next":{"title":"Steps","permalink":"/typescript/tutorials/step-tutorial"}}');var s=t(4848),o=t(8453);const a={sidebar_position:10,title:"Workflows",toc_max_heading_level:3},i=void 0,l={},c=[{value:"Starting Workflows In The Background",id:"starting-workflows-in-the-background",level:2},{value:"Workflow IDs and Idempotency",id:"workflow-ids-and-idempotency",level:2},{value:"Determinism",id:"determinism",level:2},{value:"Running Steps In Parallel",id:"running-steps-in-parallel",level:3},{value:"Workflow Timeouts",id:"workflow-timeouts",level:2},{value:"Durable Sleep",id:"durable-sleep",level:2},{value:"Workflow Events",id:"workflow-events",level:2},{value:"setEvent",id:"setevent",level:4},{value:"getEvent",id:"getevent",level:4},{value:"Events Example",id:"events-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees",level:4},{value:"Workflow Messaging and Notifications",id:"workflow-messaging-and-notifications",level:2},{value:"Send",id:"send",level:4},{value:"Recv",id:"recv",level:4},{value:"Messages Example",id:"messages-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees-1",level:4},{value:"Workflow Streaming",id:"workflow-streaming",level:2},{value:"Writing to Streams",id:"writing-to-streams",level:4},{value:"Reading from Streams",id:"reading-from-streams",level:4},{value:"Workflow Guarantees",id:"workflow-guarantees",level:2},{value:"Workflow Versioning and Recovery",id:"workflow-versioning-and-recovery",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Workflows provide ",(0,s.jsx)(n.strong,{children:"durable execution"})," so you can write programs that are ",(0,s.jsx)(n.strong,{children:"resilient to any failure"}),".\nWorkflows are comprised of ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/step-tutorial",children:"steps"}),", which wrap ordinary TypeScript (or JavaScript) functions.\nIf a workflow is interrupted for any reason (e.g., an executor restarts or crashes), when your program restarts the workflow automatically resumes execution from the last completed step."]}),"\n",(0,s.jsxs)(n.p,{children:["To write a workflow, register a TypeScript function with ",(0,s.jsx)(n.code,{children:"DBOS.registerWorkflow"}),".\nThe function's inputs and outputs must be serializable to JSON.\nFor example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'async function stepOne() {\n  DBOS.logger.info("Step one completed!");\n}\n\nasync function stepTwo() {\n  DBOS.logger.info("Step two completed!");\n}\n\nasync function workflowFunction() {\n  await DBOS.runStep(() => stepOne(), {name: "stepOne"});\n  await DBOS.runStep(() => stepTwo(), {name: "stepTwo"});\n}\nconst workflow = DBOS.registerWorkflow(workflowFunction)\n\nawait workflow();\n'})}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, you can register workflows and steps with decorators:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'export class Example {\n  @DBOS.step()\n  static async stepOne() {\n    DBOS.logger.info("Step one completed!");\n  }\n\n  @DBOS.step()\n  static async stepTwo() {\n    DBOS.logger.info("Step two completed!");\n  }\n\n  // Call steps from workflows\n  @DBOS.workflow()\n  static async exampleWorkflow() {\n    await Toolbox.stepOne();\n    await Toolbox.stepTwo();\n  }\n}\n\nawait Example.exampleWorkflow();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"starting-workflows-in-the-background",children:"Starting Workflows In The Background"}),"\n",(0,s.jsxs)(n.p,{children:["One common use-case for workflows is building reliable background tasks that keep running even when your program is interrupted, restarted, or crashes.\nYou can use ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dbosstartworkflow",children:(0,s.jsx)(n.code,{children:"DBOS.startWorkflow"})})," to start a workflow in the background.\nIf you start a workflow this way, it returns a ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#workflow-handles",children:"workflow handle"}),", from which you can access information about the workflow or wait for it to complete and retrieve its result."]}),"\n",(0,s.jsx)(n.p,{children:"Here's an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Example {\n    @DBOS.workflow()\n    static async exampleWorkflow(var1: string, var2: string) {\n        return var1 + var2;\n    }\n}\n\nasync function main() {\n    // Start exampleWorkflow in the background\n    const handle = await DBOS.startWorkflow(Example).exampleWorkflow("one", "two");\n    // Wait for the workflow to complete and return its results\n    const result = await handle.getResult();\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["After starting a workflow in the background, you can use ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dbosretrieveworkflow",children:(0,s.jsx)(n.code,{children:"DBOS.retrieveWorkflow"})})," to retrieve a workflow's handle from its ID.\nYou can also retrieve a workflow's handle from outside of your DBOS application with ",(0,s.jsx)(n.a,{href:"/typescript/reference/client#retrieveworkflow",children:"'DBOSClient.retrieveWorkflow`"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you need to run many workflows in the background and manage their concurrency or flow control, you can also use ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/queue-tutorial",children:"DBOS queues"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-ids-and-idempotency",children:"Workflow IDs and Idempotency"}),"\n",(0,s.jsxs)(n.p,{children:["Every time you execute a workflow, that execution is assigned a unique ID, by default a ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"}),".\nYou can access this ID through the ",(0,s.jsx)(n.code,{children:"DBOS.workflowID"})," context variable.\nWorkflow IDs are useful for communicating with workflows and developing interactive workflows."]}),"\n",(0,s.jsxs)(n.p,{children:["You can set the workflow ID of a workflow as an argument to ",(0,s.jsx)(n.code,{children:"DBOS.startWorkflow()"}),".\nWorkflow IDs must be ",(0,s.jsx)(n.strong,{children:"globally unique"})," for your application.\nAn assigned workflow ID acts as an idempotency key: if a workflow is called multiple times with the same ID, it executes only once.\nThis is useful if your operations have side effects like making a payment or sending an email.\nFor example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Example {\n    @DBOS.workflow()\n    static async exampleWorkflow(var1: string, var2: string) {\n        // ...\n    }\n}\n\nasync function main() {\n    const myID: string = ...\n    const handle = await DBOS.startWorkflow(Example, {workflowID: myID}).exampleWorkflow("one", "two");\n    const result = await handle.getResult();\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"determinism",children:"Determinism"}),"\n",(0,s.jsxs)(n.p,{children:["Workflows are in most respects normal TypeScript functions.\nThey can have loops, branches, conditionals, and so on.\nHowever, a workflow function must be ",(0,s.jsx)(n.strong,{children:"deterministic"}),": if called multiple times with the same inputs, it should invoke the same steps with the same inputs in the same order (given the same return values from those steps).\nIf you need to perform a non-deterministic operation like accessing the database, calling a third-party API, generating a random number, or getting the local time, you shouldn't do it directly in a workflow function.\nInstead, you should do all database operations in ",(0,s.jsx)(n.a,{href:"./transaction-tutorial",children:"transactions"})," and all other non-deterministic operations in ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/step-tutorial",children:"steps"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, ",(0,s.jsx)(n.strong,{children:"don't do this"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Example {\n    @DBOS.workflow()\n    static async exampleWorkflow() {\n        // Don\'t make an HTTP request in a workflow function\n        const body = await fetch("https://example.com").then(r => r.text()); \n        await Example.exampleTransaction(body);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Instead, do this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Example {\n    @DBOS.workflow()\n    static async exampleWorkflow() {\n        // Don\'t make an HTTP request in a workflow function\n        const body = await DBOS.runStep(\n          async ()=>{return await fetch("https://example.com").then(r => r.text())},\n          {name: "fetchBody"}\n        );\n        await Example.exampleTransaction(body);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Or this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class Example {\n    @DBOS.step()\n    static async fetchBody() {\n      // Instead, make HTTP requests in steps\n      return await fetch("https://example.com").then(r => r.text());\n    }\n\n    @DBOS.workflow()\n    static async exampleWorkflow() {\n        const body = await Example.fetchBody();\n        await Example.exampleTransaction(body);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"running-steps-in-parallel",children:"Running Steps In Parallel"}),"\n",(0,s.jsxs)(n.p,{children:["Initiating several concurrent steps in a workflow, followed by awaiting them with ",(0,s.jsx)(n.code,{children:"Promise.allSettled"}),", is valid as long as the steps are started in a deterministic order.  For example the following is allowed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const results = await Promise.allSettled([\n  step1("arg1"),\n  step2("arg2"),\n  step3("arg3"),\n  step4("arg4"),\n])\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is allowed because each step is started in a well-defined sequence before awaiting."}),"\n",(0,s.jsx)(n.p,{children:"By contrast, the following is not allowed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const results = await Promise.allSettled([\n  async () => { await step1("arg1"); await step2("arg3"); },\n  async () => { await step3("arg2"); await step4("arg4"); },\n]);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here, ",(0,s.jsx)(n.code,{children:"step2"})," and ",(0,s.jsx)(n.code,{children:"step4"})," may be started in either order since their execution depends on the relative time taken by ",(0,s.jsx)(n.code,{children:"step1"})," and ",(0,s.jsx)(n.code,{children:"step3"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you need to run sequences of operations concurrently, start child workflows with ",(0,s.jsx)(n.a,{href:"#starting-workflows-in-the-background",children:(0,s.jsx)(n.code,{children:"startWorkflow"})})," and await the results from their ",(0,s.jsx)(n.code,{children:"WorkflowHandle"}),"s."]}),"\n",(0,s.jsxs)(n.p,{children:["Avoid using ",(0,s.jsx)(n.code,{children:"Promise.all"})," because of how it handles errors and rejections.  When any promise rejects, ",(0,s.jsx)(n.code,{children:"Promise.all"})," immediately fails, leaving the other promises unresolved.  If one of those later throws an unhandled exception, it can crash your Node.js process.  Instead, prefer ",(0,s.jsx)(n.code,{children:"Promise.allSettled"}),", which safely waits for all promises to complete and reports their outcomes."]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-timeouts",children:"Workflow Timeouts"}),"\n",(0,s.jsxs)(n.p,{children:["You can set a timeout for a workflow by passing a ",(0,s.jsx)(n.code,{children:"timeoutMS"})," argument to ",(0,s.jsx)(n.code,{children:"DBOS.startWorkflow"}),".\nWhen the timeout expires, the workflow ",(0,s.jsx)(n.strong,{children:"and all its children"})," are cancelled.\nCancelling a workflow sets its status to ",(0,s.jsx)(n.code,{children:"CANCELLED"})," and preempts its execution at the beginning of its next step."]}),"\n",(0,s.jsxs)(n.p,{children:["Timeouts are ",(0,s.jsx)(n.strong,{children:"start-to-completion"}),": a workflow's timeout does not begin until the workflow starts execution.\nAlso, timeouts are ",(0,s.jsx)(n.strong,{children:"durable"}),": they are stored in the database and persist across restarts, so workflows can have very long timeouts."]}),"\n",(0,s.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function taskFunction(task) {\n    // ...\n}\nconst taskWorkflow = DBOS.registerWorkflow(taskFunction);\n\nasync function main() {\n  const task = ...\n  const timeout = ... // Timeout in milliseconds\n  const handle = await DBOS.startWorkflow(taskWorkflow, {timeoutMS: timeout})(task);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"durable-sleep",children:"Durable Sleep"}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dbossleep",children:(0,s.jsx)(n.code,{children:"DBOS.sleep()"})})," to put your workflow to sleep for any period of time.\nThis sleep is ",(0,s.jsx)(n.strong,{children:"durable"}),"\u2014DBOS saves the wakeup time in the database so that even if the workflow is interrupted and restarted multiple times while sleeping, it still wakes up on schedule."]}),"\n",(0,s.jsx)(n.p,{children:"Sleeping is useful for scheduling a workflow to run in the future (even days, weeks, or months from now).\nFor example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@DBOS.workflow()\nstatic async exampleWorkflow(timeToSleep, task) {\n    await DBOS.sleep(timeToSleep);\n    await runTask(task);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"workflow-events",children:"Workflow Events"}),"\n",(0,s.jsxs)(n.p,{children:["Workflows can emit ",(0,s.jsx)(n.em,{children:"events"}),", which are key-value pairs associated with the workflow's ID.\nThey are useful for publishing information about the state of an active workflow, for example to transmit information to the workflow's caller."]}),"\n",(0,s.jsx)(n.h4,{id:"setevent",children:"setEvent"}),"\n",(0,s.jsxs)(n.p,{children:["Any workflow can call ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dbossetevent",children:(0,s.jsx)(n.code,{children:"DBOS.setEvent"})})," to publish a key-value pair, or update its value if has already been published."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"DBOS.setEvent<T>(key: string, value: T): Promise<void>\n"})}),"\n",(0,s.jsx)(n.h4,{id:"getevent",children:"getEvent"}),"\n",(0,s.jsxs)(n.p,{children:["You can call ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dbosgetevent",children:(0,s.jsx)(n.code,{children:"DBOS.getEvent"})})," to retrieve the value published by a particular workflow ID for a particular key.\nIf the event does not yet exist, this call waits for it to be published, returning ",(0,s.jsx)(n.code,{children:"null"})," if the wait times out."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also call ",(0,s.jsx)(n.code,{children:"getEvent"})," from outside of your DBOS application with ",(0,s.jsx)(n.a,{href:"/typescript/reference/client",children:"DBOS Client"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"DBOS.getEvent<T>(workflowID: string, key: string, timeoutSeconds?: number): Promise<T | null>\n"})}),"\n",(0,s.jsx)(n.h4,{id:"events-example",children:"Events Example"}),"\n",(0,s.jsxs)(n.p,{children:["Events are especially useful for writing interactive workflows that communicate information to their caller.\nFor example, in the ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/e-commerce",children:"e-commerce demo"}),", the checkout workflow, after validating an order, directs the customer to a secure payments service to handle credit card processing.\nTo communicate the payments URL to the customer, it uses events."]}),"\n",(0,s.jsxs)(n.p,{children:["The checkout workflow emits the payments URL using ",(0,s.jsx)(n.code,{children:"setEvent()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"  @DBOS.workflow()\n  static async checkoutWorkflow(...): Promise<void> {\n    ...\n    const paymentsURL = ...\n    await DBOS.setEvent(PAYMENT_URL, paymentsURL);\n    ... \n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The HTTP handler that originally started the workflow uses ",(0,s.jsx)(n.code,{children:"getEvent()"})," to await this URL, then redirects the customer to it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"  static async webCheckout(...): Promise<void> {\n    const handle = await DBOS.startWorkflow(Shop).checkoutWorkflow(...);\n    const url = await DBOS.getEvent<string>(handle.workflowID, PAYMENT_URL);\n    if (url === null) {\n      DBOS.koaContext.redirect(`${origin}/checkout/cancel`);\n    } else {\n      DBOS.koaContext.redirect(url);\n    }\n  }\n"})}),"\n",(0,s.jsx)(n.h4,{id:"reliability-guarantees",children:"Reliability Guarantees"}),"\n",(0,s.jsxs)(n.p,{children:["All events are persisted to the database, so the latest version of an event is always retrievable.\nAdditionally, if ",(0,s.jsx)(n.code,{children:"get_event"})," is called in a workflow, the retrieved value is persisted in the database so workflow recovery can use that value, even if the event is later updated later."]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-messaging-and-notifications",children:"Workflow Messaging and Notifications"}),"\n",(0,s.jsx)(n.p,{children:"You can send messages to a specific workflow ID.\nThis is useful for sending notifications to an active workflow."}),"\n",(0,s.jsx)(n.h4,{id:"send",children:"Send"}),"\n",(0,s.jsxs)(n.p,{children:["You can call ",(0,s.jsx)(n.code,{children:"DBOS.send()"})," to send a message to a workflow.\nMessages can optionally be associated with a topic and are queued on the receiver per topic."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also call ",(0,s.jsx)(n.code,{children:"send"})," from outside of your DBOS application with ",(0,s.jsx)(n.a,{href:"/typescript/reference/client",children:"DBOS Client"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"DBOS.send<T>(destinationID: string, message: T, topic?: string): Promise<void>;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"recv",children:"Recv"}),"\n",(0,s.jsxs)(n.p,{children:["Workflows can call ",(0,s.jsx)(n.code,{children:"DBOS.recv()"})," to receive messages sent to them, optionally for a particular topic.\nEach call to ",(0,s.jsx)(n.code,{children:"recv()"})," waits for and consumes the next message to arrive in the queue for the specified topic, returning ",(0,s.jsx)(n.code,{children:"None"})," if the wait times out.\nIf the topic is not specified, this method only receives messages sent without a topic."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"DBOS.recv<T>(topic?: string, timeoutSeconds?: number): Promise<T | null>\n"})}),"\n",(0,s.jsx)(n.h4,{id:"messages-example",children:"Messages Example"}),"\n",(0,s.jsxs)(n.p,{children:["Messages are especially useful for sending notifications to a workflow.\nFor example, in the ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/e-commerce",children:"e-commerce demo"}),", the checkout workflow, after redirecting customers to a secure payments service, must wait for a notification from that service that the payment has finished processing."]}),"\n",(0,s.jsxs)(n.p,{children:["To wait for this notification, the payments workflow uses ",(0,s.jsx)(n.code,{children:"recv()"}),", executing failure-handling code if the notification doesn't arrive in time:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"@DBOS.workflow()\nstatic async checkoutWorkflow(...): Promise<void> {\n  ...\n  const notification = await DBOS.recv<string>(PAYMENT_STATUS, timeout);\n  if (notification) {\n      ... // Handle the notification.\n  } else {\n      ... // Handle a timeout.\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A webhook waits for the payment processor to send the notification, then uses ",(0,s.jsx)(n.code,{children:"send()"})," to forward it to the workflow:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"static async paymentWebhook(): Promise<void> {\n  const notificationMessage = ... // Parse the notification.\n  const workflowID = ... // Retrieve the workflow ID from notification metadata.\n  await DBOS.send(workflow_id, notificationMessage, PAYMENT_STATUS);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"reliability-guarantees-1",children:"Reliability Guarantees"}),"\n",(0,s.jsxs)(n.p,{children:["All messages are persisted to the database, so if ",(0,s.jsx)(n.code,{children:"send"})," completes successfully, the destination workflow is guaranteed to be able to ",(0,s.jsx)(n.code,{children:"recv"})," it.\nIf you're sending a message from a workflow, DBOS guarantees exactly-once delivery.\nIf you're sending a message from normal TypeScript code, you can specify an idempotency key for ",(0,s.jsx)(n.code,{children:"send"})," to guarantee exactly-once delivery."]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-streaming",children:"Workflow Streaming"}),"\n",(0,s.jsx)(n.p,{children:"Workflows can stream data in real time to clients.\nThis is useful for streaming results from a long-running workflow or LLM call or for monitoring or progress reporting."}),"\n",(0,s.jsx)(n.h4,{id:"writing-to-streams",children:"Writing to Streams"}),"\n",(0,s.jsxs)(n.p,{children:["You can write values to a stream from a workflow or its steps using ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dboswritestream",children:(0,s.jsx)(n.code,{children:"DBOS.writeStream"})}),".\nA workflow may have any number of streams, each identified by a unique key."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"DBOS.writeStream<T>(key: string, value: T): Promise<void>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When you are done writing to a stream, you should close it with ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dbosclosestream",children:(0,s.jsx)(n.code,{children:"DBOS.closeStream"})}),".\nOtherwise, streams are automatically closed when the workflow terminates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"DBOS.closeStream(key: string): Promise<void>\n"})}),"\n",(0,s.jsx)(n.p,{children:"DBOS streams are immutable and append-only.\nWrites to a stream from a workflow happen exactly-once.\nWrites to a stream from a step happen at-least-once; if a step fails and is retried, it may write to the stream multiple times.\nReaders will see all values written to the stream from all tries of the step in the order in which they were written."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'async function producerWorkflowFunction() {\n  await DBOS.writeStream("example_key", { step: 1, data: "value1" });\n  await DBOS.writeStream("example_key", { step: 2, data: "value2" });\n  await DBOS.closeStream("example_key"); // Signal completion\n}\n\nconst producerWorkflow = DBOS.registerWorkflow(producerWorkflowFunction);\n'})}),"\n",(0,s.jsx)(n.h4,{id:"reading-from-streams",children:"Reading from Streams"}),"\n",(0,s.jsxs)(n.p,{children:["You can read values from a stream from anywhere using ",(0,s.jsx)(n.a,{href:"/typescript/reference/methods#dbosreadstream",children:(0,s.jsx)(n.code,{children:"DBOS.readStream"})}),".\nThis function reads values from a stream identified by a workflow ID and key, yielding each value in order until the stream is closed or the workflow terminates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"DBOS.readStream<T>(workflowID: string, key: string): AsyncGenerator<T, void, unknown>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'for await (const value of DBOS.readStream(workflowID, "example_key")) {\n  console.log(`Received: ${JSON.stringify(value)}`);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"workflow-guarantees",children:"Workflow Guarantees"}),"\n",(0,s.jsx)(n.p,{children:"Workflows provide the following reliability guarantees.\nThese guarantees assume that the application and database may crash and go offline at any point in time, but are always restarted and return online."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Workflows always run to completion.  If a DBOS process is interrupted while executing a workflow and restarts, it resumes the workflow from the last completed step."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/typescript/tutorials/step-tutorial",children:"Steps"})," are tried ",(0,s.jsx)(n.em,{children:"at least once"})," but are never re-executed after they complete.  If a failure occurs inside a step, the step may be retried, but once a step has completed (returned a value or thrown an exception to the calling workflow), it will never be re-executed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/typescript/tutorials/transaction-tutorial",children:"Transactions"})," commit ",(0,s.jsx)(n.em,{children:"exactly once"}),".  Once a workflow commits a transaction, it will never retry that transaction."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If an exception is thrown from a workflow, the workflow ",(0,s.jsx)(n.strong,{children:"terminates"}),"\u2014DBOS records the exception, sets the workflow status to ",(0,s.jsx)(n.code,{children:"ERROR"}),", and ",(0,s.jsx)(n.strong,{children:"does not recover the workflow"}),".\nThis is because uncaught exceptions are assumed to be nonrecoverable.\nIf your workflow performs operations that may transiently fail (for example, sending HTTP requests to unreliable services), those should be performed in ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/step-tutorial#configurable-retries",children:"steps with configured retries"}),".\nDBOS provides ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/workflow-management",children:"tooling"})," to help you identify failed workflows and examine the specific uncaught exceptions."]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-versioning-and-recovery",children:"Workflow Versioning and Recovery"}),"\n",(0,s.jsxs)(n.p,{children:["Because DBOS recovers workflows by re-executing them using information saved in the database, a workflow cannot safely be recovered if its code has changed since the workflow was started.\nTo guard against this, DBOS ",(0,s.jsx)(n.em,{children:"versions"})," applications and their workflows.\nWhen DBOS is launched, it computes an application version from a hash of the source code of its workflows (this can be overridden by setting the ",(0,s.jsx)(n.code,{children:"DBOS__APPVERSION"})," environment variable).\nAll workflows are tagged with the application version on which they started."]}),"\n",(0,s.jsxs)(n.p,{children:["When DBOS tries to recover workflows, it only recovers workflows whose version matches the current application version.\nThis prevents unsafe recovery of workflows that depend on different code.\nYou cannot change the version of a workflow, but you can use ",(0,s.jsx)(n.a,{href:"/typescript/tutorials/workflow-management#forking-workflows",children:(0,s.jsx)(n.code,{children:"DBOS.forkWorkflow"})})," to restart a workflow from a specific step on a specific code version."]}),"\n",(0,s.jsxs)(n.p,{children:["For more information on managing workflow recovery when self-hosting production DBOS applications, check out ",(0,s.jsx)(n.a,{href:"/production/self-hosting/workflow-recovery",children:"the guide"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);