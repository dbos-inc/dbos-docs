"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[4921],{8080:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"typescript/tutorials/development/testing-tutorial","title":"Testing","description":"Learn how to use DBOS in popular unit testing frameworks.","source":"@site/docs/typescript/tutorials/development/testing-tutorial.md","sourceDirName":"typescript/tutorials/development","slug":"/typescript/tutorials/development/testing-tutorial","permalink":"/typescript/tutorials/development/testing-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"Testing","description":"Learn how to use DBOS in popular unit testing frameworks."},"sidebar":"tutorialSidebar","previous":{"title":"Creating Custom Event Receivers","permalink":"/typescript/tutorials/requestsandevents/custom-event-receiver"},"next":{"title":"Using Libraries","permalink":"/typescript/tutorials/development/using-libraries"}}');var i=n(4848),r=n(8453);const a={sidebar_position:20,title:"Testing",description:"Learn how to use DBOS in popular unit testing frameworks."},o=void 0,c={},l=[{value:"Overview",id:"overview",level:2},{value:"Using <code>jest</code>",id:"using-jest",level:2},{value:"Set Up Jest",id:"set-up-jest",level:3},{value:"Launching DBOS",id:"launching-dbos",level:3},{value:"Setting Up App Databases Prior To Launch",id:"setting-up-app-databases-prior-to-launch",level:4},{value:"Resetting The System Database",id:"resetting-the-system-database",level:4},{value:"Testing Functions",id:"testing-functions",level:3},{value:"Testing HTTP Endpoints",id:"testing-http-endpoints",level:3},{value:"Cleaning Up",id:"cleaning-up",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Further Reading",id:"further-reading",level:3},{value:"Using <code>vitest</code>",id:"using-vitest",level:2},{value:"DBOS TestingRuntime",id:"dbos-testingruntime",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"In this guide, you'll learn how to test your DBOS applications."}),"\n",(0,i.jsxs)(s.p,{children:["DBOS code can be easily tested in any unit-testing framework.\nWe'll show you how to write unit tests for the ",(0,i.jsx)(s.code,{children:"Hello"})," example class shipped by ",(0,i.jsx)(s.a,{href:"/typescript/reference/tools/cli#npx-dbos-inccreate",children:(0,i.jsx)(s.code,{children:"npx @dbos-inc/create"})}),", using ",(0,i.jsx)(s.a,{href:"https://jestjs.io/",children:"Jest"})," or ",(0,i.jsx)(s.a,{href:"https://vitest.dev/",children:"Vitest"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(s.p,{children:"Testing DBOS code involves the following steps:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Installing and configuring your test tool"}),"\n",(0,i.jsx)(s.li,{children:"Creating a test"}),"\n",(0,i.jsx)(s.li,{children:"Setting up the app and system database before running tests"}),"\n",(0,i.jsx)(s.li,{children:"Configuring and launching DBOS before running DBOS test code"}),"\n",(0,i.jsx)(s.li,{children:"Calling DBOS functions"}),"\n",(0,i.jsx)(s.li,{children:"Shutting down DBOS at the end of the test"}),"\n",(0,i.jsxs)(s.li,{children:["Running the tests, usually from a helper script in ",(0,i.jsx)(s.code,{children:"package.json"})]}),"\n"]}),"\n",(0,i.jsxs)(s.h2,{id:"using-jest",children:["Using ",(0,i.jsx)(s.code,{children:"jest"})]}),"\n",(0,i.jsx)(s.h3,{id:"set-up-jest",children:"Set Up Jest"}),"\n",(0,i.jsx)(s.p,{children:"If you haven't already, install jest."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-shell",children:"npm i --save-dev jest @types/jest ts-jest\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Set up a typical ",(0,i.jsx)(s.code,{children:"jest.config.js"}),", such as:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-js",children:"/** @type {import('ts-jest').JestConfigWithTsJest} */\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testRegex: '((\\\\.|/)(test|spec))\\\\.ts?$',\n  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],\n  modulePaths: ['./'],\n};\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Start a template test file, with a name such as ",(0,i.jsx)(s.code,{children:"main.test.ts"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { DBOS } from '@dbos-inc/dbos-sdk';\nimport { app, dbos_hello, Hello } from './main';\nimport request from 'supertest';\n\ndescribe('operations-test', () => {\n    // Your test will go here...\n});\n"})}),"\n",(0,i.jsxs)(s.p,{children:["To make it easy to run your tests, create a ",(0,i.jsx)(s.code,{children:"scripts"})," entry in ",(0,i.jsx)(s.code,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'  "scripts": {\n    "test": "npx dbos migrate && jest"\n  }\n'})}),"\n",(0,i.jsx)(s.h3,{id:"launching-dbos",children:"Launching DBOS"}),"\n",(0,i.jsxs)(s.p,{children:["Before executing any test code that uses DBOS, DBOS should be configured and launched.  This is often placed in ",(0,i.jsx)(s.code,{children:"beforeAll"})," or ",(0,i.jsx)(s.code,{children:"beforeEach"}),", rather than in each test function."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  beforeAll(async () => {\n    DBOS.setConfig({\n      name: 'my-app',\n      databaseUrl: process.env.DBOS_TESTING_DATABASE_URL,\n    });\n    await DBOS.launch();\n  });\n"})}),"\n",(0,i.jsxs)(s.p,{children:["See ",(0,i.jsx)(s.a,{href:"/typescript/reference/transactapi/dbos-class#launching-dbos",children:(0,i.jsx)(s.code,{children:"DBOS.launch"})})," for launch options."]}),"\n",(0,i.jsx)(s.h4,{id:"setting-up-app-databases-prior-to-launch",children:"Setting Up App Databases Prior To Launch"}),"\n",(0,i.jsx)(s.p,{children:"You are responsible for setting and cleaning up database tables before and after tests."}),"\n",(0,i.jsxs)(s.p,{children:["In our example, we run Knex migrations with ",(0,i.jsx)(s.code,{children:"npx dbos migrate"})," as part of our testing script in ",(0,i.jsx)(s.code,{children:"package.json"}),", but this could have been done within the test instead.  For example, if you are using TypeORM, the schema can be set up from within the test itself using ",(0,i.jsx)(s.code,{children:"DBOS.createUserSchema"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  beforeEach(async () => {\n    DBOS.setConfig({\n      name: 'my-app',\n      databaseUrl: process.env.DBOS_TESTING_DATABASE_URL,\n    });\n    await DBOS.launch();\n    await DBOS.dropUserSchema();\n    await DBOS.createUserSchema();\n  });\n"})}),"\n",(0,i.jsx)(s.h4,{id:"resetting-the-system-database",children:"Resetting The System Database"}),"\n",(0,i.jsxs)(s.p,{children:["If your tests reuse workflow IDs, it is necessary to clean out the DBOS system database to ensure a consistent starting point for testing.  Dropping the system database with ",(0,i.jsx)(s.code,{children:"DBOS.dropSystemDB"})," must be done after DBOS is configured (so the database connection parameters are known), but prior to launch (so that the system database is not yet in use):"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"    DBOS.setConfig({\n      name: 'my-app',\n      databaseUrl: process.env.DBOS_TESTING_DATABASE_URL,\n    });\n    await DBOS.dropSystemDB();\n    await DBOS.launch();\n"})}),"\n",(0,i.jsx)(s.h3,{id:"testing-functions",children:"Testing Functions"}),"\n",(0,i.jsxs)(s.p,{children:["Once DBOS is launched, a test can invoke workflows, transactions, and steps directly.  Functions on the ",(0,i.jsxs)(s.a,{href:"../../reference/transactapi/dbos-class",children:[(0,i.jsx)(s.code,{children:"DBOS"})," class"]})," can be used to interact with workflows and check database status during the course of the test."]}),"\n",(0,i.jsx)(s.p,{children:"For example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  test('test-transaction', async () => {\n    const res = await Hello.helloTransaction('dbos');\n    expect(res).toMatch('Hello, dbos! You have been greeted');\n\n    // Check the greet count.\n    const rows = (await DBOS.queryUserDB('SELECT * FROM dbos_hello WHERE name=$1', ['dbos'])) as dbos_hello[];\n    expect(rows[0].greet_count).toBe(1);\n  });\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this code, we invoke ",(0,i.jsx)(s.code,{children:"Hello.helloTransaction"})," with the input string ",(0,i.jsx)(s.code,{children:'"dbos"'}),", and verify its output is as expected."]}),"\n",(0,i.jsx)(s.h3,{id:"testing-http-endpoints",children:"Testing HTTP Endpoints"}),"\n",(0,i.jsxs)(s.p,{children:["If you are testing HTTP handling capabilities, these can be tested using a framework such as ",(0,i.jsx)(s.a,{href:"https://www.npmjs.com/package/supertest",children:"supertest"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"Import the testing package:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:'import request from "supertest";\n'})}),"\n",(0,i.jsx)(s.p,{children:"Launch your app's HTTP server, or launch DBOS with your app server:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  beforeAll(async () => {\n    DBOS.setConfig({\n      name: 'my-app',\n      databaseUrl: process.env.DBOS_TESTING_DATABASE_URL,\n    });\n    await DBOS.launch({ expressApp: app });\n  });\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Use the handler callback during the course of unit-testing.  In this code, we send a ",(0,i.jsx)(s.code,{children:"GET"})," request to our ",(0,i.jsx)(s.code,{children:"/greeting/dbos"})," URL and verify its response:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  test('test-endpoint', async () => {\n    const res = await request(app).get('/greeting/dbos');\n    expect(res.statusCode).toBe(200);\n    expect(res.text).toMatch('Hello, dbos! You have been greeted');\n  });\n"})}),"\n",(0,i.jsx)(s.h3,{id:"cleaning-up",children:"Cleaning Up"}),"\n",(0,i.jsxs)(s.p,{children:["Finally, after your tests, you should clean up DBOS and release its resources.  Generally, this is done in ",(0,i.jsx)(s.code,{children:"afterAll"})," (or ",(0,i.jsx)(s.code,{children:"afterEach"}),"):"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"  afterAll(async () => {\n    await DBOS.shutdown();\n  });\n"})}),"\n",(0,i.jsx)(s.h3,{id:"run-tests",children:"Run Tests"}),"\n",(0,i.jsx)(s.p,{children:"Now let's run the tests!"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-shell",children:"npm run test\n"})}),"\n",(0,i.jsx)(s.p,{children:"You should see the test results similar to the following:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:" PASS  src/main.test.ts\n  operations-test\n    \u2713 test-transaction (21 ms)\n    \u2713 test-endpoint (17 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        1.247 s, estimated 2 s\n"})}),"\n",(0,i.jsx)(s.h3,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(s.p,{children:["You can find the source code for this tutorial in ",(0,i.jsx)(s.a,{href:"https://github.com/dbos-inc/dbos-transact-ts/blob/main/packages/create/templates/dbos-knex/src/main.test.ts",children:"operations.test.ts"}),"."]}),"\n",(0,i.jsxs)(s.h2,{id:"using-vitest",children:["Using ",(0,i.jsx)(s.code,{children:"vitest"})]}),"\n",(0,i.jsxs)(s.p,{children:["Using ",(0,i.jsx)(s.code,{children:"vitest"})," is similar to using ",(0,i.jsx)(s.code,{children:"jest"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["First, create a ",(0,i.jsx)(s.code,{children:"vitest.config.ts"})," file for your project if it doesn't already have one:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:'import { defineConfig } from "vitest/config";\n\nexport default defineConfig({\n  test: {\n    environment: "node", // Use "node" for backend tests\n    include: ["test/**/*.test.ts"], // Adjust this to match your test file locations\n  },\n});\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Then, write test code.  Basic test code in ",(0,i.jsx)(s.code,{children:"vitest"})," is identical to code for ",(0,i.jsx)(s.code,{children:"jest"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:'import { beforeEach, afterEach, describe, expect, it } from "vitest";\nimport { DBOS, parseConfigFile } from "@dbos-inc/dbos-sdk";\nimport { MyWorkflow } from "../dbos/operations";\n\ndescribe("dbos functions", () => {\n  beforeEach(async () => {\n    DBOS.setConfig({\n      name: \'my-app\',\n      databaseUrl: process.env.DBOS_TESTING_DATABASE_URL,\n    });\n    await DBOS.launch();\n  });\n\n  afterEach(async () => {\n    await DBOS.shutdown();\n  });\n\n  it("runs-dbos-code", async () => {\n    await MyWorkflow.backgroundTask(4);\n    expect(1).toBe(1);\n  });\n});\n'})}),"\n",(0,i.jsxs)(s.p,{children:["For convenience, add a ",(0,i.jsx)(s.code,{children:"test"})," (or similar) script to your ",(0,i.jsx)(s.code,{children:"package.json"})," file:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'"scripts": {\n    "test": "pnpm vitest run"\n}\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"tip",children:(0,i.jsxs)(s.p,{children:["Note the use of the ",(0,i.jsx)(s.code,{children:"run"})," command.  Without it, ",(0,i.jsx)(s.code,{children:"vitest"}),' may enter a continuous testing mode where it watches file changes and re-executes tests.  As the DBOS executor does not support "hot reload" of workflow code, this mode will not work consistently.']})}),"\n",(0,i.jsxs)(s.p,{children:["Finally, call your ",(0,i.jsx)(s.code,{children:"test"})," script:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-shell",children:"npm run test\n"})}),"\n",(0,i.jsx)(s.p,{children:"Output similar to the following should be produced:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:" \u2713 test/dbos.test.ts (1 test) 758ms\n   \u2713 dbos functions > runs-dbos-code 757ms\n\n Test Files  1 passed (1)\n      Tests  1 passed (1)\n   Start at  11:08:00\n   Duration  2.39s (transform 41ms, setup 0ms, collect 1.40s, tests 758ms, environment 0ms, prepare 75ms)\n"})}),"\n",(0,i.jsx)(s.h2,{id:"dbos-testingruntime",children:"DBOS TestingRuntime"}),"\n",(0,i.jsxs)(s.p,{children:["In prior versions of the TypeScript SDK, a ",(0,i.jsx)(s.code,{children:"TestingRuntime"})," was used to set up DBOS.  This approach is obsolete."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Instead of creating a ",(0,i.jsx)(s.code,{children:"TestingRuntime"}),", just call ",(0,i.jsxs)(s.a,{href:"../../reference/transactapi/dbos-class#launching-dbos",children:[(0,i.jsx)(s.code,{children:"DBOS.setConfig()"})," and ",(0,i.jsx)(s.code,{children:"DBOS.launch()"})]})," from your tests."]}),"\n",(0,i.jsxs)(s.li,{children:["Calls to ",(0,i.jsx)(s.code,{children:"TestingRuntime"})," functions can usually be replaced with identical calls to ",(0,i.jsx)(s.a,{href:"../../reference/transactapi/dbos-class",children:(0,i.jsx)(s.code,{children:"DBOS"})})," functions."]}),"\n",(0,i.jsxs)(s.li,{children:["In most cases, application functions can be called directly within the tests.  Older app code can be invoked using ",(0,i.jsx)(s.a,{href:"../../reference/transactapi/dbos-class#calling-workflow-functions",children:(0,i.jsx)(s.code,{children:"DBOS.invoke"})})," instead of via ",(0,i.jsx)(s.code,{children:"TestingRuntime.invoke"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(6540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);