"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9453],{6159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"typescript/examples/checkout-tutorial","title":"Checkout Workflow","description":"Learn how to implement the checkout button for an online store with DBOS","source":"@site/docs/typescript/examples/checkout-tutorial.md","sourceDirName":"typescript/examples","slug":"/typescript/examples/checkout-tutorial","permalink":"/typescript/examples/checkout-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":30,"title":"Checkout Workflow","description":"Learn how to implement the checkout button for an online store with DBOS"},"sidebar":"examplesSidebar","previous":{"title":"DBOS Task Scheduler","permalink":"/typescript/examples/task-scheduler"}}');var o=t(4848),s=t(8453);const r={displayed_sidebar:"examplesSidebar",sidebar_position:30,title:"Checkout Workflow",description:"Learn how to implement the checkout button for an online store with DBOS"},a="Building a Reliable Checkout Workflow",l={},c=[{value:"Resources",id:"resources",level:2},{value:"Overview",id:"overview",level:2},{value:"The Request Handler",id:"the-request-handler",level:2},{value:"Registering the handler",id:"registering-the-handler",level:3},{value:"Invoking the checkout workflow",id:"invoking-the-checkout-workflow",level:3},{value:"Awaiting payment information",id:"awaiting-payment-information",level:3},{value:"Full handler code",id:"full-handler-code",level:3},{value:"The Checkout Workflow",id:"the-checkout-workflow",level:2},{value:"Registering the workflow",id:"registering-the-workflow",level:3},{value:"Reserving inventory",id:"reserving-inventory",level:3},{value:"Initiating a payment session",id:"initiating-a-payment-session",level:3},{value:"Notifying the handler",id:"notifying-the-handler",level:3},{value:"Waiting for a payment",id:"waiting-for-a-payment",level:3},{value:"Handling payment outcomes",id:"handling-payment-outcomes",level:3},{value:"Full workflow code",id:"full-workflow-code",level:3},{value:"Running it Yourself",id:"running-it-yourself",level:2},{value:"Using Idempotency Keys",id:"using-idempotency-keys",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"building-a-reliable-checkout-workflow",children:"Building a Reliable Checkout Workflow"})}),"\n",(0,o.jsxs)(n.p,{children:["In this guide, we'll show you how to use DBOS to write a more complex program: the checkout workflow of an online store.\nWhen a customer orders an item, this workflow must reserve inventory for the order, redirect the customer to a third-party payment service, wait for the payment to process, then fulfill the order if payment succeeded.\nBecause this workflow manages inventory and money, it should be ",(0,o.jsx)(n.strong,{children:"reliable"}),", meaning it should:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Never charge a customer without fulfilling an order."}),"\n",(0,o.jsx)(n.li,{children:"Never charge a customer twice for the same order."}),"\n",(0,o.jsx)(n.li,{children:"Reserve inventory for an order if and only if the order is fulfilled."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Without DBOS, these properties are hard to guarantee.\nIf the checkout service is interrupted after a customer pays, you have to recover the workflow from where it left off and fulfill their order.\nIf a customer clicks the buy button twice, you have to make sure they aren't charged twice.\nIf a payment doesn't go through, you have to return any reserved inventory.\n",(0,o.jsx)(n.strong,{children:"As we'll show, DBOS makes this easy."})]}),"\n",(0,o.jsx)(n.admonition,{title:"what you will learn",type:"info",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"How to develop reliable programs with workflows"}),"\n",(0,o.jsx)(n.li,{children:"How to write interactive workflows that await user input"}),"\n",(0,o.jsx)(n.li,{children:"How to use idempotency keys to call your workflows once and only once"}),"\n"]})}),"\n",(0,o.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,o.jsxs)(n.p,{children:["This guide comes a companion ",(0,o.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/shop-guide",children:"repository"})," containing all its code."]}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["In this guide, we'll be implementing two functions: the checkout workflow and its request handler.\nThese interact with an external payment service modelled on ",(0,o.jsx)(n.a,{href:"https://stripe.com",children:"Stripe"}),".\nHere's a diagram of what the end-to-end checkout flow looks like:"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(904).A+"",width:"1014",height:"440"})}),"\n",(0,o.jsx)(n.p,{children:"When a customer sends a checkout request, it's intercepted by the handler, which starts a checkout workflow, which initiates a session in the payment service.\nAfter the session is initiated, the workflow notifies the handler, which responds to the customer with a link to submit payment.\nThe workflow then waits for the payment service to notify it whether the customer has paid.\nOnce the customer pays, the workflow fulfills the customer's order."}),"\n",(0,o.jsx)(n.h2,{id:"the-request-handler",children:"The Request Handler"}),"\n",(0,o.jsx)(n.p,{children:"We'll start by building the checkout request handler, which initiates checkout in response to customer HTTP requests."}),"\n",(0,o.jsx)(n.h3,{id:"registering-the-handler",children:"Registering the handler"}),"\n",(0,o.jsxs)(n.p,{children:["The handler is implemented in this ",(0,o.jsx)(n.code,{children:"webCheckout"})," function and served from HTTP POST requests to the URL ",(0,o.jsx)(n.code,{children:"<host>/checkout/:key?"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"@DBOS.postApi('/checkout/:key?')\nstatic async webCheckout(@ArgOptional key: string): Promise<string> {\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It accepts an optional parameter ",(0,o.jsx)(n.code,{children:"key"}),", used to invoke the checkout workflow ",(0,o.jsx)(n.a,{href:"../tutorials/idempotency-tutorial",children:"idempotently"}),".\nIf a workflow is invoked many times with the same idempotency key (for example, because a customer pressed the buy button many times), it only executes once."]}),"\n",(0,o.jsx)(n.h3,{id:"invoking-the-checkout-workflow",children:"Invoking the checkout workflow"}),"\n",(0,o.jsxs)(n.p,{children:["Upon receiving a request, the handler asynchronously invokes the checkout workflow using its idempotency key.\nIt obtains a ",(0,o.jsx)(n.a,{href:"../reference/transactapi/workflow-handles",children:"workflow handle"}),", used to interact with the workflow."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// A workflow handle is immediately returned. The workflow continues in the background.\nconst handle = const handle = await DBOS.startWorkflow(Shop, {workflowID: key}).checkoutWorkflow();`\n"})}),"\n",(0,o.jsx)(n.h3,{id:"awaiting-payment-information",children:"Awaiting payment information"}),"\n",(0,o.jsxs)(n.p,{children:["After invoking the checkout workflow, the handler uses the DBOS ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-events",children:"events API"})," to await a notification from the checkout workflow that the payment session is ready.\nWe will see in the next section how the checkout workflow notifies the handler.\nUpon receiving the payment session ID, it generates a link to submit payment and returns it to the customer."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Wait until the payment session is ready\nconst session_id = await DBOS.getEvent<string>(handle.workflowID, session_topic);\nif (session_id === null) {\n  DBOS.logger.error("workflow failed");\n  return;\n}\nreturn generatePaymentUrls(handle.workflowID, session_id);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"full-handler-code",children:"Full handler code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'@DBOS.postApi(\'/checkout/:key?\')\nstatic async webCheckout(@ArgOptional key: string): Promise<string> {\n  // A workflow handle is immediately returned. The workflow continues in the background.\n  const handle = await DBOS.startWorkflow(Shop, {workflowID: key}).checkoutWorkflow();\n  DBOS.logger.info(`Checkout workflow started with UUID: ${handle.workflowID}`);\n\n  // Wait until the payment session is ready\n  const session_id = await DBOS.getEvent<string>(handle.workflowID, session_topic);\n  if (session_id === null) {\n    DBOS.logger.error("workflow failed");\n    return "";\n  }\n\n  return generatePaymentUrls(handle.workflowID, session_id);\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"the-checkout-workflow",children:"The Checkout Workflow"}),"\n",(0,o.jsxs)(n.p,{children:["The checkout workflow reserves inventory for an order, attempts to process payment, and fufills the order if payment is successful.\nAs we'll show, it's ",(0,o.jsx)(n.strong,{children:"reliable"}),": it always fulfills orders if payments succeed, never charges customers twice for the same order, and always returns reserved inventory on failure."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Check out our ",(0,o.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/e-commerce",children:"e-commerce demo app"})," for a more elaborate example."]})}),"\n",(0,o.jsx)(n.h3,{id:"registering-the-workflow",children:"Registering the workflow"}),"\n",(0,o.jsxs)(n.p,{children:["First, we declare the workflow using the ",(0,o.jsx)(n.code,{children:"@DBOS.workflow"})," decorator:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"@DBOS.workflow()\nstatic async checkoutWorkflow(): Promise<void> {\n"})}),"\n",(0,o.jsx)(n.h3,{id:"reserving-inventory",children:"Reserving inventory"}),"\n",(0,o.jsxs)(n.p,{children:["Before purchasing an item, the checkout workflow reserves inventory for the order using the ",(0,o.jsx)(n.code,{children:"reserveInventory"})," transaction.\nIf this fails (likely because the item is out of stock), the workflow notifies its handler of the failure using the ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-events",children:"events API"})," and returns."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Attempt to update the inventory. Signal the handler if it fails.\ntry {\n  await ShopUtilities.reserveInventory();\n} catch (error) {\n  DBOS.logger.error("Failed to update inventory");\n  await DBOS.setEvent(session_topic, null);\n  return;\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"initiating-a-payment-session",children:"Initiating a payment session"}),"\n",(0,o.jsxs)(n.p,{children:["Next, the workflow initiates a payment session using the ",(0,o.jsx)(n.code,{children:"createPaymentSession"})," ",(0,o.jsx)(n.a,{href:"../tutorials/step-tutorial",children:"step"}),".\nIf this fails, it returns reserved items using the ",(0,o.jsx)(n.code,{children:"undoReserveInventory"})," transaction, notifies its handler, and returns."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'// Attempt to start a payment session. If it fails, restore inventory state and signal the handler.\nconst paymentSession = await ShopUtilities.createPaymentSession();\nif (!paymentSession.url) {\n  DBOS.logger.error("Failed to create payment session");\n  await ShopUtilities.undoReserveInventory();\n  await DBOS.setEvent(session_topic, null);\n  return;\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"notifying-the-handler",children:"Notifying the handler"}),"\n",(0,o.jsxs)(n.p,{children:["After initiating a payment ession, the workflow notifies its handler that the payment session is ready.\nWe use ",(0,o.jsx)(n.code,{children:"DBOS.setEvent"})," to publish the payment session ID to the workflow's ",(0,o.jsx)(n.code,{children:"session_topic"}),", on which the handler is awaiting a notification."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Notify the handler of the payment session ID.\nawait DBOS.setEvent(session_topic, paymentSession.session_id);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"waiting-for-a-payment",children:"Waiting for a payment"}),"\n",(0,o.jsxs)(n.p,{children:["After notifying its handler, the checkout workflow waits for the payment service to notify it whether the customer has paid.\nWe await this notification using the ",(0,o.jsx)(n.code,{children:"DBOS.recv"})," method from the DBOS ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial#workflow-messaging-and-notifications",children:"messages API"}),".\nWhen the customer pays, the payment service sends a callback HTTP request to a separate callback handler (omitted for brevity, source code in ",(0,o.jsx)(n.code,{children:"src/utilities.ts"}),"), which notifies the checkout workflow via [",(0,o.jsx)(n.code,{children:"DBOS.send"}),"]."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Await a notification from the payment service.\nconst notification = await DBOS.recv<string>(payment_complete_topic);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"handling-payment-outcomes",children:"Handling payment outcomes"}),"\n",(0,o.jsx)(n.p,{children:"After receiving a payment notification, the workflow fulfills the order if the payment succeeded and cancels the order and returns reserved inventory if the payment failed or timed out.\nIn a real application, we may want to check with the payment provider in case of a timeout to verify the status of the payment."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"if (notification && notification === 'paid') {\n  // If the payment succeeds, fulfill the order (code omitted for brevity.)\n  DBOS.logger.info(`Checkout with UUID ${DBOS.workflowID} succeeded!`);\n} else {\n  // If the payment fails or times out, cancel the order and return inventory.\n  DBOS.logger.warn(`Checkout with UUID ${DBOS.workflowID} failed or timed out...`);\n  await ShopUtilities.undoReserveInventory();\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"full-workflow-code",children:"Full workflow code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'@DBOS.workflow()\nstatic async checkoutWorkflow(): Promise<void> {\n  // Attempt to update the inventory. Signal the handler if it fails.\n  try {\n    await ShopUtilities.reserveInventory();\n  } catch (error) {\n    DBOS.logger.error("Failed to update inventory");\n    await DBOS.setEvent(session_topic, null);\n    return;\n  }\n\n  // Attempt to start a payment session. If it fails, restore inventory state and signal the handler.\n  const paymentSession = await ShopUtilities.createPaymentSession();\n  if (!paymentSession.url) {\n    DBOS.logger.error("Failed to create payment session");\n    await ShopUtilities.undoReserveInventory();\n    await DBOS.setEvent(session_topic, null);\n    return;\n  }\n\n  // Notify the handler of the payment session ID.\n  await DBOS.setEvent(session_topic, paymentSession.session_id);\n\n  // Await a notification from the payment service.\n  const notification = await DBOS.recv<string>(payment_complete_topic);\n\n  if (notification && notification === \'paid\') {\n    // If the payment succeeds, fulfill the order (code omitted for brevity.)\n    DBOS.logger.info(`Checkout with UUID ${DBOS.workflowUUID} succeeded!`);\n  } else {\n    // If the payment fails or times out, cancel the order and return inventory.\n    DBOS.logger.warn(`Checkout with UUID ${DBOS.workflowUUID} failed or timed out...`);\n    await ShopUtilities.undoReserveInventory();\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"running-it-yourself",children:"Running it Yourself"}),"\n",(0,o.jsx)(n.p,{children:"Now, let's see this code in action!\nFirst, clone and enter the companion repository:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps\ncd dbos-demo-apps/typescript/shop-guide\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then, start the payment service in the background.\nIn one terminal, run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"./start_payment_service.sh\n"})}),"\n",(0,o.jsx)(n.p,{children:"Next, start the shop application.\nIn another terminal, run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npm ci\nnpm run build\nnpx dbos migrate\nnpx dbos start\n"})}),"\n",(0,o.jsx)(n.p,{children:"The output should look like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"[info]: Workflow executor initialized\n[info]: HTTP endpoints supported:\n[info]:     POST  :  /payment_webhook\n[info]:     POST  :  /checkout/:key?\n[info]: DBOS Server is running at http://localhost:8082\n[info]: DBOS Admin Server is running at http://localhost:8083\n"})}),"\n",(0,o.jsx)(n.p,{children:"In another terminal, let's send a request to initiate a checkout:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"curl -X POST http://localhost:8082/checkout\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The response will include two ",(0,o.jsx)(n.code,{children:"curl"})," commands, one for validating the payment and one for cancelling it."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'Submit payment:\ncurl -X POST http://localhost:8086/api/submit_payment -H "Content-type: application/json" -H "dbos-idmpotency-key: f5103e9f-e78a-4aab-9801-edd45a933d6a" -d \'{"session_id":"fd17b90a-1968-440c-adf7-052aaeaaf788"}\'\nCancel payment:\ncurl -X POST http://localhost:8086/api/cancel_payment -H "Content-type: application/json" -H "dbos-idempotency-key: f5103e9f-e78a-4aab-9801-edd45a933d6a" -d \'{"session_id":"fd17b90a-1968-440c-adf7-052aaeaaf788"}\'\n'})}),"\n",(0,o.jsx)(n.p,{children:"If you submit the payment, you should see this output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"[info]: Checkout with UUID <uuid> succeeded!\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you cancel the payment or do nothing, you should see this output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[warn]: Checkout with UUID <uuid> failed or timed out...\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-idempotency-keys",children:"Using Idempotency Keys"}),"\n",(0,o.jsx)(n.p,{children:"You can use idempotency keys to send a request idempotently, guaranteeing it only executes once, even if the request is sent multiple times.\nTo see this in action, set the idempotency key when submitting a checkout request:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"curl -X POST http://localhost:8082/checkout/abcde-12345\n"})}),"\n",(0,o.jsx)(n.p,{children:"No matter how many times you submit this request, you always receive the same response and the checkout is only started once (notice that all printed messages share the same UUID).\nIf you submit the payment for this checkout, you'll see it's only processed once."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},904:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/shop-guide-diagram-8dc4bbb116294e834f6a5ea02d85513a.svg"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);