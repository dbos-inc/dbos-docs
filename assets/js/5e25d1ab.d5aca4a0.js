"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7102],{9596:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"python/tutorials/testing","title":"Testing Your App","description":"Testing DBOS Functions","source":"@site/docs/python/tutorials/testing.md","sourceDirName":"python/tutorials","slug":"/python/tutorials/testing","permalink":"/python/tutorials/testing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"Testing Your App"},"sidebar":"tutorialSidebar","previous":{"title":"Debugging","permalink":"/python/tutorials/debugging"},"next":{"title":"DBOS Class","permalink":"/python/reference/dbos-class"}}');var s=n(4848),o=n(8453);const r={sidebar_position:20,title:"Testing Your App"},i=void 0,c={},d=[{value:"Testing DBOS Functions",id:"testing-dbos-functions",level:3},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Mocking",id:"mocking",level:3},{value:"Resetting Your Database For Testing",id:"resetting-your-database-for-testing",level:3},{value:"Example Test Suite",id:"example-test-suite",level:3}];function l(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"testing-dbos-functions",children:"Testing DBOS Functions"}),"\n",(0,s.jsxs)(t.p,{children:["Because DBOS workflows, steps, and transactions are ordinary Python functions, you can unit test them using any Python testing framework, like ",(0,s.jsx)(t.a,{href:"https://docs.pytest.org/en/stable/",children:"pytest"})," or ",(0,s.jsx)(t.a,{href:"https://docs.python.org/3/library/unittest.html",children:"unittest"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"You must reset the DBOS runtime between each test like this:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def reset_dbos():\n    DBOS.destroy()\n    DBOS()\n    DBOS.reset_system_database()\n    DBOS.launch()\n"})}),"\n",(0,s.jsx)(t.p,{children:"First, destroy any existing DBOS instance.\nThen, create a new DBOS instance.\nNext, reset the internal state of DBOS in Postgres, cleaning up any state left over from previous tests.\nFinally, launch a new DBOS instance."}),"\n",(0,s.jsxs)(t.p,{children:["For example, if using pytest, declare ",(0,s.jsx)(t.code,{children:"reset_dbos"})," as a fixture and require it from every test of a DBOS function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="conftest.py"',children:"import pytest\nfrom dbos import DBOS\n\n@pytest.fixture()\ndef reset_dbos():\n    DBOS.destroy()\n    DBOS()\n    DBOS.reset_system_database()\n    DBOS.launch()\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="test_example.py"',children:"from example_app.main import example_workflow\n\ndef test_example_workflow(reset_dbos):\n    example_input = ...\n    example_output = ...\n    assert example_workflow(example_input) == example_output\n\n"})}),"\n",(0,s.jsx)(t.h3,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["You may want to use a custom configuration of DBOS for testing.\nFor example, you likely want to test your application using an isolated development database.\nTo do this, simply pass a ",(0,s.jsx)(t.a,{href:"/python/reference/configuration",children:"custom configuration"})," into the DBOS constructor."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def reset_dbos():\n    DBOS.destroy()\n    config: DBOSConfig = {\n        "name": "my-app",\n        "database_url": os.environ.get("TESTING_DATABASE_URL"),\n    }\n    DBOS(config=config)\n    DBOS.reset_system_database()\n    DBOS.launch()\n'})}),"\n",(0,s.jsx)(t.h3,{id:"mocking",children:"Mocking"}),"\n",(0,s.jsxs)(t.p,{children:["It is often useful in testing to mock your workflows and steps.\nBecause workflows and steps are just Python functions, they can be mocked using popular mocking libraries like ",(0,s.jsx)(t.a,{href:"https://docs.python.org/3/library/unittest.mock.html",children:"unittest.mock"}),".\nFor example, say we have a workflow ",(0,s.jsx)(t.code,{children:"record_recent_earthquakes"})," that calls two steps (",(0,s.jsx)(t.code,{children:"get_earthquake_data"})," and ",(0,s.jsx)(t.code,{children:"record_earthquake_data"}),"):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@DBOS.workflow()\ndef record_recent_earthquakes(current_time: datetime):\n    end_time = current_time\n    start_time = current_time - timedelta(hours=1)\n    earthquakes = get_earthquake_data(start_time, end_time)\n    if len(earthquakes) == 0:\n        DBOS.logger.info(f"No earthquakes found between {start_time} and {end_time}")\n    for earthquake in earthquakes:\n        new_earthquake = record_earthquake_data(earthquake)\n        if new_earthquake:\n            DBOS.logger.info(f"Recorded earthquake: {earthquake}")\n'})}),"\n",(0,s.jsx)(t.p,{children:"We can test the workflow in isolation by mocking its two steps:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'from unittest.mock import patch\n\ndef test_record_recent_earthquakes(dbos):\n    now = datetime.now()\n    earthquake: EarthquakeData = {\n        "id": "ci40171730",\n        "place": "15 km SW of Searles Valley, CA",\n        "magnitude": 2.21,\n        "timestamp": 1738136375670,\n    }\n    # Create a mock for get_earthquake_data that returns one earthquake\n    with patch("earthquake_tracker.main.get_earthquake_data") as mock_get_data:\n        mock_get_data.return_value = [earthquake]\n        # Create a mock for record_earthquake_data\n        with patch("earthquake_tracker.main.record_earthquake_data") as mock_record_data:\n            mock_record_data.return_value = True\n\n            # Call the workflow\n            record_recent_earthquakes(now)\n\n            # Verify get_earthquake_data was called once with correct parameters\n            start_time = now - timedelta(hours=1)\n            mock_get_data.assert_called_once_with(start_time, now)\n\n            # Verify record_earthquake_data was called once with correct parameters\n            mock_record_data.assert_called_once_with(earthquake)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"resetting-your-database-for-testing",children:"Resetting Your Database For Testing"}),"\n",(0,s.jsx)(t.p,{children:"If your application extensively uses the database, it may be useful to reset your testing database between tests, to ensure tests are fully isolated.\nThis can be involved, as you must destroy your testing database then recreate it programatically using your migrations.\nHere is some example code for how to do it using SQLAlchemy, Alembic, and pytest:"}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"Resetting a Database Between Tests"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="conftest.py"',children:'import pytest\nimport sqlalchemy as sa\nfrom alembic import script\nfrom alembic.config import Config\nfrom alembic.operations import Operations\nfrom alembic.runtime.environment import EnvironmentContext\nfrom alembic.runtime.migration import MigrationContext\nfrom dbos import DBOS, ConfigFile, load_config\n\n\ndef reset_database(config: ConfigFile):\n    postgres_db_url = sa.URL.create(\n        "postgresql+psycopg",\n        username=config["database"]["username"],\n        password=config["database"]["password"],\n        host=config["database"]["hostname"],\n        port=config["database"]["port"],\n        database="postgres",\n    )\n    engine = sa.create_engine(postgres_db_url, isolation_level="AUTOCOMMIT")\n    with engine.connect() as conn:\n        conn.execute(\n            sa.text(\n                f"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = \'{config["database"]["app_db_name"]}\'"\n            )\n        )\n        conn.execute(\n            sa.text(f"DROP DATABASE IF EXISTS {config["database"]["app_db_name"]}")\n        )\n        conn.execute(sa.text(f"CREATE DATABASE {config["database"]["app_db_name"]}"))\n\n\ndef run_migrations(config: ConfigFile):\n    app_db_url = sa.URL.create(\n        "postgresql+psycopg",\n        username=config["database"]["username"],\n        password=config["database"]["password"],\n        host=config["database"]["hostname"],\n        port=config["database"]["port"],\n        database=config["database"]["app_db_name"],\n    )\n    alembic_cfg = Config()\n    alembic_cfg.set_main_option("script_location", "./migrations")\n    script_dir = script.ScriptDirectory.from_config(alembic_cfg)\n\n    def do_run_migrations(connection):\n        context = MigrationContext.configure(connection)\n        with Operations.context(context):\n            for revision in script_dir.walk_revisions("base", "head"):\n                if script_dir._upgrade_revs(\n                    revision.revision, context.get_current_revision()\n                ):\n                    revision.module.upgrade()\n\n    with sa.create_engine(app_db_url).connect() as conn:\n        with EnvironmentContext(alembic_cfg, script_dir, fn=do_run_migrations):\n            with conn.begin():\n                do_run_migrations(conn)\n\n\n@pytest.fixture()\ndef dbos():\n    DBOS.destroy()\n    config = load_config()\n    config["database"]["app_db_name"] = f"{config["database"]["app_db_name"]}_test"\n    reset_database(config)\n    run_migrations(config)\n    DBOS(config=config)\n    DBOS.reset_system_database()\n    DBOS.launch()\n'})})]}),"\n",(0,s.jsx)(t.h3,{id:"example-test-suite",children:"Example Test Suite"}),"\n",(0,s.jsxs)(t.p,{children:["To see a DBOS app tested using pytest, check out the ",(0,s.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/earthquake-tracker",children:"Earthquake Tracker"})," example on GitHub."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);