"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6819],{6900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"typescript/tutorials/workflow-tutorial","title":"Workflows","description":"Workflows provide durable execution so you can write programs that are resilient to any failure.","source":"@site/docs/typescript/tutorials/workflow-tutorial.md","sourceDirName":"typescript/tutorials","slug":"/typescript/tutorials/workflow-tutorial","permalink":"/typescript/tutorials/workflow-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Workflows","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Learn DBOS TypeScript","permalink":"/typescript/programming-guide"},"next":{"title":"Steps","permalink":"/typescript/tutorials/step-tutorial"}}');var o=n(4848),r=n(8453);const i={sidebar_position:10,title:"Workflows",toc_max_heading_level:3},a=void 0,l={},c=[{value:"Reliability Guarantees",id:"reliability-guarantees",level:2},{value:"Determinism",id:"determinism",level:2},{value:"Workflow IDs",id:"workflow-ids",level:2},{value:"Starting Workflows Asynchronously",id:"starting-workflows-asynchronously",level:2},{value:"Workflow Events",id:"workflow-events",level:2},{value:"setEvent",id:"setevent",level:4},{value:"getEvent",id:"getevent",level:4},{value:"Events Example",id:"events-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees-1",level:4},{value:"Workflow Messaging and Notifications",id:"workflow-messaging-and-notifications",level:2},{value:"Send",id:"send",level:4},{value:"Recv",id:"recv",level:4},{value:"Messages Example",id:"messages-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees-2",level:4},{value:"Workflow Management",id:"workflow-management",level:2},{value:"Listing Workflows",id:"listing-workflows",level:4},{value:"Cancelling Workflows",id:"cancelling-workflows",level:4},{value:"Resuming Workflows",id:"resuming-workflows",level:4},{value:"Restarting Workflows",id:"restarting-workflows",level:4}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Workflows provide ",(0,o.jsx)(t.strong,{children:"durable execution"})," so you can write programs that are ",(0,o.jsx)(t.strong,{children:"resilient to any failure"}),".\nWorkflows are comprised of ",(0,o.jsx)(t.a,{href:"/typescript/tutorials/step-tutorial",children:"steps"}),", which are ordinary TypeScript functions annotated with ",(0,o.jsx)(t.code,{children:"@DBOS.step()"}),".\nIf a workflow is interrupted for any reason (e.g., an executor restarts or crashes), when your program restarts the workflow automatically resumes execution from the last completed step."]}),"\n",(0,o.jsxs)(t.p,{children:["Here's an example workflow from the ",(0,o.jsx)(t.a,{href:"/typescript/programming-guide",children:"programming guide"}),".\nIt signs an online guestbook then records the signature in the database.\nUsing a workflow guarantees that every guestbook signature is recorded in the database, even if execution is interrupted."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"class Guestbook {\n\n  @DBOS.workflow()\n  static async greetingEndpoint(name: string): Promise<string> {\n    await Guestbook.signGuestbook(name);\n    await Guestbook.insertGreeting(name);\n    return `Thank you for being awesome, ${name}!`;\n  }\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"reliability-guarantees",children:"Reliability Guarantees"}),"\n",(0,o.jsx)(t.p,{children:"Workflows provide the following reliability guarantees.\nThese guarantees assume that the application and database may crash and go offline at any point in time, but are always restarted and return online."}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Workflows always run to completion.  If a DBOS process crashes while executing a workflow and is restarted, it resumes the workflow from the last completed step."}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/typescript/tutorials/step-tutorial",children:"Steps"})," are tried ",(0,o.jsx)(t.em,{children:"at least once"})," but are never re-executed after they complete.  If a failure occurs inside a step, the step may be retried, but once a step has completed (returned a value or thrown an exception to the calling workflow), it will never be re-executed."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/typescript/tutorials/transaction-tutorial",children:"Transactions"})," commit ",(0,o.jsx)(t.em,{children:"exactly once"}),".  Once a workflow commits a transaction, it will never retry that transaction."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"determinism",children:"Determinism"}),"\n",(0,o.jsxs)(t.p,{children:["Workflows are in most respects normal TypeScript functions.\nThey can have loops, branches, conditionals, and so on.\nHowever, workflow functions must be ",(0,o.jsx)(t.strong,{children:"deterministic"}),": if called multiple times with the same inputs, it should invoke the same steps with the same inputs in the same order.\nIf you need to perform a non-deterministic operation like accessing the database, calling a third-party API, generating a random number, or getting the local time, you shouldn't do it directly in a workflow function.\nInstead, you should do all database operations in ",(0,o.jsx)(t.a,{href:"./transaction-tutorial",children:"transactions"})," and all other non-deterministic operations in ",(0,o.jsx)(t.a,{href:"/typescript/tutorials/step-tutorial",children:"steps"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["For example, ",(0,o.jsx)(t.strong,{children:"don't do this"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'class Example {\n    @DBOS.workflow()\n    static async exampleWorkflow() {\n        // Don\'t make an HTTP request in a workflow function\n        const body = await fetch("https://example.com").then(r => r.text()); \n        await Example.exampleTransaction(body);\n    }\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"Do this instead:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'class Example {\n    @DBOS.step()\n    static async fetchBody() {\n      // Instead, make HTTP requests in steps\n      return await fetch("https://example.com").then(r => r.text());\n    }\n\n    @DBOS.workflow()\n    static async exampleWorkflow() {\n        const body = await Example.fetchBody();\n        await Example.exampleTransaction(body);\n    }\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"workflow-ids",children:"Workflow IDs"}),"\n",(0,o.jsxs)(t.p,{children:["Every time you execute a workflow, that execution is assigned a unique ID, by default a ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"}),".\nYou can access this ID through the ",(0,o.jsx)(t.code,{children:"DBOS.workflowID"})," context variable.\nWorkflow IDs are useful for communicating with workflows and developing interactive workflows."]}),"\n",(0,o.jsx)(t.h2,{id:"starting-workflows-asynchronously",children:"Starting Workflows Asynchronously"}),"\n",(0,o.jsxs)(t.p,{children:["You can use ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/dbos-class#starting-background-workflows",children:(0,o.jsx)(t.code,{children:"DBOS.startWorkflow"})})," to durably start a workflow in the background without waiting for it to complete.\nThis is useful for long-running or interactive workflows."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"DBOS.startWorkflow"})," returns a ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/workflow-handles",children:"workflow handle"}),", from which you can access information about the workflow or wait for it to complete and retrieve its result.\nWhen you ",(0,o.jsx)(t.code,{children:"await DBOS.startWorkflow"}),", the method resolves after the handle is durably created; at this point the workflow is guaranteed to run to completion even if your app is interrupted."]}),"\n",(0,o.jsx)(t.p,{children:"Here's an example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'class Example {\n    @DBOS.workflow()\n    static async exampleWorkflow(var1: str, var2: str) {\n        return var1 + var2;\n    }\n}\n\nasync function main() {\n    // Start exampleWorkflow in the background\n    const handle = await DBOS.startWorkflow(Example).exampleWorkflow("one", "two");\n    // Wait for the workflow to complete and return its results\n    const result = await handle.getResult();\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["You can also use ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/dbos-class#dbosretrieveworkflow",children:(0,o.jsx)(t.code,{children:"DBOS.retrieve_workflow"})})," to retrieve a workflow's handle from its ID."]}),"\n",(0,o.jsx)(t.h2,{id:"workflow-events",children:"Workflow Events"}),"\n",(0,o.jsxs)(t.p,{children:["Workflows can emit ",(0,o.jsx)(t.em,{children:"events"}),", which are key-value pairs associated with the workflow's ID.\nThey are useful for publishing information about the state of an active workflow, for example to transmit information to the workflow's caller."]}),"\n",(0,o.jsx)(t.h4,{id:"setevent",children:"setEvent"}),"\n",(0,o.jsxs)(t.p,{children:["Any workflow can call ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/dbos-class#setting-and-getting-events",children:(0,o.jsx)(t.code,{children:"DBOS.setEvent"})})," to publish a key-value pair, or update its value if has already been published."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"DBOS.setEvent<T>(key: string, value: T): Promise<void>\n"})}),"\n",(0,o.jsx)(t.h4,{id:"getevent",children:"getEvent"}),"\n",(0,o.jsxs)(t.p,{children:["You can call ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/dbos-class#setting-and-getting-events",children:(0,o.jsx)(t.code,{children:"DBOS.getEvent"})})," to retrieve the value published by a particular workflow ID for a particular key.\nIf the event does not yet exist, this call waits for it to be published, returning ",(0,o.jsx)(t.code,{children:"null"})," if the wait times out."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"DBOS.getEvent<T>(workflowID: string, key: string, timeoutSeconds?: number): Promise<T | null>\n"})}),"\n",(0,o.jsx)(t.h4,{id:"events-example",children:"Events Example"}),"\n",(0,o.jsxs)(t.p,{children:["Events are especially useful for writing interactive workflows that communicate information to their caller.\nFor example, in the ",(0,o.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/e-commerce",children:"e-commerce demo"}),", the checkout workflow, after validating an order, directs the customer to a secure payments service to handle credit card processing.\nTo communicate the payments URL to the customer, it uses events."]}),"\n",(0,o.jsxs)(t.p,{children:["The checkout workflow emits the payments URL using ",(0,o.jsx)(t.code,{children:"setEvent()"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"  @DBOS.workflow()\n  static async checkoutWorkflow(...): Promise<void> {\n    ...\n    const paymentsURL = ...\n    await DBOS.setEvent(PAYMENT_URL, paymentsURL);\n    ... \n  }\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The HTTP handler that originally started the workflow uses ",(0,o.jsx)(t.code,{children:"getEvent()"})," to await this URL, then redirects the customer to it:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"  @DBOS.postApi('/api/checkout_session')\n  static async webCheckout(...): Promise<void> {\n    const handle = await DBOS.startWorkflow(Shop).checkoutWorkflow(...);\n    const url = await DBOS.getEvent<string>(handle.workflowID, PAYMENT_URL);\n    if (url === null) {\n      DBOS.koaContext.redirect(`${origin}/checkout/cancel`);\n    } else {\n      DBOS.koaContext.redirect(url);\n    }\n  }\n"})}),"\n",(0,o.jsx)(t.h4,{id:"reliability-guarantees-1",children:"Reliability Guarantees"}),"\n",(0,o.jsxs)(t.p,{children:["All events are persisted to the database, so the latest version of an event is always retrievable.\nAdditionally, if ",(0,o.jsx)(t.code,{children:"get_event"})," is called in a workflow, the retrieved value is persisted in the database so workflow recovery can use that value, even if the event is later updated later."]}),"\n",(0,o.jsx)(t.h2,{id:"workflow-messaging-and-notifications",children:"Workflow Messaging and Notifications"}),"\n",(0,o.jsx)(t.p,{children:"You can send messages to a specific workflow ID.\nThis is useful for sending notifications to an active workflow."}),"\n",(0,o.jsx)(t.h4,{id:"send",children:"Send"}),"\n",(0,o.jsxs)(t.p,{children:["You can call ",(0,o.jsx)(t.code,{children:"DBOS.send()"})," to send a message to a workflow.\nMessages can optionally be associated with a topic and are queued on the receiver per topic."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"DBOS.send<T>(destinationID: string, message: T, topic?: string): Promise<void>;\n"})}),"\n",(0,o.jsx)(t.h4,{id:"recv",children:"Recv"}),"\n",(0,o.jsxs)(t.p,{children:["Workflows can call ",(0,o.jsx)(t.code,{children:"DBOS.recv()"})," to receive messages sent to them, optionally for a particular topic.\nEach call to ",(0,o.jsx)(t.code,{children:"recv()"})," waits for and consumes the next message to arrive in the queue for the specified topic, returning ",(0,o.jsx)(t.code,{children:"None"})," if the wait times out.\nIf the topic is not specified, this method only receives messages sent without a topic."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"DBOS.recv<T>(topic?: string, timeoutSeconds?: number): Promise<T | null>\n"})}),"\n",(0,o.jsx)(t.h4,{id:"messages-example",children:"Messages Example"}),"\n",(0,o.jsxs)(t.p,{children:["Messages are especially useful for sending notifications to a workflow.\nFor example, in the ",(0,o.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/e-commerce",children:"e-commerce demo"}),", the checkout workflow, after redirecting customers to a secure payments service, must wait for a notification from that service that the payment has finished processing."]}),"\n",(0,o.jsxs)(t.p,{children:["To wait for this notification, the payments workflow uses ",(0,o.jsx)(t.code,{children:"recv()"}),", executing failure-handling code if the notification doesn't arrive in time:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"@DBOS.workflow()\nstatic async checkoutWorkflow(...): Promise<void> {\n  ...\n  const notification = await DBOS.recv<string>(PAYMENT_STATUS, timeout);\n  if (notification) {\n      ... // Handle the notification.\n  } else {\n      ... // Handle a timeout.\n  }\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["A webhook waits for the payment processor to send the notification, then uses ",(0,o.jsx)(t.code,{children:"send()"})," to forward it to the workflow:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"@DBOS.postApi('/payment_webhook')\nstatic async paymentWebhook(): Promise<void> {\n  const notificationMessage = ... // Parse the notification.\n  const workflowID = ... // Retrieve the workflow ID from notification metadata.\n  await DBOS.send(workflow_id, notificationMessage, PAYMENT_STATUS);\n}\n"})}),"\n",(0,o.jsx)(t.h4,{id:"reliability-guarantees-2",children:"Reliability Guarantees"}),"\n",(0,o.jsxs)(t.p,{children:["All messages are persisted to the database, so if ",(0,o.jsx)(t.code,{children:"send"})," completes successfully, the destination workflow is guaranteed to be able to ",(0,o.jsx)(t.code,{children:"recv"})," it.\nIf you're sending a message from a workflow, DBOS guarantees exactly-once delivery because ",(0,o.jsx)(t.a,{href:"#reliability-guarantees",children:"workflows are reliable"}),".\nIf you're sending a message from normal TypeScript code, you can specify an idempotency key for ",(0,o.jsx)(t.code,{children:"send"})," or use ",(0,o.jsx)(t.a,{href:"/typescript/reference/transactapi/dbos-class#assigning-workflow-ids",children:(0,o.jsx)(t.code,{children:"DBOS.withNextWorkflowID"})})," to guarantee exactly-once delivery."]}),"\n",(0,o.jsx)(t.h2,{id:"workflow-management",children:"Workflow Management"}),"\n",(0,o.jsxs)(t.p,{children:["Because DBOS stores the execution state of workflows in Postgres, you can view and manage your workflows from the command line.\nThese commands are also available for applications deployed to DBOS Cloud using the ",(0,o.jsx)(t.a,{href:"/cloud-tutorials/cloud-cli",children:"cloud CLI"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"listing-workflows",children:"Listing Workflows"}),"\n",(0,o.jsx)(t.p,{children:"You can list your application's workflows with:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"npx dbos workflow list\n"})}),"\n",(0,o.jsxs)(t.p,{children:["By default, this returns your ten most recently started workflows.\nYou can parameterize this command for advanced search, see full documentation ",(0,o.jsx)(t.a,{href:"/typescript/reference/tools/cli#npx-dbos-workflow-queue-list",children:"here"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"cancelling-workflows",children:"Cancelling Workflows"}),"\n",(0,o.jsx)(t.p,{children:"You can cancel the execution of a workflow with:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"npx dbos workflow cancel <workflow-id>\n"})}),"\n",(0,o.jsx)(t.p,{children:"Currently, this does not halt execution, but prevents the workflow from being automatically recovered."}),"\n",(0,o.jsx)(t.h4,{id:"resuming-workflows",children:"Resuming Workflows"}),"\n",(0,o.jsx)(t.p,{children:"You can resume a workflow from its last completed step with:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"npx dbos workflow resume <workflow-id>\n"})}),"\n",(0,o.jsx)(t.p,{children:"You can use this to resume workflows that are cancelled or that have exceeded their maximum recovery attempts.\nYou can also use this to start an enqueued workflow immediately, bypassing its queue."}),"\n",(0,o.jsx)(t.h4,{id:"restarting-workflows",children:"Restarting Workflows"}),"\n",(0,o.jsx)(t.p,{children:"You can start a new execution of a workflow with:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"npx dbos workflow restart <workflow-id>\n"})}),"\n",(0,o.jsx)(t.p,{children:"The new workflow has the same inputs as the original, but a new workflow ID."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);