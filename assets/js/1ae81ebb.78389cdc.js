"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7176],{6765:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=t(4848),a=t(8453);const i={sidebar_position:8,title:"Integrating with Kafka",description:"Overview of using DBOS with Kafka",pagination_next:null},s=void 0,r={id:"python/tutorials/kafka-integration",title:"Integrating with Kafka",description:"Overview of using DBOS with Kafka",source:"@site/docs/python/tutorials/kafka-integration.md",sourceDirName:"python/tutorials",slug:"/python/tutorials/kafka-integration",permalink:"/python/tutorials/kafka-integration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Integrating with Kafka",description:"Overview of using DBOS with Kafka",pagination_next:null},sidebar:"tutorialSidebar",previous:{title:"Logging & Tracing",permalink:"/python/tutorials/logging-and-tracing"}},c={},l=[];function f(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this guide, you'll learn how to use DBOS transactions and workflows to process Kafka messages with exactly-once semantics."}),"\n",(0,o.jsxs)(n.p,{children:["First, install ",(0,o.jsx)(n.a,{href:"https://docs.confluent.io/kafka-clients/python/current/overview.html",children:"Confluent Kafka"})," in your application:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"pip install confluent-kafka\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then, define your transaction or workflow. It must take in a Kafka message as an input parameter:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, KafkaMessage\n\n@DBOS.workflow()\ndef test_kafka_workflow(msg: KafkaMessage):\n    DBOS.logger.info(f"Message received: {msg.value.decode()}")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then, annotate your function with a ",(0,o.jsx)(n.a,{href:"../reference/decorators#kafka_consumer",children:(0,o.jsx)(n.code,{children:"@DBOS.kafka_consumer"})})," decorator specifying which brokers to connect to and which topics to consume from.\nConfiguration setting details are available from the\n",(0,o.jsx)(n.a,{href:"https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#pythonclient-configuration",children:"Confluent Kafka API docs"})," and the\n",(0,o.jsx)(n.a,{href:"https://kafka.apache.org/documentation/#consumerconfigs",children:"official Kafka documentation"}),".\nAt a minimum, you must specify ",(0,o.jsx)(n.a,{href:"https://kafka.apache.org/documentation/#consumerconfigs_bootstrap.servers",children:(0,o.jsx)(n.code,{children:"bootstrap.servers"})})," and\n",(0,o.jsx)(n.a,{href:"https://kafka.apache.org/documentation/#consumerconfigs_group.id",children:(0,o.jsx)(n.code,{children:"group.id"})})," configuration settings."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, KafkaMessage\n\n@DBOS.kafka_consumer(\n        config={\n            "bootstrap.servers": "localhost:9092",\n            "group.id": "dbos-kafka-group",\n        },\n        topics=["example-topic"],\n)\n@DBOS.workflow()\ndef test_kafka_workflow(msg: KafkaMessage):\n    DBOS.logger.info(f"Message received: {msg.value.decode()}")\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Under the hood, DBOS constructs an ",(0,o.jsx)(n.a,{href:"./idempotency-tutorial",children:"idempotency key"})," for each Kafka message from its topic, partition, and offset and passes it into your workflow or transaction.\nThis combination is guaranteed to be unique for each Kafka cluster.\nThus, even if a message is delivered multiple times (e.g., due to transient network failures or application interruptions), your transaction or workflow processes it exactly once."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const a={},i=o.createContext(a);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);