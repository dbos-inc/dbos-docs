"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[8063],{3967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"typescript/tutorials/transaction-tutorial","title":"Transactions","description":"Learn how to perform database operations","source":"@site/docs/typescript/tutorials/transaction-tutorial.md","sourceDirName":"typescript/tutorials","slug":"/typescript/tutorials/transaction-tutorial","permalink":"/typescript/tutorials/transaction-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30,"title":"Transactions","description":"Learn how to perform database operations"},"sidebar":"tutorialSidebar","previous":{"title":"Steps","permalink":"/typescript/tutorials/step-tutorial"},"next":{"title":"Using Drizzle","permalink":"/typescript/tutorials/orms/using-drizzle"}}');var i=t(4848),a=t(8453);const s={sidebar_position:30,title:"Transactions",description:"Learn how to perform database operations"},o=void 0,c={},l=[{value:"Schema Management",id:"schema-management",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{TabItem:t,Tabs:r}=n;return t||m("TabItem",!0),r||m("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["We recommend performing database operations in ",(0,i.jsx)(n.em,{children:"transactions"}),".\nThese are a special type of ",(0,i.jsx)(n.a,{href:"/typescript/tutorials/step-tutorial",children:"step"})," that are optimized for database accesses.\nThey execute as a single ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_transaction",children:"database transaction"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To make a TypeScript function a transaction, annotate it with the ",(0,i.jsx)(n.a,{href:"/typescript/reference/transactapi/dbos-class#dbostransaction",children:(0,i.jsx)(n.code,{children:"DBOS.transaction"})})," decorator.\nThen, access the database using raw SQL or one of several supported ORMs, including ",(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-knex",children:"Knex.js"}),", ",(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-drizzle",children:"Drizzle"}),", ",(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-typeorm",children:"TypeORM"}),", and ",(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-prisma",children:"Prisma"}),".\nYou can configure which ORM to use in your ",(0,i.jsx)(n.a,{href:"/typescript/reference/configuration",children:(0,i.jsx)(n.code,{children:"dbos-config.yaml"})})," file.\nKnex is the default."]}),"\n",(0,i.jsx)(n.p,{children:"Here are some examples:"}),"\n",(0,i.jsxs)(r,{groupId:"database-clients",children:[(0,i.jsx)(t,{value:"knex",label:"Knex",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface GreetingRecord {\n  name: string;\n  note: string;\n}\n\nexport class Greetings {\n  //...\n  @DBOS.transaction()\n  static async insertGreeting(gr: GreetingRecord) {\n    await DBOS.knexClient('greetings').insert(gr);\n  }\n\n  @DBOS.transaction({readOnly: true})\n  static async getGreetings(): Promise<GreetingRecord[]>  {\n    return await DBOS.knexClient<GreetingRecord>('greetings').select('*');\n  }\n}\n"})})}),(0,i.jsx)(t,{value:"drizzle",label:"Drizzle",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export const GreetingRecord = pgTable('greetings', {\n  name: text('name'),\n  note: text('note'),\n});\n\nfunction getClient() { return DBOS.drizzleClient as NodePgDatabase; }\n\nexport class Greetings {\n  //..\n  @DBOS.transaction()\n  static async insertGreeting(name: string, note: string) {\n    await getClient().insert(GreetingRecord).values({name: name, note: note});\n  }\n\n  @DBOS.transaction({ readOnly:true })\n  static async getGreetings(): Promise<{name: string | null, note: string | null}[]> {\n    return getClient().select().from(GreetingRecord);\n  }\n}\n"})})}),(0,i.jsx)(t,{value:"typeorm",label:"TypeORM",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@Entity('greetings') //set the name of the table to 'greetings'\nexport class GreetingRecord {\n    @PrimaryGeneratedColumn() //note: TypeORM requires at least one primary key\n    id!: number;\n\n    @Column()\n    name!: string;\n\n    @Column()\n    note!: string;\n}\n\nfunction getClient() {return DBOS.typeORMClient as EntityManager;}\n\n@OrmEntities([GreetingRecord])\nexport class Greetings {\n  //...\n  @DBOS.transaction()\n  static async insertGreeting(name: string, note: string) {\n    const greeting = new GreetingRecord();\n    greeting.name = name;\n    greeting.note = note;\n    await getClient().save(greeting);\n  }\n\n  @DBOS.transaction({ readOnly:true })\n  static async getGreetings(): Promise<GreetingRecord[]> {\n    return await getClient().getRepository(GreetingRecord).find();\n  }  \n}\n"})})}),(0,i.jsx)(t,{value:"prisma",label:"Prisma",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'//Model specified in prisma/schema.prisma:\n//\n//model GreetingRecord {\n//  @@map("greetings") \n//  greeting_id Int @id @default(autoincrement()) //Note: Prisma requires at least one primary key\n//  name String\n//  note String\n//}\n\n// Use the generated Prisma client and GreetingRecord class\nimport { PrismaClient, GreetingRecord } from "@prisma/client";\n\nfunction getClient() {return DBOS.prismaClient as PrismaClient;}\n\nexport class Greetings {\n  //...\n  @DBOS.transaction()\n  static async insertGreeting(name: string, note: string) {\n    await getClient().greetingRecord.create({\n      data: {\n        name: name,\n        note: note\n      },\n    });\n  }\n\n  @DBOS.transaction({ readOnly:true })\n  static async getGreetings(): Promise<GreetingRecord[]> {\n    return await getClient().greetingRecord.findMany();\n  }\n}\n'})})}),(0,i.jsx)(t,{value:"raw",label:"Raw SQL w/ Knex",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface GreetingRecord {\n  name: string;\n  note: string;\n}\n\nexport class Greetings {\n  //...\n  @DBOS.transaction()\n  static async insertGreeting(gr: GreetingRecord) {\n    await ctxt.knexClient.raw('INSERT INTO greetings (name, note) VALUES (?, ?)', [gr.name, gr.note]);\n  }\n\n  @DBOS.transaction({readOnly: true})\n  static async getGreetings(): Promise<GreetingRecord[]> {\n    const result = await DBOS.knexClient.raw('SELECT name, note FROM greetings') as { rows: GreetingRecord[] };\n    return result.rows;\n  }\n}\n"})})})]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["As shown above, we suggest decorating read-only transactions with ",(0,i.jsx)(n.code,{children:"@DBOS.transaction({readOnly: true})"})," for better performance."]})}),"\n",(0,i.jsx)(n.h2,{id:"schema-management",children:"Schema Management"}),"\n",(0,i.jsx)(n.p,{children:"We strongly recommend you manage your database schema using migrations."}),"\n",(0,i.jsxs)(n.p,{children:["Migration commands are configured in your ",(0,i.jsx)(n.a,{href:"/typescript/reference/configuration",children:(0,i.jsx)(n.code,{children:"dbos-config.yaml"})})," file.\nAt migration time, DBOS runs all migration commands.\nPlease see these guides for details on how to configure migrations with each supported ORM:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-knex#schema-management",children:"Knex schema management guide."})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-drizzle#schema-management",children:"Drizzle schema management guide."})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-typeorm#schema-management",children:"TypeORM schema management guide."})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/typescript/tutorials/orms/using-prisma#schema-management",children:"Prisma schema management guide."})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);