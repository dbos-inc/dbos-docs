"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9150],{1644:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=t(4848),o=t(8453);const a={displayed_sidebar:"examplesSidebar",sidebar_position:3,title:"Hacker News Slackbot"},r=void 0,i={id:"python/examples/hacker-news-bot",title:"Hacker News Slackbot",description:"In this example, we use DBOS to build and deploy a scheduled job that periodically searches Hacker News for people commenting about serverless computing and posts the comments to Slack.",source:"@site/docs/python/examples/hacker-news-bot.md",sourceDirName:"python/examples",slug:"/python/examples/hacker-news-bot",permalink:"/python/examples/hacker-news-bot",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{displayed_sidebar:"examplesSidebar",sidebar_position:3,title:"Hacker News Slackbot"},sidebar:"examplesSidebar",previous:{title:"Earthquake Tracker",permalink:"/python/examples/earthquake-tracker"},next:{title:"AI-Powered Slackbot",permalink:"/python/examples/rag-slackbot"}},l={},c=[{value:"Import and Initialize the App",id:"import-and-initialize-the-app",level:2},{value:"Searching Hacker News",id:"searching-hacker-news",level:2},{value:"Posting to Slack",id:"posting-to-slack",level:2},{value:"Scheduling the Search",id:"scheduling-the-search",level:2},{value:"Try it Yourself!",id:"try-it-yourself",level:2},{value:"Setting Up Slack",id:"setting-up-slack",level:3},{value:"Deploying to the Cloud",id:"deploying-to-the-cloud",level:3},{value:"Running Locally",id:"running-locally",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In this example, we use DBOS to build and deploy a scheduled job that periodically searches Hacker News for people commenting about serverless computing and posts the comments to Slack."}),"\n",(0,s.jsxs)(n.p,{children:["All source code is ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/hackernews-alerts",children:"available on GitHub"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"import-and-initialize-the-app",children:"Import and Initialize the App"}),"\n",(0,s.jsx)(n.p,{children:"Let's start off with imports and initializing the DBOS app."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import html\nimport os\nimport re\nimport threading\nfrom datetime import UTC, datetime, timedelta\n\nimport requests\nimport slack_sdk\nfrom dbos import DBOS\n\nDBOS()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"searching-hacker-news",children:"Searching Hacker News"}),"\n",(0,s.jsxs)(n.p,{children:["Next, let's write a function that searches Hacker News.\nThis function uses Algolia's Hacker News Search API to find all comments in the last ",(0,s.jsx)(n.em,{children:"N"})," hours containing a search term.\nIt returns matching comments and links to them.\nWe annotate this function with ",(0,s.jsx)(n.code,{children:"@DBOS.step"})," so later we can durably call it from our scheduled workflow."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef search_hackernews(query: str, window_size_hours: int):\n    threshold = datetime.now(UTC) - timedelta(hours=window_size_hours)\n\n    params = {\n        "tags": "comment",\n        "query": query,\n        "numericFilters": f"created_at_i>{threshold.timestamp()}",\n    }\n\n    response = requests.get("http://hn.algolia.com/api/v1/search", params).json()\n\n    hits = []\n    for hit in response["hits"]:\n        # Reformat the comment by unescaping HTML, adding newlines, and removing HTML tags\n        comment = hit["comment_text"]\n        comment = re.sub("<p>", "\\n", html.unescape(comment))\n        comment = re.sub("<[^<]+?>", "", comment)\n        url = f"https://news.ycombinator.com/item?id={hit[\'objectID\']}"\n        hits.append((comment, url))\n    return hits\n'})}),"\n",(0,s.jsx)(n.h2,{id:"posting-to-slack",children:"Posting to Slack"}),"\n",(0,s.jsxs)(n.p,{children:["Next, let's write a function that posts a Hacker News comment and its URL to Slack.\nThis function requires a Slack bot token supplied through an environment variable.\nWe'll explain later how to generate one.\nAgain, we annotate this function with ",(0,s.jsx)(n.code,{children:"@DBOS.step"})," so later we can durably call it from our scheduled workflow."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef post_to_slack(comment: str, url: str):\n    message = f"{comment}\\n\\n{url}"\n    client = slack_sdk.WebClient(token=os.environ["SLACK_HN_BOT_OAUTH_TOKEN"])\n    client.chat_postMessage(\n        channel="hacker-news-alerts",\n        text=message,\n        unfurl_links=False,\n        unfurl_media=False,\n    )\n'})}),"\n",(0,s.jsx)(n.h2,{id:"scheduling-the-search",children:"Scheduling the Search"}),"\n",(0,s.jsxs)(n.p,{children:["Next, let's write a scheduled job that runs the search every hour and posts its findings to Slack.\nThe ",(0,s.jsx)(n.a,{href:"/python/tutorials/scheduled-workflows",children:(0,s.jsx)(n.code,{children:"@DBOS.scheduled"})})," decorator tells DBOS to run this function on a schedule defined in ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"crontab syntax"}),", in this case once per hour.\nThe ",(0,s.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial",children:(0,s.jsx)(n.code,{children:"@DBOS.workflow"})})," decorator tells DBOS to durably execute this function, so it runs exactly-once per hour and you'll never miss a Hacker News comment or record a duplicate."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@DBOS.scheduled("0 * * * *")\n@DBOS.workflow()\ndef run_hourly(scheduled_time: datetime, actual_time: datetime):\n    results = search_hackernews("serverless", window_size_hours=1)\n    for comment, url in results:\n        post_to_slack(comment, url)\n    DBOS.logger.info(f"Found {len(results)} comments at {str(actual_time)}")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Finally, in our main function, let's launch DBOS, then sleep the main thread forever while the scheduled job runs in the background:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    DBOS.launch()\n    threading.Event().wait()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"try-it-yourself",children:"Try it Yourself!"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-slack",children:"Setting Up Slack"}),"\n",(0,s.jsxs)(n.p,{children:["To run this app, you need a Slack bot token for your workspace.\nFollow ",(0,s.jsx)(n.a,{href:"https://api.slack.com/tutorials/tracks/getting-a-token",children:"this tutorial"}),' to generate one.\nYour token should start with "xoxb".\nSet it as an environment variable like so:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export SLACK_HN_BOT_OAUTH_TOKEN=<your_token>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You should also create a Slack channel named ",(0,s.jsx)(n.code,{children:"hacker-news-alerts"})," in your workspace for the bot to post to!"]}),"\n",(0,s.jsx)(n.h3,{id:"deploying-to-the-cloud",children:"Deploying to the Cloud"}),"\n",(0,s.jsx)(n.p,{children:"To deploy this app as a persistent scheduled job to DBOS Cloud, first install the DBOS Cloud CLI (requires Node):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm i -g @dbos-inc/dbos-cloud\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then clone the ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"dbos-demo-apps"})," repository and deploy:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps.git\ncd python/hackernews-alerts\ndbos-cloud app deploy\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can visit the ",(0,s.jsx)(n.a,{href:"https://console.dbos.dev/",children:"DBOS Cloud Console"})," to see your app's status and logs."]}),"\n",(0,s.jsx)(n.h3,{id:"running-locally",children:"Running Locally"}),"\n",(0,s.jsxs)(n.p,{children:["First, clone and enter the ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"dbos-demo-apps"})," repository:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps.git\ncd python/hackernews-alerts\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then create a virtual environment:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python3 -m venv .venv\nsource .venv/bin/activate\n"})}),"\n",(0,s.jsx)(n.p,{children:"DBOS requires a Postgres database.\nIf you don't already have one, you can start one with Docker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"export PGPASSWORD=dbos\npython3 start_postgres_docker.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then run the app in the virtual environment:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pip install -r requirements.txt\ndbos migrate\ndbos start\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(6540);const o={},a=s.createContext(o);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);