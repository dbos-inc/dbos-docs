"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[4921],{8080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"typescript/tutorials/development/testing-tutorial","title":"Testing and Debugging","description":"Learn how to use the testing runtime for unit tests.","source":"@site/docs/typescript/tutorials/development/testing-tutorial.md","sourceDirName":"typescript/tutorials/development","slug":"/typescript/tutorials/development/testing-tutorial","permalink":"/typescript/tutorials/development/testing-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"Testing and Debugging","description":"Learn how to use the testing runtime for unit tests."},"sidebar":"tutorialSidebar","previous":{"title":"Project Structure","permalink":"/typescript/tutorials/development/application-structure-explanation"},"next":{"title":"Using Libraries","permalink":"/typescript/tutorials/development/using-libraries"}}');var i=n(4848),r=n(8453);const o={sidebar_position:20,title:"Testing and Debugging",description:"Learn how to use the testing runtime for unit tests."},a=void 0,l={},c=[{value:"Launching DBOS",id:"launching-dbos",level:3},{value:"Configuring DBOS Prior To Launch",id:"configuring-dbos-prior-to-launch",level:4},{value:"Testing Functions",id:"testing-functions",level:3},{value:"Testing HTTP Endpoints",id:"testing-http-endpoints",level:3},{value:"Cleaning Up",id:"cleaning-up",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Further Reading",id:"further-reading",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In this guide, you'll learn how to test your DBOS applications."}),"\n",(0,i.jsxs)(t.p,{children:["DBOS code can be easily tested in any unit-testing framework.\nWe'll show you how to write unit tests for the ",(0,i.jsx)(t.code,{children:"Hello"})," example class shipped by ",(0,i.jsx)(t.a,{href:"/typescript/reference/tools/cli#npx-dbos-inccreate",children:(0,i.jsx)(t.code,{children:"npx @dbos-inc/create"})}),", using ",(0,i.jsx)(t.a,{href:"https://jestjs.io/",children:"Jest"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"launching-dbos",children:"Launching DBOS"}),"\n",(0,i.jsx)(t.p,{children:"Before executing any test code that uses DBOS, DBOS should be launched:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"    await DBOS.launch();\n    // Optional, only do this if you are testing built-in DBOS HTTP handlers\n    await DBOS.setUpHandlerCallback();\n"})}),"\n",(0,i.jsxs)(t.p,{children:["See ",(0,i.jsx)(t.a,{href:"/typescript/reference/transactapi/dbos-class#launching-dbos",children:(0,i.jsx)(t.code,{children:"DBOS.launch"})})," for launch options."]}),"\n",(0,i.jsx)(t.h4,{id:"configuring-dbos-prior-to-launch",children:"Configuring DBOS Prior To Launch"}),"\n",(0,i.jsxs)(t.p,{children:["By default, ",(0,i.jsx)(t.code,{children:"DBOS.launch"})," loads the configuration from ",(0,i.jsx)(t.code,{children:"dbos-config.yaml"})," in the package root and uses this information to set up the runtime."]}),"\n",(0,i.jsxs)(t.p,{children:["To load configuration from a different file, or to create a configuration in another way, call ",(0,i.jsx)(t.a,{href:"../../reference/transactapi/dbos-class#setting-the-application-configuration",children:(0,i.jsx)(t.code,{children:"DBOS.setConfig"})})," prior to launch:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"    const [cfg, rtCfg] = parseConfigFile({configfile: 'my-testing-dbos-config.yaml'});\n    DBOS.setConfig(cfg, rtCfg);\n    await DBOS.launch();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"testing-functions",children:"Testing Functions"}),"\n",(0,i.jsx)(t.p,{children:"Once DBOS is launched, a test can invoke workflows, transactions, and steps directly."}),"\n",(0,i.jsx)(t.p,{children:"For example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'const res = await Hello.helloTransaction("dbos");\nexpect(res).toMatch("Hello, dbos! You have been greeted");\n'})}),"\n",(0,i.jsxs)(t.p,{children:["In this code, we invoke ",(0,i.jsx)(t.code,{children:"Hello.helloTransaction"})," with the input string ",(0,i.jsx)(t.code,{children:'"dbos"'}),", and verify its output is as expected."]}),"\n",(0,i.jsx)(t.h3,{id:"testing-http-endpoints",children:"Testing HTTP Endpoints"}),"\n",(0,i.jsxs)(t.p,{children:["If you are using DBOS's built-in HTTP handling capabilities, these can be tested using a framework such as ",(0,i.jsx)(t.a,{href:"https://www.npmjs.com/package/supertest",children:"supertest"}),".  (If you are using another method to handle HTTP, such as Express.js, follow the usual methods for testing with that server.)"]}),"\n",(0,i.jsxs)(t.p,{children:["DBOS provides ",(0,i.jsx)(t.code,{children:"DBOS.getHTTPHandlersCallback()"}),", which returns a callback function for node's native ",(0,i.jsx)(t.code,{children:"http/http2"})," server.  This allows you to test HTTP handlers using common tools for node.js."]}),"\n",(0,i.jsx)(t.p,{children:"First, add setup code to ensure that DBOS is launched, and that HTTP endpoints are also set up:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"    await DBOS.launch();\n    await DBOS.setUpHandlerCallback();\n"})}),"\n",(0,i.jsx)(t.p,{children:"Import the testing package:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'import request from "supertest";\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Use the handler callback during the course of unit-testing.  In this code, we send a ",(0,i.jsx)(t.code,{children:"GET"})," request to our ",(0,i.jsx)(t.code,{children:"/greeting/dbos"})," URL and verify its response:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'const res = await request(DBOS.getHTTPHandlersCallback()).get(\n  "/greeting/dbos"\n);\nexpect(res.statusCode).toBe(200);\nexpect(res.text).toMatch("Hello, dbos! You have been greeted");\n'})}),"\n",(0,i.jsx)(t.h3,{id:"cleaning-up",children:"Cleaning Up"}),"\n",(0,i.jsx)(t.p,{children:"Finally, after your tests, you should clean up DBOS and release its resources:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"await DBOS.shutdown();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"run-tests",children:"Run Tests"}),"\n",(0,i.jsx)(t.p,{children:"Now let's run the tests!"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"npm run test\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"You are responsible for setting and cleaning up database tables before and after tests.\nIn our example, we run Knex migrations as part of our testing script."})}),"\n",(0,i.jsx)(t.p,{children:"You should see the test results similar to the following:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:" PASS  src/operations.test.ts\n  operations-test\n    \u2713 test-transaction (21 ms)\n    \u2713 test-endpoint (17 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        1.247 s, estimated 2 s\n"})}),"\n",(0,i.jsx)(t.h3,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(t.p,{children:["You can find the source code for this tutorial in ",(0,i.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-transact-ts/blob/main/packages/create/templates/hello-v2/src/operations.test.ts",children:"operations.test.ts"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);