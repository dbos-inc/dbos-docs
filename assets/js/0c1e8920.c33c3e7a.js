"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[113],{7345:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"typescript/programming-guide","title":"Learn DBOS TypeScript","description":"This guide shows you how to use DBOS to build TypeScript apps that are resilient to any failure.","source":"@site/docs/typescript/programming-guide.md","sourceDirName":"typescript","slug":"/typescript/programming-guide","permalink":"/typescript/programming-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Learn DBOS TypeScript","pagination_next":"typescript/tutorials/workflow-tutorial","pagination_prev":"quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"Get Started with DBOS","permalink":"/quickstart"},"next":{"title":"Workflows","permalink":"/typescript/tutorials/workflow-tutorial"}}');var o=t(4848),r=t(8453);const i={sidebar_position:10,title:"Learn DBOS TypeScript",pagination_next:"typescript/tutorials/workflow-tutorial",pagination_prev:"quickstart"},a=void 0,l={},p=[{value:"1. Setting Up Your App",id:"1-setting-up-your-app",level:2},{value:"2. Workflows and Steps",id:"2-workflows-and-steps",level:2},{value:"3. Queues and Parallelism",id:"3-queues-and-parallelism",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["This guide shows you how to use DBOS to build TypeScript apps that are ",(0,o.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"1-setting-up-your-app",children:"1. Setting Up Your App"}),"\n",(0,o.jsx)(n.p,{children:"To get started, initialize a DBOS template and install dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npx @dbos-inc/create@latest -t dbos-node-starter\ncd dbos-node-starter\n"})}),"\n",(0,o.jsxs)(n.p,{children:["DBOS requires a Postgres database.\nIf you already have Postgres, you can set the ",(0,o.jsx)(n.code,{children:"DBOS_SYSTEM_DATABASE_URL"})," environment variable to your connection string (later we'll pass that value into DBOS).\nOtherwise, you can start Postgres in a Docker container with this command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npx dbos postgres start\n"})}),"\n",(0,o.jsx)(n.h2,{id:"2-workflows-and-steps",children:"2. Workflows and Steps"}),"\n",(0,o.jsxs)(n.p,{children:["DBOS helps you add reliability to your TypeScript programs.\nThe key feature of DBOS is ",(0,o.jsx)(n.strong,{children:"workflow functions"})," comprised of ",(0,o.jsx)(n.strong,{children:"steps"}),".\nDBOS checkpoints the state of your workflows and steps to its system database.\nIf your program crashes or is interrupted, DBOS uses this checkpointed state to recover each of your workflows from its last completed step.\nThus, DBOS makes your application ",(0,o.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's create a simple DBOS program that runs a workflow of two steps.  Replace all the code in ",(0,o.jsx)(n.code,{children:"src/main.ts"})," with the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:'import { DBOS } from "@dbos-inc/dbos-sdk";\n\nasync function stepOne() {\n  DBOS.logger.info("Step one completed!");\n}\n\nasync function stepTwo() {\n  DBOS.logger.info("Step two completed!");\n}\n\nasync function exampleFunction() {\n  await DBOS.runStep(() => stepOne(), {name: "stepOne"});\n  await DBOS.runStep(() => stepTwo(), {name: "stepTwo"});\n}\nconst exampleWorkflow = DBOS.registerWorkflow(exampleFunction);\n\nasync function main() {\n  DBOS.setConfig({\n    "name": "dbos-node-starter",\n    "systemDatabaseUrl": process.env.DBOS_SYSTEM_DATABASE_URL,\n  });\n  await DBOS.launch();\n  await exampleWorkflow();\n  await DBOS.shutdown();\n}\n\nmain().catch(console.log);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now, build and run this code with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npm run build\nnpm run start\n"})}),"\n",(0,o.jsx)(n.p,{children:"Your program should print output like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"2025-04-16 17:05:01 [info]: DBOS launched!\n2025-04-16 17:05:01 [info]: Step one completed!\n2025-04-16 17:05:01 [info]: Step two completed!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To see durable execution in action, let's modify the app to serve a DBOS workflow from an HTTP endpoint using Express.js.\nReplace the contents of ",(0,o.jsx)(n.code,{children:"src/main.ts"})," with:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:'import { DBOS } from "@dbos-inc/dbos-sdk";\nimport express from "express";\n\nexport const app = express();\napp.use(express.json());\n\nasync function stepOne() {\n  DBOS.logger.info("Step one completed!");\n}\n\nasync function stepTwo() {\n  DBOS.logger.info("Step two completed!");\n}\n\nasync function exampleFunction() {\n  await DBOS.runStep(() => stepOne(), {name: "stepOne"});\n  for (let i = 0; i < 5; i++) {\n    console.log("Press Control + C to stop the app...");\n    await DBOS.sleep(1000);\n  }\n  await DBOS.runStep(() => stepTwo(), {name: "stepTwo"});\n}\nconst exampleWorkflow = DBOS.registerWorkflow(exampleFunction);\n\napp.get("/", async (req, res) => {\n  await exampleWorkflow();\n  res.send();\n});\n\nasync function main() {\n  DBOS.setConfig({\n    "name": "dbos-node-starter",\n    "systemDatabaseUrl": process.env.DBOS_SYSTEM_DATABASE_URL,\n  });\n  await DBOS.launch();\n  const PORT = 3000;\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n  });\n}\n\nmain().catch(console.log);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now, install Express.js, then rebuild and restart your app with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npm install express\nnpm run build\nnpm run start\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, visit this URL: ",(0,o.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"In your terminal, you should see an output like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\ud83d\ude80 Server is running on http://localhost:3000\n2025-02-03 22:42:54 [info]: Step one completed!\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now, press CTRL+C stop your app. Then, run ",(0,o.jsx)(n.code,{children:"npm run start"})," to restart it. You should see an output like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\ud83d\ude80 Server is running on http://localhost:3000\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n2025-02-03 22:43:15 [info]: Step two completed!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can see how DBOS ",(0,o.jsx)(n.strong,{children:"recovers your workflow from the last completed step"}),", executing step two without re-executing step one.\nLearn more about workflows, steps, and their guarantees ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"3-queues-and-parallelism",children:"3. Queues and Parallelism"}),"\n",(0,o.jsxs)(n.p,{children:["If you need to run many functions concurrently, use DBOS ",(0,o.jsx)(n.em,{children:"queues"}),".\nTo try them out, copy this code into ",(0,o.jsx)(n.code,{children:"src/main.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\nimport express from "express";\n\nexport const app = express();\napp.use(express.json());\n\nconst queue = new WorkflowQueue("example_queue");\n\nasync function taskFunction(n: number) {\n  await DBOS.sleep(5000);\n  DBOS.logger.info(`Task ${n} completed!`)\n}\nconst taskWorkflow = DBOS.registerWorkflow(taskFunction);\n\nasync function queueFunction() {\n  DBOS.logger.info("Enqueueing tasks!")\n  const handles = []\n  for (let i = 0; i < 10; i++) {\n    handles.push(await DBOS.startWorkflow(taskWorkflow, { queueName: queue.name })(i))\n  }\n  const results = []\n  for (const h of handles) {\n    results.push(await h.getResult())\n  }\n  DBOS.logger.info(`Successfully completed ${results.length} tasks`)\n}\nconst queueWorkflow = DBOS.registerWorkflow(queueFunction)\n\napp.get("/", async (req, res) => {\n  await queueWorkflow();\n  res.send();\n});\n\nasync function main() {\n  DBOS.setConfig({\n    "name": "dbos-node-starter",\n    "systemDatabaseUrl": process.env.DBOS_SYSTEM_DATABASE_URL,\n  });\n  await DBOS.launch();\n  const PORT = 3000;\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n  });\n}\n\nmain().catch(console.log);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["When you enqueue a function with ",(0,o.jsx)(n.code,{children:"DBOS.startWorkflow"}),", DBOS executes it ",(0,o.jsx)(n.em,{children:"asynchronously"}),", running it in the background without waiting for it to finish.\n",(0,o.jsx)(n.code,{children:"DBOS.startWorkflow"})," returns a handle representing the state of the enqueued function.\nThis example enqueues ten functions, then waits for them all to finish using ",(0,o.jsx)(n.code,{children:".get_result()"})," to wait for each of their handles."]}),"\n",(0,o.jsx)(n.p,{children:"Now, rebuild and restart your app with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npm run build\nnpm run start\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, visit this URL: ",(0,o.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),".\nWait five seconds and you should see an output like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\ud83d\ude80 Server is running on http://localhost:3000\n2025-02-03 22:58:12 [info]: Enqueueing tasks!\n2025-02-03 22:58:18 [info]: Task 0 completed!\n2025-02-03 22:58:18 [info]: Task 1 completed!\n2025-02-03 22:58:18 [info]: Task 2 completed!\n2025-02-03 22:58:18 [info]: Task 3 completed!\n2025-02-03 22:58:18 [info]: Task 4 completed!\n2025-02-03 22:58:18 [info]: Task 5 completed!\n2025-02-03 22:58:18 [info]: Task 6 completed!\n2025-02-03 22:58:18 [info]: Task 7 completed!\n2025-02-03 22:58:18 [info]: Task 8 completed!\n2025-02-03 22:58:18 [info]: Task 9 completed!\n2025-02-03 22:58:19 [info]: Successfully completed 10 tasks\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can see how all ten steps run concurrently\u2014even though each takes five seconds, they all finish at the same time.\nLearn more about DBOS queues ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/queue-tutorial",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Congratulations!  You've finished the DBOS TypeScript guide.\nYou can find the code from this guide in the ",(0,o.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/dbos-node-toolbox",children:"DBOS Toolbox"})," template app."]}),"\n",(0,o.jsxs)(n.p,{children:["Next, to learn how to build more complex applications, check out the TypeScript tutorials and ",(0,o.jsx)(n.a,{href:"/examples/",children:"example apps"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);