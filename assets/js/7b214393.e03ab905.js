"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6580],{8258:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"java/tutorials/workflow-tutorial","title":"Workflows","description":"Workflows provide durable execution so you can write programs that are resilient to any failure.","source":"@site/docs/java/tutorials/workflow-tutorial.md","sourceDirName":"java/tutorials","slug":"/java/tutorials/workflow-tutorial","permalink":"/java/tutorials/workflow-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Workflows","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Add DBOS To Your App","permalink":"/java/integrating-dbos"},"next":{"title":"Steps","permalink":"/java/tutorials/step-tutorial"}}');var t=o(4848),s=o(8453);const a={sidebar_position:10,title:"Workflows",toc_max_heading_level:3},i=void 0,l={},c=[{value:"Starting Workflows In The Background",id:"starting-workflows-in-the-background",level:2},{value:"Workflow IDs and Idempotency",id:"workflow-ids-and-idempotency",level:2},{value:"Determinism",id:"determinism",level:2},{value:"Workflow Timeouts",id:"workflow-timeouts",level:2},{value:"Durable Sleep",id:"durable-sleep",level:2},{value:"Workflow Guarantees",id:"workflow-guarantees",level:2},{value:"Workflow Versioning and Recovery",id:"workflow-versioning-and-recovery",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Workflows provide ",(0,t.jsx)(n.strong,{children:"durable execution"})," so you can write programs that are ",(0,t.jsx)(n.strong,{children:"resilient to any failure"}),".\nWorkflows are comprised of ",(0,t.jsx)(n.a,{href:"/java/tutorials/step-tutorial",children:"steps"}),", which wrap ordinary Java methods.\nIf a workflow is interrupted for any reason (e.g., an executor restarts or crashes), when your program restarts the workflow automatically resumes execution from the last completed step."]}),"\n",(0,t.jsxs)(n.p,{children:["To write a workflow, annotate a method with ",(0,t.jsx)(n.a,{href:"/java/reference/workflows-steps#workflow",children:(0,t.jsx)(n.code,{children:"@Workflow"})}),".\nAll workflow methods must be registered before DBOS is launched.\nA workflow method can have any parameters and return type (including void), as long as they are serializable."]}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of a workflow:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'interface Example {\n    public String workflow();\n}\n\nclass ExampleImpl implements Example {\n\n    private String stepOne() {\n        System.out.println("Step one completed");\n        return "success";\n    }\n\n    private String stepTwo() {\n        System.out.println("Step two completed");\n        return "success";\n    }\n\n    @Workflow(name = "workflow")\n    public String workflow() {\n        DBOS.runStep(() -> stepOne(), "stepOne");\n        DBOS.runStep(() -> stepTwo(), "stepTwo");\n        return "success";\n    }\n}\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        // Configure DBOS\n        DBOSConfig config = ...\n        DBOS.configure(config);\n\n        // Register the workflow, creating a proxy object\n        Example proxy = DBOS.registerWorkflows(Example.class, new ExampleImpl());\n\n        // Launch DBOS after registering all workflows\n        DBOS.launch();\n\n        // Call the registered workflow through the proxy\n        String result = proxy.workflow();\n        System.out.println("Workflow result: " + result);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"starting-workflows-in-the-background",children:"Starting Workflows In The Background"}),"\n",(0,t.jsxs)(n.p,{children:["One common use-case for workflows is building reliable background tasks that keep running even when your program is interrupted, restarted, or crashes.\nYou can use ",(0,t.jsx)(n.a,{href:"/java/reference/workflows-steps#startworkflow",children:(0,t.jsx)(n.code,{children:"startWorkflow"})})," to start a workflow in the background.\nWhen you start a workflow this way, it returns a ",(0,t.jsx)(n.a,{href:"/java/reference/workflows-steps#workflowhandle",children:"workflow handle"}),", from which you can access information about the workflow or wait for it to complete and retrieve its result."]}),"\n",(0,t.jsx)(n.p,{children:"Here's an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'class ExampleImpl implements Example {\n    @Workflow(name = "backgroundTask")\n    public String backgroundTask(String input) {\n        // ...\n        return output;\n    }\n}\n\npublic void runWorkflowExample(Example proxy) throws Exception {\n    // Start the background task\n    WorkflowHandle<String, Exception> handle = DBOS.startWorkflow(\n        () -> proxy.backgroundTask("input"),\n        new StartWorkflowOptions()\n    );\n    // Wait for the background task to complete and retrieve its result\n    String result = handle.getResult();\n    System.out.println("Workflow result: " + result);\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["After starting a workflow in the background, you can use ",(0,t.jsx)(n.a,{href:"/java/reference/methods#retrieveworkflow",children:(0,t.jsx)(n.code,{children:"retrieveWorkflow"})})," to retrieve a workflow's handle from its ID.\nYou can also retrieve a workflow's handle from outside of your DBOS application with ",(0,t.jsx)(n.a,{href:"/java/reference/client#retrieveworkflow",children:(0,t.jsx)(n.code,{children:"DBOSClient.retrieveWorkflow"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If you need to run many workflows in the background and manage their concurrency or flow control, use ",(0,t.jsx)(n.a,{href:"/java/tutorials/queue-tutorial",children:"queues"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"workflow-ids-and-idempotency",children:"Workflow IDs and Idempotency"}),"\n",(0,t.jsxs)(n.p,{children:["Every time you execute a workflow, that execution is assigned a unique ID, by default a ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"}),".\nYou can access this ID from the ",(0,t.jsx)(n.a,{href:"/java/reference/methods#workflowid",children:(0,t.jsx)(n.code,{children:"DBOS.workflowId"})})," method.\nWorkflow IDs are useful for communicating with workflows and developing interactive workflows."]}),"\n",(0,t.jsxs)(n.p,{children:["You can set the workflow ID of a workflow using ",(0,t.jsx)(n.code,{children:"withWorkflowId"})," when calling ",(0,t.jsx)(n.code,{children:"startWorkflow"}),".\nWorkflow IDs are ",(0,t.jsx)(n.strong,{children:"globally unique"})," within your application.\nAn assigned workflow ID acts as an idempotency key: if a workflow is called multiple times with the same ID, it executes only once.\nThis is useful if your operations have side effects like making a payment or sending an email.\nFor example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'class ExampleImpl implements Example {\n    @Workflow(name = "exampleWorkflow")\n    public String exampleWorkflow() {\n        System.out.println("Running workflow with ID: " + DBOS.workflowId());\n        // ...\n        return "success";\n    }\n}\n\npublic void example(Example proxy) throws Exception {\n    String myID = "unique-workflow-id-123";\n    WorkflowHandle<String, Exception> handle = DBOS.startWorkflow(\n        () -> proxy.exampleWorkflow(),\n        new StartWorkflowOptions().withWorkflowId(myID)\n    );\n    String result = handle.getResult();\n    System.out.println("Result: " + result);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"determinism",children:"Determinism"}),"\n",(0,t.jsxs)(n.p,{children:["Workflows are in most respects normal Java methods.\nThey can have loops, branches, conditionals, and so on.\nHowever, a workflow method must be ",(0,t.jsx)(n.strong,{children:"deterministic"}),": if called multiple times with the same inputs, it should invoke the same steps with the same inputs in the same order (given the same return values from those steps).\nIf you need to perform a non-deterministic operation like accessing the database, calling a third-party API, generating a random number, or getting the local time, you shouldn't do it directly in a workflow method.\nInstead, you should do all non-deterministic operations in ",(0,t.jsx)(n.a,{href:"/java/tutorials/step-tutorial",children:"steps"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Java's threading and concurrency APIs are non-deterministic. You should use them only inside steps."})}),"\n",(0,t.jsxs)(n.p,{children:["For example, ",(0,t.jsx)(n.strong,{children:"don't do this"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Workflow(name = "exampleWorkflow")\npublic String exampleWorkflow() {\n    int randomChoice = new Random().nextInt(2);\n    if (randomChoice == 0) {\n        return DBOS.runStep(() -> stepOne(), "stepOne");\n    } else {\n        return DBOS.runStep(() -> stepTwo(), "stepTwo");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Instead, do this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'private int generateChoice() {\n    return new Random().nextInt(2);\n}\n\n@Workflow(name = "exampleWorkflow")\npublic String exampleWorkflow() {\n    int randomChoice = DBOS.runStep(() -> generateChoice(), "generateChoice");\n    if (randomChoice == 0) {\n        return DBOS.runStep(() -> stepOne(), "stepOne");\n    } else {\n        return DBOS.runStep(() -> stepTwo(), "stepTwo");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"workflow-timeouts",children:"Workflow Timeouts"}),"\n",(0,t.jsxs)(n.p,{children:["You can set a timeout for a workflow using ",(0,t.jsx)(n.a,{href:"/java/reference/workflows-steps#startworkflow",children:(0,t.jsx)(n.code,{children:"withTimeout"})})," in ",(0,t.jsx)(n.code,{children:"StartWorkflowOptions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When the timeout expires, the workflow and all its children are cancelled. Cancelling a workflow sets its status to CANCELLED and preempts its execution at the beginning of its next step. You can detach a child workflow from its parent's timeout by starting it with a custom timeout using ",(0,t.jsx)(n.code,{children:"withTimeout"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Timeouts are ",(0,t.jsx)(n.strong,{children:"start-to-completion"}),": if a workflow is ",(0,t.jsx)(n.a,{href:"/java/tutorials/queue-tutorial",children:"enqueued"}),", the timeout does not begin until the workflow is dequeued and starts execution. Also, timeouts are durable: they are stored in the database and persist across restarts, so workflows can have very long timeouts."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Workflow(name = "exampleWorkflow")\npublic void exampleWorkflow() throws InterruptedException {\n    // Workflow implementation\n}\n\nWorkflowHandle<Void, InterruptedException> handle = DBOS.startWorkflow(\n    () -> proxy.exampleWorkflow(),\n    new StartWorkflowOptions().withTimeout(Duration.ofHours(12))\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"durable-sleep",children:"Durable Sleep"}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.a,{href:"/java/reference/methods#sleep",children:(0,t.jsx)(n.code,{children:"sleep"})})," to put your workflow to sleep for any period of time.\nThis sleep is ",(0,t.jsx)(n.strong,{children:"durable"}),"\u2014DBOS saves the wakeup time in the database so that even if the workflow is interrupted and restarted multiple times while sleeping, it still wakes up on schedule."]}),"\n",(0,t.jsx)(n.p,{children:"Sleeping is useful for scheduling work to run in the future (even days, weeks, or months from now).\nFor example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public String runTask(String task) {\n    // Execute the task...\n    return "task completed";\n}\n\n@Workflow(name = "exampleWorkflow")\npublic String exampleWorkflow(float timeToSleepSeconds, String task) throws InterruptedException {\n    // Sleep for the specified duration\n    DBOS.sleep(Duration.ofMillis((long)(timeToSleepSeconds*1000)));\n\n    // Execute the task after sleeping\n    String result = DBOS.runStep(\n        () -> runTask(task),\n        "runTask"\n    );\n\n    return result;\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"workflow-guarantees",children:"Workflow Guarantees"}),"\n",(0,t.jsx)(n.p,{children:"Workflows provide the following reliability guarantees.\nThese guarantees assume that the application and database may crash and go offline at any point in time, but are always restarted and return online."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Workflows always run to completion.  If a DBOS process is interrupted while executing a workflow and restarts, it resumes the workflow from the last completed step."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/java/tutorials/step-tutorial",children:"Steps"})," are tried ",(0,t.jsx)(n.em,{children:"at least once"})," but are never re-executed after they complete.  If a failure occurs inside a step, the step may be retried, but once a step has completed (returned a value or thrown an exception to the calling workflow), it will never be re-executed."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If an exception is thrown from a workflow, the workflow ",(0,t.jsx)(n.strong,{children:"terminates"}),"\u2014DBOS records the exception, sets the workflow status to ",(0,t.jsx)(n.code,{children:"ERROR"}),", and ",(0,t.jsx)(n.strong,{children:"does not recover the workflow"}),".\nThis is because uncaught exceptions are assumed to be nonrecoverable.\nIf your workflow performs operations that may transiently fail (for example, sending HTTP requests to unreliable services), those should be performed in ",(0,t.jsx)(n.a,{href:"/java/tutorials/step-tutorial#configurable-retries",children:"steps with configured retries"}),".\nDBOS provides ",(0,t.jsx)(n.a,{href:"/java/reference/methods#workflow-management-methods",children:"tooling"})," to help you identify failed workflows and examine the specific uncaught exceptions."]}),"\n",(0,t.jsx)(n.h2,{id:"workflow-versioning-and-recovery",children:"Workflow Versioning and Recovery"}),"\n",(0,t.jsxs)(n.p,{children:["Because DBOS recovers workflows by re-executing them using information saved in the database, a workflow cannot safely be recovered if its code has changed since the workflow was started.\nTo guard against this, DBOS ",(0,t.jsx)(n.em,{children:"versions"})," applications and their workflows.\nWhen DBOS is launched, it computes an application version from a hash of the application source code (this can be overridden through ",(0,t.jsx)(n.a,{href:"/java/reference/lifecycle",children:"configuration"}),").\nAll workflows are tagged with the application version on which they started."]}),"\n",(0,t.jsxs)(n.p,{children:["When DBOS tries to recover workflows, it only recovers workflows whose version matches the current application version.\nThis prevents unsafe recovery of workflows that depend on different code.\nYou cannot change the version of a workflow, but you can use ",(0,t.jsx)(n.a,{href:"/java/reference/methods#forkworkflow",children:(0,t.jsx)(n.code,{children:"forkWorkflow"})})," to restart a workflow from a specific step on a specific code version."]}),"\n",(0,t.jsxs)(n.p,{children:["For more information on managing workflow recovery when self-hosting production DBOS applications, check out ",(0,t.jsx)(n.a,{href:"/production/self-hosting/workflow-recovery",children:"the guide"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var r=o(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);