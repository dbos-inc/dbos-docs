"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9656],{6213:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=t(5893),a=t(1151);const s={sidebar_position:11,title:"Using TypeORM",description:"Learn how to create and register TypeORM entities and perform transactional updates"},r=void 0,o={id:"tutorials/using-typeorm",title:"Using TypeORM",description:"Learn how to create and register TypeORM entities and perform transactional updates",source:"@site/docs/tutorials/using-typeorm.md",sourceDirName:"tutorials",slug:"/tutorials/using-typeorm",permalink:"/tutorials/using-typeorm",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"Using TypeORM",description:"Learn how to create and register TypeORM entities and perform transactional updates"},sidebar:"tutorialSidebar",previous:{title:"Authentication and Authorization",permalink:"/tutorials/authentication-authorization"},next:{title:"Using Prisma",permalink:"/tutorials/using-prisma"}},c={},d=[{value:"TypeORM Overview",id:"typeorm-overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Setting Up Entities",id:"setting-up-entities",level:3},{value:"Schema Management",id:"schema-management",level:3},{value:"Invoking Transactions",id:"invoking-transactions",level:3},{value:"Configuring TypeORM",id:"configuring-typeorm",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"typeorm-overview",children:"TypeORM Overview"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://typeorm.io",children:"TypeORM"})," is a popular TypeScript ORM.\nIt is based on the idea of creating ",(0,i.jsx)(n.a,{href:"https://typeorm.io/entities",children:(0,i.jsx)(n.code,{children:"Entity"})})," classes to represent each database table, with the persistent and join key fields marked with ",(0,i.jsx)(n.a,{href:"https://typeorm.io/decorator-reference",children:"decorators"}),".\nOnce entity classes are defined, TypeORM provides methods for storing, updating, and querying the entities via the ",(0,i.jsx)(n.a,{href:"https://typeorm.io/working-with-entity-manager",children:(0,i.jsx)(n.code,{children:"EntityManager"})}),".\nDBOS supports TypeORM as an alternative to ",(0,i.jsx)(n.a,{href:"https://knexjs.org/",children:"Knex"})," for transactional data management."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"DBOS supports essentially direct use of TypeORM, but a few additional steps are necessary to inform DBOS about the TypeORM entity list, manage database schemas, and use a transaction in the context of a workflow."}),"\n",(0,i.jsx)(n.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(n.p,{children:["An easy way to get started with TypeORM is to bootstrap your application with our TypeORM template.\nThis is similar to the template used in the ",(0,i.jsx)(n.a,{href:"/getting-started/quickstart",children:"quickstart"}),", but built with TypeORM instead of Knex.\nTo download it, run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx -y @dbos-inc/create@latest -t hello-typeorm -n <app-name>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then, build it, run schema migrations, and start the TypeORM sample app:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run build\nnpx dbos migrate\nnpx dbos start\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To see that it's working, visit this URL in your browser: ",(0,i.jsx)(n.a,{href:"http://localhost:3000/greeting/dbos",children:"http://localhost:3000/greeting/dbos"}),".  You should get this message: ",(0,i.jsx)(n.code,{children:"Greeting 1: Hello, dbos!"})," Each time you refresh the page, the counter should go up by one."]}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-entities",children:"Setting Up Entities"}),"\n",(0,i.jsxs)(n.p,{children:["In DBOS, TypeORM entities are ",(0,i.jsx)(n.a,{href:"https://typeorm.io/entities",children:"defined in the same way as any other TypeORM project"}),", for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { Entity, Column, PrimaryColumn } from "typeorm";\n\n@Entity()\nexport class KV {\n  @PrimaryColumn()\n  id: string = "t";\n\n  @Column()\n  value: string = "v";\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["DBOS handles the entity registration that would otherwise be done in a TypeORM ",(0,i.jsx)(n.code,{children:"DataSource"})," instantiation or configuration file.  To make DBOS aware of the entities, a class-level decorator is used on each class containing DBOS transaction methods:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"@OrmEntities([KV])\nclass KVOperations {\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"schema-management",children:"Schema Management"}),"\n",(0,i.jsxs)(n.p,{children:["In production scenarios or when using DBOS Cloud, we strongly recommend you manage your database schema using migrations.\nTypeORM provides rich native migration support, with documentation ",(0,i.jsx)(n.a,{href:"https://typeorm.io/migrations",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can ",(0,i.jsx)(n.a,{href:"https://typeorm.io/migrations#creating-a-new-migration",children:"create a new migration"})," by running:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx typeorm migration:create migrations/<migration-name>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["TypeORM can also ",(0,i.jsx)(n.a,{href:"https://typeorm.io/migrations#generating-migrations",children:"automatically generate migration files from changes to your entity files"}),".\nThis requires a TypeORM datasource file, which is included in our template and ",(0,i.jsx)(n.a,{href:"#configuring-typeorm",children:"documented below"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx typeorm migration:generate -d dist/datasource.js migrations/<migration-name>\n"})}),"\n",(0,i.jsx)(n.p,{children:"This automatically generates a migration file containing commands to transition your database from its current schema to the schema defined in your entity files."}),"\n",(0,i.jsx)(n.h3,{id:"invoking-transactions",children:"Invoking Transactions"}),"\n",(0,i.jsxs)(n.p,{children:["In TypeORM (and many other frameworks), the pattern is to run ",(0,i.jsx)(n.a,{href:"https://typeorm.io/transactions",children:"transactions"})," as callback functions.  (This allows the framework to ensure that the transaction is opened and closed properly, and to ensure that all statements run on the same connection from the connection pool.)"]}),"\n",(0,i.jsx)(n.p,{children:"DBOS provides a wrapper around TypeORM's transaction functionality so that its workflow state can be kept consistent with the application database."}),"\n",(0,i.jsxs)(n.p,{children:["First, DBOS transactions are declared.  The easiest way is with a class method decorated with ",(0,i.jsx)(n.a,{href:"/api-reference/decorators#transaction",children:(0,i.jsx)(n.code,{children:"@Transaction"})}),", and the first argument will be a ",(0,i.jsx)(n.a,{href:"/api-reference/contexts#transactioncontextt",children:(0,i.jsx)(n.code,{children:"TransactionContext"})})," with an ",(0,i.jsx)(n.code,{children:"EntityManager"})," named ",(0,i.jsx)(n.code,{children:"client"})," inside."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'@OrmEntities([KV])\nclass KVOperations {\n  @Transaction()\n  static async writeTxn(txnCtxt: TransactionContext<EntityManager>, id: string, value: string) {\n    const kv: KV = new KV();\n    kv.id = id;\n    kv.value = value;\n    const res = await txnCtxt.client.save(kv);\n    return res.id;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  @Transaction({ readOnly: true })\n  static async readTxn(txnCtxt: TransactionContext<EntityManager>, id: string) {\n    const kvp = await txnCtxt.client.findOneBy(KV, {id: id});\n    return kvp?.value || "<Not Found>";\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If preferred, it is possible to define a ",(0,i.jsx)(n.code,{children:"type"})," to clean up the transaction method prototypes a little bit."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"type TypeORMTransactionContext = TransactionContext<EntityManager>;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuring-typeorm",children:"Configuring TypeORM"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["If you are using the ",(0,i.jsx)(n.a,{href:"#getting-started",children:"TypeORM template"}),", this is done for you."]})}),"\n",(0,i.jsxs)(n.p,{children:["To enable TypeORM, you must set the ",(0,i.jsx)(n.code,{children:"app_db_client"})," field in the ",(0,i.jsx)(n.a,{href:"/api-reference/configuration",children:"DBOS configuration file"})," to ",(0,i.jsx)(n.code,{children:"typeorm"}),".\nYou should also configure TypeORM migration commands.\nHere is an example of a configuration file set up for TypeORM:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"database:\n  hostname: 'localhost'\n  port: 5432\n  username: 'postgres'\n  app_db_name: 'hello_typeorm'\n  password: ${PGPASSWORD}\n  connectionTimeoutMillis: 3000\n  app_db_client: typeorm\n  migrate:\n    - npx typeorm migration:run -d dist/datasource.js\n  rollback:\n    - npx typeorm migration:revert -d dist/datasource.js\nruntimeConfig:\n  entrypoints:\n    - dist/src/operations.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Many TypeORM commands, such as those for ",(0,i.jsx)(n.a,{href:"#schema-management",children:"schema migration"}),", require a TypeORM datasource file.\nTo avoid managing your configuration in two places, we recommend this file use your DBOS configuration file as a source.\nHere is an example of a datasource file that does this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { parseConfigFile } from '@dbos-inc/dbos-sdk/dist/src/dbos-runtime/config';\nimport { TlsOptions } from 'tls';\nimport { DataSource } from \"typeorm\";\n\nconst [dbosConfig, ] = parseConfigFile();\n\nconst AppDataSource = new DataSource({\n    type: 'postgres',\n    host: dbosConfig.poolConfig.host,\n    port: dbosConfig.poolConfig.port,\n    username: dbosConfig.poolConfig.user,\n    password: dbosConfig.poolConfig.password as string,\n    database: dbosConfig.poolConfig.database,\n    ssl: dbosConfig.poolConfig.ssl as TlsOptions,\n    entities: ['dist/entities/*.js'],\n    migrations: ['dist/migrations/*.js'],\n});\n\nAppDataSource.initialize()\n    .then(() => {\n        console.log(\"Data Source has been initialized!\");\n    })\n    .catch((err) => {\n        console.error(\"Error during Data Source initialization\", err);\n    });\n\nexport default AppDataSource;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When referencing this file in commands, use the compiled JavaScript (",(0,i.jsx)(n.code,{children:"dist/datasource.js"}),") instead of the original TypeScript source (",(0,i.jsx)(n.code,{children:"datasource.ts"}),")."]})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var i=t(7294);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);