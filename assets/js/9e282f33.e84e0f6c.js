"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7489],{7816:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"typescript/tutorials/step-tutorial","title":"Steps","description":"Learn how to communicate with external APIs and services","source":"@site/docs/typescript/tutorials/step-tutorial.md","sourceDirName":"typescript/tutorials","slug":"/typescript/tutorials/step-tutorial","permalink":"/typescript/tutorials/step-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"Steps","description":"Learn how to communicate with external APIs and services"},"sidebar":"tutorialSidebar","previous":{"title":"Workflows","permalink":"/typescript/tutorials/workflow-tutorial"},"next":{"title":"Transactions & Datasources","permalink":"/typescript/tutorials/transaction-tutorial"}}');var s=n(4848),a=n(8453);const o={sidebar_position:20,title:"Steps",description:"Learn how to communicate with external APIs and services"},i=void 0,c={},l=[{value:"Configurable Retries",id:"configurable-retries",level:3}];function u(e){const t={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["When using DBOS workflows, you should call any function that performs complex operations or accesses external APIs or services as a ",(0,s.jsx)(t.em,{children:"step"}),".\nIf a workflow is interrupted, upon restart it automatically resumes execution from the ",(0,s.jsx)(t.strong,{children:"last completed step"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["You can use ",(0,s.jsx)(t.code,{children:"DBOS.runStep"})," to call a function as a step.  For a function to be used as a step, it should have a return value that can be serialized as JSON, and should not have non-durable side effects."]}),"\n",(0,s.jsx)(t.p,{children:"Here's a simple example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'async function generateRandomNumber() {\n  return Math.random();\n}\n\nasync function workflowFunction() {\n  const randomNumber = await DBOS.runStep(() => generateRandomNumber(), {name: "generateRandomNumber"});\n}\nconst workflow = DBOS.registerWorkflow(workflowFunction)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Alternatively, you can register a function as a step using ",(0,s.jsx)(t.code,{children:"DBOS.registerStep"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"async function generateRandomNumber() {\n  return Math.random();\n}\nconst randomStep = DBOS.registerStep(generateRandomNumber);\n\nasync function workflowFunction() {\n  const randomNumber = await randomStep();\n}\nconst workflow = DBOS.registerWorkflow(workflowFunction)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Or use the ",(0,s.jsx)(t.code,{children:"@DBOS.step()"})," decorator:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export class Example {\n  @DBOS.step()\n  static async generateRandomNumber() {\n    return Math.random();\n  }\n\n  @DBOS.workflow()\n  static async exampleWorkflow() {\n    await Example.generateRandomNumber();\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You should make a function a step if you're using it in a DBOS workflow and it performs a ",(0,s.jsx)(t.a,{href:"/typescript/tutorials/workflow-tutorial#determinism",children:(0,s.jsx)(t.strong,{children:"nondeterministic"})})," operation.\nA nondeterministic operation is one that may return different outputs given the same inputs.\nCommon nondeterministic operations include:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Accessing an external API or service, like serving a file from ",(0,s.jsx)(t.a,{href:"https://aws.amazon.com/s3/",children:"AWS S3"}),", calling an external API like ",(0,s.jsx)(t.a,{href:"https://stripe.com/",children:"Stripe"}),", or accessing an external data store like ",(0,s.jsx)(t.a,{href:"https://www.elastic.co/elasticsearch/",children:"Elasticsearch"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"Accessing files on disk."}),"\n",(0,s.jsx)(t.li,{children:"Generating a random number."}),"\n",(0,s.jsx)(t.li,{children:"Getting the current time."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["You ",(0,s.jsx)(t.strong,{children:"cannot"})," call, start, or enqueue workflows from within steps.\nYou also cannot call DBOS methods like ",(0,s.jsx)(t.code,{children:"DBOS.send"})," or ",(0,s.jsx)(t.code,{children:"DBOS.setEvent"})," from within steps  (",(0,s.jsx)(t.a,{href:"/typescript/tutorials/workflow-communication#workflow-streaming",children:"streams"})," are an exception).\nThese operations should be performed from workflow functions.\nYou can call one step from another step, but the called step becomes part of the calling step's execution rather than functioning as a separate step."]}),"\n",(0,s.jsx)(t.h3,{id:"configurable-retries",children:"Configurable Retries"}),"\n",(0,s.jsxs)(t.p,{children:["You can optionally configure a step to automatically retry any exception a set number of times with exponential backoff.\nThis is useful for automatically handling transient failures, like making requests to unreliable APIs.\nRetries are configurable through the ",(0,s.jsx)(t.code,{children:"StepConfig"}),", which can be passed to ",(0,s.jsx)(t.code,{children:"runStep"}),", ",(0,s.jsx)(t.code,{children:"registerStep"}),", or the step decorator."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export interface StepConfig {\n  retriesAllowed?: boolean; // Should failures be retried? (default false)\n  intervalSeconds?: number; // Seconds to wait before the first retry attempt (default 1).\n  maxAttempts?: number;     // Maximum number of retry attempts (default 3). If errors occur more times than this, throw an exception.\n  backoffRate?: number;     // Multiplier by which the retry interval increases after a retry attempt (default 2).\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["For example, let's configure this step to retry exceptions (such as if ",(0,s.jsx)(t.code,{children:"example.com"})," is temporarily down) up to 10 times:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'async function fetchFunction() {\n    return await fetch("https://example.com").then(r => r.text());\n}\n\nasync function workflowFunction() {\n    const randomNumber = await DBOS.runStep(() => fetchFunction(), {\n        name: "fetchFunction",\n        retriesAllowed: true,\n        maxAttempts: 10\n    });\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Or if registering the step:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'async function fetchFunction() {\n    return await fetch("https://example.com").then(r => r.text());\n}\nconst fetchStep = DBOS.registerStep(fetchFunction, {\n    retriesAllowed: true,\n    maxAttempts: 10\n});\n'})}),"\n",(0,s.jsx)(t.p,{children:"Or if using decorators:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'@DBOS.step({retriesAllowed: true, maxAttempts: 10})\nstatic async exampleStep() {\n  return await fetch("https://example.com").then(r => r.text());\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If a step exhausts all ",(0,s.jsx)(t.code,{children:"max_attempts"})," retries, it throws an exception (",(0,s.jsx)(t.code,{children:"DBOSMaxStepRetriesError"}),") to the calling workflow.\nIf that exception is not caught, the workflow terminates."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);