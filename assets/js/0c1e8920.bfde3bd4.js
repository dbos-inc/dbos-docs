"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[113],{2882:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"typescript/programming-guide","title":"Learn DBOS TypeScript","description":"This guide shows you how to use DBOS to build TypeScript apps that are resilient to any failure.","source":"@site/docs/typescript/programming-guide.md","sourceDirName":"typescript","slug":"/typescript/programming-guide","permalink":"/typescript/programming-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Learn DBOS TypeScript","pagination_next":"typescript/tutorials/workflow-tutorial","pagination_prev":"quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"Get Started with DBOS","permalink":"/quickstart"},"next":{"title":"Workflows","permalink":"/typescript/tutorials/workflow-tutorial"}}');var o=s(4848),a=s(8453);const r={sidebar_position:1,title:"Learn DBOS TypeScript",pagination_next:"typescript/tutorials/workflow-tutorial",pagination_prev:"quickstart"},i=void 0,l={},c=[{value:"1. Setting Up Your App",id:"1-setting-up-your-app",level:2},{value:"2. Workflows and Steps",id:"2-workflows-and-steps",level:2},{value:"3. Queues and Parallelism",id:"3-queues-and-parallelism",level:2},{value:"4. Scheduled Workflows",id:"4-scheduled-workflows",level:2},{value:"5. Database Operations and Transactions",id:"5-database-operations-and-transactions",level:2}];function p(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["This guide shows you how to use DBOS to build TypeScript apps that are ",(0,o.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"1-setting-up-your-app",children:"1. Setting Up Your App"}),"\n",(0,o.jsx)(n.p,{children:"To get started, initialize a DBOS template and install dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npx @dbos-inc/create@latest -t dbos-node-starter -n dbos-starter\ncd dbos-starter\nnpm install\n"})}),"\n",(0,o.jsx)(n.h2,{id:"2-workflows-and-steps",children:"2. Workflows and Steps"}),"\n",(0,o.jsxs)(n.p,{children:["Now, let's create the simplest interesting DBOS program.\nAdd this code to ",(0,o.jsx)(n.code,{children:"src/main.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:'import { DBOS } from "@dbos-inc/dbos-sdk";\n\nexport class Example {\n\n  @DBOS.step()\n  static async stepOne() {\n    DBOS.logger.info("Step one completed!");\n  }\n\n  @DBOS.step()\n  static async stepTwo() {\n    DBOS.logger.info("Step two completed!");\n  }\n\n  @DBOS.workflow()\n  static async exampleWorkflow() {\n    await Example.stepOne();\n    await Example.stepTwo();\n  }\n}\n\nasync function main() {\n  await DBOS.launch();\n  await Example.exampleWorkflow();\n  await DBOS.shutdown();\n}\n\nmain().catch(console.log)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["DBOS helps you write reliable TypeScript programs as ",(0,o.jsx)(n.strong,{children:"workflows"})," of ",(0,o.jsx)(n.strong,{children:"steps"}),".\nYou create workflows and steps by adding special annotations (",(0,o.jsx)(n.code,{children:"@DBOS.workflow()"})," and ",(0,o.jsx)(n.code,{children:"@DBOS.step()"}),") to your TypeScript functions.\nWorkflows and steps must be static class methods."]}),"\n",(0,o.jsxs)(n.p,{children:["The key benefit of DBOS is ",(0,o.jsx)(n.strong,{children:"durability"}),"\u2014it automatically saves the state of your workflows and steps to a database.\nIf your program crashes or is interrupted, DBOS uses this saved state to recover each of your workflows from its last completed step.\nThus, DBOS makes your application ",(0,o.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Now, build and run this code with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npm run build\nnpm run start\n"})}),"\n",(0,o.jsx)(n.p,{children:"It should print output like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"2025-02-03 22:36:40 [info]: Workflow executor initialized\n2025-02-03 22:36:40 [info]: DBOS Admin Server is running at http://localhost:3001\n2025-02-03 22:36:40 [info]: Step one completed!\n2025-02-03 22:36:40 [info]: Step two completed!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To see durable execution in action, let's modify the app to serve a DBOS workflow from an HTTP endpoint using Express.js.\nCopy this code into ",(0,o.jsx)(n.code,{children:"src/main.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:'import { DBOS } from "@dbos-inc/dbos-sdk";\nimport express from "express";\n\nexport const app = express();\napp.use(express.json());\n\nexport class Example {\n\n  @DBOS.step()\n  static async stepOne() {\n    DBOS.logger.info("Step one completed!");\n  }\n\n  @DBOS.step()\n  static async stepTwo() {\n    DBOS.logger.info("Step two completed!");\n  }\n\n  @DBOS.workflow()\n  static async exampleWorkflow() {\n    await Example.stepOne();\n    for (let i = 0; i < 5; i++) {\n      console.log("Press Control + C to stop the app...");\n      await DBOS.sleep(1000);\n    }\n    await Example.stepTwo();\n  }\n}\n\napp.get("/", async (req, res) => {\n  await Example.exampleWorkflow();\n  res.send();\n});\n\nasync function main() {\n  await DBOS.launch({ expressApp: app });\n  const PORT = 3000;\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n  });\n}\n\nmain().catch(console.log);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Start your app with ",(0,o.jsx)(n.code,{children:"npm run dev"}),".\nThen, visit this URL: ",(0,o.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"In your terminal, you should see an output like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"\ud83d\ude80 Server is running on http://localhost:3000\n2025-02-03 22:42:54 [info]: Step one completed!\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now, press CTRL+C stop your app. Then, run ",(0,o.jsx)(n.code,{children:"npm run start"})," to restart it. You should see an output like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"\ud83d\ude80 Server is running on http://localhost:3000\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n2025-02-03 22:43:15 [info]: Step two completed!\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can see how DBOS ",(0,o.jsx)(n.strong,{children:"recovers your workflow from the last completed step"}),", executing step 1 without re-executing step 2.\nLearn more about workflows, steps, and their guarantees ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"3-queues-and-parallelism",children:"3. Queues and Parallelism"}),"\n",(0,o.jsxs)(n.p,{children:["If you need to run many functions concurrently, use DBOS ",(0,o.jsx)(n.em,{children:"queues"}),".\nTo try them out, copy this code into ",(0,o.jsx)(n.code,{children:"src/main.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\nimport express from "express";\n\nexport const app = express();\napp.use(express.json());\n\nconst queue = new WorkflowQueue("example_queue");\n\nexport class Example {\n\n  @DBOS.workflow()\n  static async taskWorkflow(n: number) {\n    await DBOS.sleep(5000);\n    DBOS.logger.info(`Task ${n} completed!`)\n  }\n\n  @DBOS.workflow()\n  static async queueWorkflow() {\n    DBOS.logger.info("Enqueueing tasks!")\n    const handles = []\n    for (let i = 0; i < 10; i++) {\n      handles.push(await DBOS.startWorkflow(Example, { queueName: queue.name }).taskWorkflow(i))\n    }\n    const results = []\n    for (const h of handles) {\n      results.push(await h.getResult())\n    }\n    DBOS.logger.info(`Successfully completed ${results.length} tasks`)\n  }\n}\n\napp.get("/", async (req, res) => {\n  await Example.queueWorkflow();\n  res.send();\n});\n\nasync function main() {\n  await DBOS.launch({ expressApp: app });\n  const PORT = DBOS.runtimeConfig?.port || 3000;\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n  });\n}\n\nmain().catch(console.log);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["When you enqueue a function with ",(0,o.jsx)(n.code,{children:"DBOS.startWorkflow"}),", DBOS executes it ",(0,o.jsx)(n.em,{children:"asynchronously"}),", running it in the background without waiting for it to finish.\n",(0,o.jsx)(n.code,{children:"DBOS.startWorkflow"})," returns a handle representing the state of the enqueued function.\nThis example enqueues ten functions, then waits for them all to finish using ",(0,o.jsx)(n.code,{children:".get_result()"})," to wait for each of their handles."]}),"\n",(0,o.jsxs)(n.p,{children:["Start your app with ",(0,o.jsx)(n.code,{children:"npm run dev"}),".\nThen, visit this URL: ",(0,o.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),".\nWait five seconds and you should see an output like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"\ud83d\ude80 Server is running on http://localhost:3000\n2025-02-03 22:58:12 [info]: Enqueueing tasks!\n2025-02-03 22:58:18 [info]: Task 0 completed!\n2025-02-03 22:58:18 [info]: Task 1 completed!\n2025-02-03 22:58:18 [info]: Task 2 completed!\n2025-02-03 22:58:18 [info]: Task 3 completed!\n2025-02-03 22:58:18 [info]: Task 4 completed!\n2025-02-03 22:58:18 [info]: Task 5 completed!\n2025-02-03 22:58:18 [info]: Task 6 completed!\n2025-02-03 22:58:18 [info]: Task 7 completed!\n2025-02-03 22:58:18 [info]: Task 8 completed!\n2025-02-03 22:58:18 [info]: Task 9 completed!\n2025-02-03 22:58:19 [info]: Successfully completed 10 tasks\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can see how all ten steps run concurrently\u2014even though each takes five seconds, they all finish at the same time.\nLearn more about DBOS queues ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/queue-tutorial",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"4-scheduled-workflows",children:"4. Scheduled Workflows"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes, you need to run a workflow ",(0,o.jsx)(n.strong,{children:"on a schedule"}),": for example, once per hour or once per week.\nIn DBOS, you can schedule workflows with the ",(0,o.jsx)(n.code,{children:"@DBOS.scheduled()"})," decorator.\nTo try it out, add this code to your ",(0,o.jsx)(n.code,{children:"src/main.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'@DBOS.scheduled({ crontab: "* * * * * *" })\n@DBOS.workflow()\nstatic async runEverySecond(scheduledTime: Date, startTime: Date) {\n  DBOS.logger.info(`I am a scheduled workflow. It is currently ${scheduledTime}.`)\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The argument to the ",(0,o.jsx)(n.code,{children:"DBOS.scheduled()"})," decorator is your workflow's schedule, defined in ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"crontab"})," syntax.\nThe schedule in the example, ",(0,o.jsx)(n.code,{children:"* * * * * *"}),' means "run this workflow every second."\nLearn more about scheduled workflows ',(0,o.jsx)(n.a,{href:"/typescript/tutorials/scheduled-workflows",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Now, start your app with ",(0,o.jsx)(n.code,{children:"npm run dev"}),".\nThe workflow should run every second, with output like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"2025-02-03 23:10:58 [info]: I am a scheduled workflow. It is currently Mon Feb 03 2025 15:10:58 GMT-0800 (Pacific Standard Time).\n2025-02-03 23:10:59 [info]: I am a scheduled workflow. It is currently Mon Feb 03 2025 15:10:59 GMT-0800 (Pacific Standard Time).\n2025-02-03 23:11:00 [info]: I am a scheduled workflow. It is currently Mon Feb 03 2025 15:11:00 GMT-0800 (Pacific Standard Time).\n"})}),"\n",(0,o.jsx)(n.h2,{id:"5-database-operations-and-transactions",children:"5. Database Operations and Transactions"}),"\n",(0,o.jsxs)(n.p,{children:["Often, applications need to manage database tables in Postgres.\nWe'll show you how to do that from scratch using ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/orms/using-knex",children:"Knex.js"}),".\nFirst, we'll define a schema migration to create a new table.\nThen, we'll operate on the table using a DBOS workflow.\nDBOS also supports other popular ORMs such as ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/orms/using-drizzle",children:"Drizzle"}),", ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/orms/using-prisma",children:"Prisma"}),", and ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/orms/using-typeorm",children:"TypeORM"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["First, create a file named ",(0,o.jsx)(n.code,{children:"knexfile.js"})," and add the following code to it.\nThis configures Knex and instructs it to read its database connection parameters from DBOS."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="knexfile.js"',children:"const { parseConfigFile } = require('@dbos-inc/dbos-sdk');\n\nconst [dbosConfig, ] = parseConfigFile();\n\nconst config = {\n  client: 'pg',\n  connection: {\n    host: dbosConfig.poolConfig.host,\n    port: dbosConfig.poolConfig.port,\n    user: dbosConfig.poolConfig.user,\n    password: dbosConfig.poolConfig.password,\n    database: dbosConfig.poolConfig.database,\n    ssl: dbosConfig.poolConfig.ssl,\n  },\n  migrations: {\n    directory: './migrations'\n  }\n};\n\nmodule.exports = config;\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Next, let's create a schema migration that will create a table in your database.\nCreate a new migration file with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npx knex migrate:make example_table\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This creates a file named ",(0,o.jsx)(n.code,{children:"migrations/XXXXX_example_table.js"}),".\nAdd the following code to that file to define your new table:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="migrations/XXXXX_example_table.js"',children:"exports.up = function(knex) {\n    return knex.schema.createTable('example_table', function(table) {\n      table.increments('count').primary();\n      table.string('name').notNullable();\n    });\n  };\n  \n  exports.down = function(knex) {\n    return knex.schema.dropTable('example_table');\n  };\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, edit your ",(0,o.jsx)(n.code,{children:"dbos-config.yaml"})," to add a migration command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"database:\n  migrate:\n    - npx knex migrate:latest\n"})}),"\n",(0,o.jsx)(n.p,{children:"Finally, run your new migration with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npx dbos migrate\n"})}),"\n",(0,o.jsx)(n.p,{children:"You should see output like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"2025-02-03 23:30:52 [info]: Executing migration command: npx knex migrate:latest\nBatch 1 run: 1 migrations\n2025-02-03 23:30:53 [info]: Creating DBOS tables and system database.\n2025-02-03 23:30:53 [info]: Migration successful!\n"})}),"\n",(0,o.jsx)(n.p,{children:"You just created your new table in your Postgres database!"}),"\n",(0,o.jsxs)(n.p,{children:["Now, let's write a DBOS workflow that operates on that table. Copy the following code into ",(0,o.jsx)(n.code,{children:"src/main.ts"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:"import { DBOS, } from \"@dbos-inc/dbos-sdk\";\nimport express from \"express\";\n\nexport const app = express();\napp.use(express.json());\n\nexport class Toolbox {\n  @DBOS.transaction()\n  static async insertRow() {\n    await DBOS.knexClient.raw('INSERT INTO example_table (name) VALUES (?)', ['dbos']);\n  }\n\n  @DBOS.transaction({ readOnly: true })\n  static async countRows() {\n    const result = await DBOS.knexClient.raw('SELECT COUNT(*) as count FROM example_table');\n    const count = result.rows[0].count;\n    DBOS.logger.info(`Row count: ${count}`);\n  }\n\n  @DBOS.workflow()\n  static async transactionWorkflow() {\n    await Toolbox.insertRow()\n    await Toolbox.countRows()\n  }\n}\n\napp.get(\"/\", async (req, res) => {\n  await Toolbox.transactionWorkflow();\n  res.send();\n});\n\nasync function main() {\n  await DBOS.launch({ expressApp: app });\n  const PORT = DBOS.runtimeConfig?.port || 3000;\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n  });\n}\n\nmain().catch(console.log);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This workflow first inserts a new row into your table, then prints the total number of rows in into your table.\nThe database operations are done in DBOS ",(0,o.jsx)(n.em,{children:"transactions"}),". These are a special kind of step optimized for database accesses.\nThey execute as a single database transaction and give you access to a pre-configured database client (",(0,o.jsx)(n.code,{children:"DBOS.knexClient"}),").\nLearn more about transactions ",(0,o.jsx)(n.a,{href:"/typescript/tutorials/transaction-tutorial",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Now, start your app with ",(0,o.jsx)(n.code,{children:"npm run dev"}),", then visit this URL: ",(0,o.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"You should see an output like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"\ud83d\ude80 Server is running on http://localhost:3000\n2025-02-03 23:32:31 [info]: Row count: 1\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Every time you visit ",(0,o.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),", your workflow should insert another row, and the printed row count should go up by one."]}),"\n",(0,o.jsxs)(n.p,{children:["Congratulations!  You've finished the DBOS TypeScript guide.\nYou can find the code from this guide in the ",(0,o.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/dbos-node-toolbox",children:"DBOS Toolbox"})," template app."]}),"\n",(0,o.jsx)(n.p,{children:"Here's what everything looks like put together:"}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Putting it all together"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:'import { DBOS, SchedulerMode, WorkflowQueue } from "@dbos-inc/dbos-sdk";\nimport express from "express";\n\nexport const app = express();\napp.use(express.json());\n\nconst queue = new WorkflowQueue("example_queue");\n\nexport class Toolbox {\n\n  //////////////////////////////////\n  //// Workflows and steps\n  //////////////////////////////////\n\n  @DBOS.step()\n  static async stepOne() {\n    DBOS.logger.info("Step one completed!");\n  }\n\n  @DBOS.step()\n  static async stepTwo() {\n    DBOS.logger.info("Step two completed!");\n  }\n\n  @DBOS.workflow()\n  static async exampleWorkflow() {\n    await Toolbox.stepOne();\n    await Toolbox.stepTwo();\n  }\n\n  //////////////////////////////////\n  //// Queues\n  //////////////////////////////////\n\n  @DBOS.workflow()\n  static async taskWorkflow(n: number) {\n    await DBOS.sleep(5000);\n    DBOS.logger.info(`Task ${n} completed!`)\n  }\n\n  @DBOS.workflow()\n  static async queueWorkflow() {\n    DBOS.logger.info("Enqueueing tasks!")\n    const handles = []\n    for (let i = 0; i < 10; i++) {\n      handles.push(await DBOS.startWorkflow(Toolbox, { queueName: queue.name }).taskWorkflow(i))\n    }\n    const results = []\n    for (const h of handles) {\n      results.push(await h.getResult())\n    }\n    DBOS.logger.info(`Successfully completed ${results.length} tasks`)\n  }\n\n  //////////////////////////////////\n  //// Scheduled workflows\n  //////////////////////////////////\n\n  @DBOS.scheduled({ crontab: "* * * * *", mode: SchedulerMode.ExactlyOncePerIntervalWhenActive })\n  @DBOS.workflow()\n  static async runEveryMinute(scheduledTime: Date, startTime: Date) {\n    DBOS.logger.info(`I am a scheduled workflow. It is currently ${scheduledTime}.`)\n  }\n\n  //////////////////////////////////\n  //// Transactions\n  //////////////////////////////////\n\n  @DBOS.transaction()\n  static async insertRow() {\n    await DBOS.knexClient.raw(\'INSERT INTO example_table (name) VALUES (?)\', [\'dbos\']);\n  }\n\n  @DBOS.transaction({ readOnly: true })\n  static async countRows() {\n    const result = await DBOS.knexClient.raw(\'SELECT COUNT(*) as count FROM example_table\');\n    const count = result.rows[0].count;\n    DBOS.logger.info(`Row count: ${count}`);\n  }\n\n  @DBOS.workflow()\n  static async transactionWorkflow() {\n    await Toolbox.insertRow()\n    await Toolbox.countRows()\n  }\n}\n\n/////////////////////////////////////\n//// Express.js HTTP endpoints\n/////////////////////////////////////\n\napp.get("/workflow", async (req, res) => {\n  await Toolbox.exampleWorkflow();\n  res.send();\n});\n\napp.get("/queue", async (req, res) => {\n  await Toolbox.queueWorkflow();\n  res.send();\n});\n\napp.get("/transaction", async (req, res) => {\n  await Toolbox.transactionWorkflow();\n  res.send();\n});\n\n/////////////////////////////////////\n//// Starting Express.js and DBOS\n/////////////////////////////////////\n\nasync function main() {\n  await DBOS.launch({ expressApp: app });\n  const PORT = DBOS.runtimeConfig?.port || 3000;\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n  });\n}\n\nmain().catch(console.log);\n'})})]}),"\n",(0,o.jsxs)(n.p,{children:["Next, to learn how to build more complex applications, check out the TypeScript tutorials and ",(0,o.jsx)(n.a,{href:"/examples/",children:"example apps"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var t=s(6540);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);