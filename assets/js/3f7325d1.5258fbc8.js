"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[8892],{8479:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"golang/tutorials/testing","title":"Testing & Mocking","description":"DBOSContext is a fully mockable interface, which you manually mock, or can generate mocks using tools like mockery.","source":"@site/docs/golang/tutorials/testing.md","sourceDirName":"golang/tutorials","slug":"/golang/tutorials/testing","permalink":"/golang/tutorials/testing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":90,"frontMatter":{"sidebar_position":90,"title":"Testing & Mocking"},"sidebar":"tutorialSidebar","previous":{"title":"Workflow Management","permalink":"/golang/tutorials/workflow-management"},"next":{"title":"DBOS Context","permalink":"/golang/reference/dbos-context"}}');var r=t(4848),s=t(8453);const i={sidebar_position:90,title:"Testing & Mocking"},c=void 0,l={},a=[];function d(n){const e={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"../reference/dbos-context",children:(0,r.jsx)(e.code,{children:"DBOSContext"})})," is a fully mockable interface, which you manually mock, or can generate mocks using tools like ",(0,r.jsx)(e.a,{href:"https://github.com/vektra/mockery",children:"mockery"}),"."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Sample .mockery.yml v3 configuration"}),(0,r.jsxs)(e.p,{children:["You can use this configuration file to generate mocks by running ",(0,r.jsx)(e.code,{children:"mockery"}),":"]}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"all: false\ndir: './mocks'\nfilename: '{{.InterfaceName}}_mock.go'\nforce-file-write: true\nformatter: goimports\ninclude-auto-generated: false\nlog-level: info\nstructname: 'Mock{{.InterfaceName}}'\npkgname: 'mocks'\nrecursive: false\nrequire-template-schema-exists: true\ntemplate: testify\ntemplate-schema: '{{.Template}}.schema.json'\npackages:\n  github.com/dbos-inc/dbos-transact-golang/dbos:\n    interfaces:\n      DBOSContext:\n      WorkflowHandle:\n"})})]}),"\n",(0,r.jsx)(e.p,{children:"Here is an example workflow which:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Calls a step"}),"\n",(0,r.jsx)(e.li,{children:"Spawns a child workflow"}),"\n",(0,r.jsxs)(e.li,{children:["Calls a workflow management operation, ",(0,r.jsx)(e.a,{href:"../reference/methods#listworkflows",children:"ListWorkflows"})]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:"func step(ctx context.Context) (int, error) {\n    return 1, nil\n}\n\nfunc childWorkflow(ctx dbos.DBOSContext, i int) (int, error) {\n    return i + 1, nil\n}\n\nfunc workflow(ctx dbos.DBOSContext, i int) (int, error) {\n    // Test RunAsStep\n    a, err := dbos.RunAsStep(ctx, step)\n    if err != nil {\n        return 0, err\n    }\n\n    // Child wf\n    ch, err := dbos.RunWorkflow(ctx, childWorkflow, i)\n    if err != nil {\n        return 0, err\n    }\n    b, err := ch.GetResult()\n    if err != nil {\n        return 0, err\n    }\n\n    return dbos.ListWorkflows(ctx)\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Here is how you can test this workflow, assuming mocks generated with ",(0,r.jsx)(e.a,{href:"https://github.com/vektra/mockery",children:"mockery"}),". The idea is that you can mock any package-level DBOS method, because it has a mirror on the ",(0,r.jsx)(e.code,{children:"DBOSContext"})," interface."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// test file\npackage dbos_test\n\nimport (\n    "context"\n    "fmt"\n    "testing"\n\n    "mocks" // Replace with the location of your generatd mocks\n\n    "github.com/dbos-inc/dbos-transact-golang/dbos"\n    "github.com/stretchr/testify/mock"\n)\n\nfunc step(ctx context.Context) (int, error) {\n    return 1, nil\n}\n\nfunc childWorkflow(ctx dbos.DBOSContext, i int) (int, error) {\n    return i + 1, nil\n}\n\nfunc workflow(ctx dbos.DBOSContext, i int) ([]dbos.WorkflowStatus, error) {\n    // Test RunAsStep\n    _, err := dbos.RunAsStep(ctx, step)\n    if err != nil {\n        return nil, err\n    }\n\n    // Child wf\n    childHandle, err := dbos.RunWorkflow(ctx, childWorkflow, i)\n    if err != nil {\n        return nil, err\n    }\n    _, err = childHandle.GetResult()\n    if err != nil {\n        return nil, err\n    }\n\n    return dbos.ListWorkflows(ctx)\n\n}\n\nfunc TestMocks(t *testing.T) {\n    // Create a mock DBOSContext\n    mockCtx := mocks.NewMockDBOSContext(t)\n\n    // Step\n    mockCtx.On("RunAsStep", mockCtx, mock.Anything, mock.Anything).Return(1, nil)\n\n    // Child workflow\n    mockChildHandle := mocks.NewMockWorkflowHandle[any](t) // mock WorkflowHandle\n    mockCtx.On("RunWorkflow", mockCtx, mock.Anything, 2, mock.Anything).Return(mockChildHandle, nil).Once()\n    mockChildHandle.On("GetResult").Return(1, nil)\n\n    // Workflow management\n    mockCtx.On("ListWorkflows", mockCtx).Return([]dbos.WorkflowStatus{}, nil)\n\n    workflow(mockCtx, 2)\n\n    mockCtx.AssertExpectations(t)\n    mockChildHandle.AssertExpectations(t)\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>c});var o=t(6540);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);