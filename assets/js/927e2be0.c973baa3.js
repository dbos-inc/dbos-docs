"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[2013],{9757:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"production/self-hosting/hosting-with-kubernetes","title":"Deploying With Kubernetes","description":"This guide shows you how to setup a DBOS Python application and its Postgres database using Kubernetes.","source":"@site/docs/production/self-hosting/hosting-with-kubernetes.md","sourceDirName":"production/self-hosting","slug":"/production/self-hosting/hosting-with-kubernetes","permalink":"/production/self-hosting/hosting-with-kubernetes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":70,"frontMatter":{"sidebar_position":70,"title":"Deploying With Kubernetes"},"sidebar":"tutorialSidebar","previous":{"title":"Deploying With Docker","permalink":"/production/self-hosting/hosting-with-docker"},"next":{"title":"Admin API Reference","permalink":"/production/self-hosting/admin-api"}}');var i=t(4848),o=t(8453);const a={sidebar_position:70,title:"Deploying With Kubernetes"},r="Deploying with Kubernetes",p={},l=[{value:"Building the Application Image",id:"building-the-application-image",level:2},{value:"Application service",id:"application-service",level:2},{value:"Postgres Service",id:"postgres-service",level:2},{value:"Visit the application",id:"visit-the-application",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"deploying-with-kubernetes",children:"Deploying with Kubernetes"})}),"\n",(0,i.jsx)(n.p,{children:"This guide shows you how to setup a DBOS Python application and its Postgres database using Kubernetes."}),"\n",(0,i.jsx)(n.p,{children:"It assume you have an existing Kubernetes service up and running."}),"\n",(0,i.jsx)(n.p,{children:"You'll need two manifests: one for Postgres and one for the application."}),"\n",(0,i.jsx)(n.h2,{id:"building-the-application-image",children:"Building the Application Image"}),"\n",(0,i.jsxs)(n.p,{children:["DBOS is just a library for your program to import, so it can run with any Python/Node program. For a reference Dockerfile to build a container an upload it to your registry, see our ",(0,i.jsx)(n.a,{href:"/production/self-hosting/hosting-with-docker",children:"Docker guide"}),". Deploy both services with ",(0,i.jsx)(n.code,{children:"kubectl apply -f [manifest.yaml]"})]}),"\n",(0,i.jsx)(n.h2,{id:"application-service",children:"Application service"}),"\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.code,{children:"image URI"})," by the address of your container."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dbos-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dbos-app\n  template:\n    metadata:\n      labels:\n        app: dbos-app\n    spec:\n      containers:\n        - name: dbos-app\n          image: <image URI>\n          env:\n            - name: DBOS_DATABASE_URL\n              value: postgres://postgres:dbos@postgres:5432/dbos_app_starter\n          ports:\n            - containerPort: 8000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dbos-app\nspec:\n  type: LoadBalancer\n  selector:\n    app: dbos-app\n  ports:\n    - port: 8000\n      targetPort: 8000\n"})}),"\n",(0,i.jsx)(n.h2,{id:"postgres-service",children:"Postgres Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: pgvector/pgvector:pg16\n          env:\n            - name: POSTGRES_USER\n              value: "postgres"\n            - name: POSTGRES_PASSWORD\n              value: "dbos"\n          ports:\n            - containerPort: 5432\n          volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: postgres-storage\n      volumes:\n        - name: postgres-storage\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  selector:\n    app: postgres\n  ports:\n    - port: 5432\n      targetPort: 5432\n'})}),"\n",(0,i.jsx)(n.h2,{id:"visit-the-application",children:"Visit the application"}),"\n",(0,i.jsxs)(n.p,{children:["Check the services are running with ",(0,i.jsx)(n.code,{children:"kubectl"})," or your favorite k8s admin tool."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"kubectl get pods\nNAME                        READY   STATUS    RESTARTS       AGE\ndbos-app-6d968b9dc6-lsk6w   1/1     Running   0              105m\npostgres-9f65bff75-ztm7w    1/1     Running   0              107m\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Find the public IP of the application with ",(0,i.jsx)(n.code,{children:"kubectl"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"kubectl get svc dbos-app\nNAME       TYPE           CLUSTER-IP     EXTERNAL-IP                                                               PORT(S)          AGE\ndbos-app   LoadBalancer   x.x.x.x        x.x.x.x                                                                   8000:30176/TCP   106m\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can now visit ",(0,i.jsx)(n.code,{children:"http://[EXTERNAL-IP]:8000/"}),' to see the template application live.\nIf you press "crash the application", Kubernetes will restart the container immediately and the DBOS workflow will resume durably.']})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);