"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6388],{4036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"python/tutorials/queue-tutorial","title":"Queues & Parallelism","description":"Queues allow you to run functions with managed concurrency.","source":"@site/docs/python/tutorials/queue-tutorial.md","sourceDirName":"python/tutorials","slug":"/python/tutorials/queue-tutorial","permalink":"/python/tutorials/queue-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Queues & Parallelism"},"sidebar":"tutorialSidebar","previous":{"title":"Idempotency","permalink":"/python/tutorials/idempotency-tutorial"},"next":{"title":"Scheduled Workflows","permalink":"/python/tutorials/scheduled-workflows"}}');var r=t(4848),a=t(8453);const i={sidebar_position:4,title:"Queues & Parallelism"},o=void 0,u={},l=[{value:"Queue Example",id:"queue-example",level:3},{value:"Reliability Guarantees",id:"reliability-guarantees",level:3},{value:"Managing Concurrency",id:"managing-concurrency",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"In-Order Processing",id:"in-order-processing",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Queues allow you to run functions with managed concurrency.\nThey are useful for controlling the number of functions run in parallel, or the rate at which functions are started."}),"\n",(0,r.jsx)(n.p,{children:"To create a queue, specify its name:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can then enqueue any DBOS-annotated function.\nEnqueuing a function submits it for execution and returns a ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," to it.\nQueued tasks are started in first-in, first-out (FIFO) order."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\ntask = ...\nhandle = queue.enqueue(process_task, task)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"queue-example",children:"Queue Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a workflow using a queue to process tasks concurrently:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue\n\nqueue = Queue("example_queue")\n\n@DBOS.step()\ndef process_task(task):\n  ...\n\n@DBOS.workflow()\ndef process_tasks(tasks):\n  task_handles = []\n  # Enqueue each task so all tasks are processed concurrently.\n  for task in tasks:\n    handle = queue.enqueue(process_task, task)\n    task_handles.append(handle)\n  # Wait for each task to complete and retrieve its result.\n  # Return the results of all tasks.\n  return [handle.get_result() for handle in task_handles]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"reliability-guarantees",children:"Reliability Guarantees"}),"\n",(0,r.jsxs)(n.p,{children:["Because queues use DBOS ",(0,r.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial",children:"workflows"}),", they provide the following reliability guarantees for enqueued functions.\nThese guarantees assume that the application and database may crash and go offline at any point in time, but are always restarted and return online."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Enqueued functions always run to completion.  If a DBOS process crashes and is restarted at any point after a function is enqueued, it resumes the enqueued function from the last completed step."}),"\n",(0,r.jsxs)(n.li,{children:["Enqueued ",(0,r.jsx)(n.a,{href:"/python/tutorials/step-tutorial",children:"steps"})," (or steps called from enqueued workflows) are tried ",(0,r.jsx)(n.em,{children:"at least once"})," but are never re-executed after they complete.  If a failure occurs inside a step, the step may be retried, but once a step has completed, it will never be re-executed."]}),"\n",(0,r.jsxs)(n.li,{children:["Enqueued ",(0,r.jsx)(n.a,{href:"/python/tutorials/transaction-tutorial",children:"transactions"})," (or transactions called from enqueued workflows) commit ",(0,r.jsx)(n.em,{children:"exactly once"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"managing-concurrency",children:"Managing Concurrency"}),"\n",(0,r.jsxs)(n.p,{children:["You can specify the ",(0,r.jsx)(n.em,{children:"concurrency"})," of a queue, the maximum number of functions from this queue that may run concurrently.\nConcurrency limits are global across all DBOS processes using this queue.\nIf no limit is provided, any number of functions may run concurrently.\nFor example, this queue has a maximum concurrency of 10, so at most 10 functions submitted to it may run at once:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue", concurrency=10)\n'})}),"\n",(0,r.jsx)(n.p,{children:"You may want to specify a maximum concurrency if functions in your queue submit work to an external process with limited resources.\nThe concurrency limit guarantees that even if many functions are submitted at once, they won't overwhelm the process."}),"\n",(0,r.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,r.jsxs)(n.p,{children:["You can set ",(0,r.jsx)(n.em,{children:"rate limits"})," for a queue, limiting the number of functions that it can start in a given period.\nRate limits are global across all DBOS processes using this queue.\nFor example, this queue has a limit of 50 with a period of 30 seconds, so it may not start more than 50 functions in 30 seconds:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue", limiter={"limit": 50, "period": 30})\n'})}),"\n",(0,r.jsx)(n.p,{children:"Rate limits are especially useful when working with a rate-limited API, such as many LLM APIs."}),"\n",(0,r.jsx)(n.h3,{id:"in-order-processing",children:"In-Order Processing"}),"\n",(0,r.jsxs)(n.p,{children:["You can use a queue with ",(0,r.jsx)(n.code,{children:"concurrency=1"})," to guarantee sequential, in-order processing of events.\nOnly a single event will be processed at a time.\nFor example, this app processes events sequentially in the order of their arrival:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom dbos import DBOS, Queue\n\napp = FastAPI()\nDBOS(fastapi=app)\n\nqueue = Queue("in_order_queue", concurrency=1)\n\n@DBOS.step()\ndef process_event(event: str):\n   ...\n\n@app.post("/events/{event}")\ndef event_endpoint(event: str):\n   queue.enqueue(process_event, event)\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);