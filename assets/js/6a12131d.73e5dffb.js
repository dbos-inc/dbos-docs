"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[1190],{5349:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var t=s(4848),r=s(8453);const a={sidebar_position:45,title:"Queues & Parallelism"},o=void 0,i={id:"typescript/tutorials/queue-tutorial",title:"Queues & Parallelism",description:"Queues allow you to ensure that functions will be run, without starting them immediately.",source:"@site/docs/typescript/tutorials/queue-tutorial.md",sourceDirName:"typescript/tutorials",slug:"/typescript/tutorials/queue-tutorial",permalink:"/typescript/tutorials/queue-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:45,frontMatter:{sidebar_position:45,title:"Queues & Parallelism"},sidebar:"tutorialSidebar",previous:{title:"Idempotency",permalink:"/typescript/tutorials/idempotency-tutorial"},next:{title:"Scheduled Workflows",permalink:"/typescript/tutorials/scheduled-workflows"}},u={},c=[{value:"Queue Example",id:"queue-example",level:3},{value:"Managing Concurrency",id:"managing-concurrency",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"In-Order Processing",id:"in-order-processing",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Queues allow you to ensure that functions will be run, without starting them immediately.\nQueues are useful for controlling the number of functions run in parallel, or the rate at which functions are started."}),"\n",(0,t.jsx)(n.p,{children:"To create a queue, specify its name:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\n\nconst queue = new WorkflowQueue("example_queue");\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can then enqueue any workflow by passing the queue as an argument to ",(0,t.jsx)(n.code,{children:"DBOS.startWorkflow"}),".\nEnqueuing a function submits it for execution and returns a ",(0,t.jsx)(n.a,{href:"/typescript/reference/transactapi/workflow-handles",children:"handle"})," to it.\nQueued tasks are started in first-in, first-out (FIFO) order."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue");\n\nclass Tasks {\n  @DBOS.workflow()\n  static async processTask(task) {\n    // ...\n  }\n}\n\nasync function main() {\n  const task = ...\n  const handle = await DBOS.startWorkflow(Tasks, {queueName: queue.name}).processTask(task)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"queue-example",children:"Queue Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of a workflow using a queue to process tasks in parallel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue");\n\nclass Tasks {\n  @DBOS.workflow()\n  static async processTask(task) {\n    // ...\n  }\n\n  @DBOS.workflow()\n  static async processTasks(tasks) {\n    const handles = []\n\n    // Enqueue each task so all tasks are processed concurrently.\n    for (const task of tasks) {\n      handles.push(await DBOS.startWorkflow(Tasks, {queueName: queue.name}).processTask(task));\n    }\n\n    // Wait for each task to complete and retrieve its result.\n    // Return the results of all tasks.\n    const results = [];\n    for (const h of handles) {\n      results.push(await h.getResult());\n    }\n    return results;\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"managing-concurrency",children:"Managing Concurrency"}),"\n",(0,t.jsxs)(n.p,{children:["You can specify the ",(0,t.jsx)(n.em,{children:"concurrency"})," of a queue, the maximum number of functions from this queue that may run concurrently.\nConcurrency limits are global across all DBOS processes using this queue.\nIf no limit is provided, any number of functions may run concurrently.\nFor example, this queue has a maximum concurrency of 10, so at most 10 functions submitted to it may run at once:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\n\nconst queue = new WorkflowQueue("example_queue", 10);\n'})}),"\n",(0,t.jsx)(n.p,{children:"You may want to specify a maximum concurrency if functions in your queue submit work to an external process with limited resources.\nThe concurrency limit guarantees that even if many functions are submitted at once, they won't overwhelm the process."}),"\n",(0,t.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,t.jsxs)(n.p,{children:["You can set ",(0,t.jsx)(n.em,{children:"rate limits"})," for a queue, limiting the number of functions that it can start in a given period.\nRate limits are global across all DBOS processes using this queue.\nFor example, this queue has a limit of 50 with a period of 30 seconds, so it may not start more than 50 functions in 30 seconds:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue", 10, {limitPerPeriod: 50, periodSec: 30});\n'})}),"\n",(0,t.jsx)(n.p,{children:"Rate limits are especially useful when working with a rate-limited API, such as many LLM APIs."}),"\n",(0,t.jsx)(n.h3,{id:"in-order-processing",children:"In-Order Processing"}),"\n",(0,t.jsxs)(n.p,{children:["You can use a queue with ",(0,t.jsx)(n.code,{children:"concurrency=1"})," to guarantee sequential, in-order processing of events.\nOnly a single event will be processed at a time.\nFor example, this app processes events sequentially in the order of their arrival:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\nimport express from "express";\n\nconst serialQueue = new WorkflowQueue("in_order_queue", 1);\nconst app = express();\n\nclass Tasks {\n  @DBOS.workflow()\n  static async processTask(task){\n    // ... process task\n  }\n}\n\napp.get("/events/:event", async (req, res) => {\n  await DBOS.startWorkflow(Tasks, {queueName: serialQueue.name}).processTask(req.params);\n  await res.send("Workflow Started!");\n});\n\n// Launch DBOS and start the Express.js server\nasync function main() {\n  await DBOS.launch({ expressApp: app });\n  app.listen(3000, () => {});\n}\n\nmain().catch(console.log);\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(6540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);