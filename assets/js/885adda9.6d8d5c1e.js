"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9935],{4389:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"python/reference/dbos-class","title":"DBOS Class","description":"The DBOS class is a singleton&mdash;you must instantiate it (by calling its constructor) exactly once in a program\'s lifetime.","source":"@site/docs/python/reference/dbos-class.md","sourceDirName":"python/reference","slug":"/python/reference/dbos-class","permalink":"/python/reference/dbos-class","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"DBOS Class","pagination_prev":null},"sidebar":"tutorialSidebar","next":{"title":"Decorators","permalink":"/python/reference/decorators"}}');var o=s(4848),r=s(8453);const i={sidebar_position:1,title:"DBOS Class",pagination_prev:null},a=void 0,l={},c=[{value:"class dbos.DBOS",id:"class-dbosdbos",level:2},{value:"launch",id:"launch",level:3},{value:"destroy",id:"destroy",level:3},{value:"reset_system_database",id:"reset_system_database",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The DBOS class is a singleton\u2014you must instantiate it (by calling its constructor) exactly once in a program's lifetime.\nHere, we document its constructor and lifecycle methods.\nDecorators are documented ",(0,o.jsx)(n.a,{href:"/python/reference/decorators",children:"here"})," and context methods and variables ",(0,o.jsx)(n.a,{href:"/python/reference/contexts",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"class-dbosdbos",children:"class dbos.DBOS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS(\n    *,\n    config: Optional[DBOSConfig] = None,\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"config"}),": Configuration parameters for DBOS. See the ",(0,o.jsx)(n.a,{href:"/python/reference/configuration",children:"configuration docs"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"launch",children:"launch"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.launch()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Launch DBOS, initializing database connections and starting queues and scheduled workflows.\nShould be called after all decorators run.\n",(0,o.jsx)(n.strong,{children:"You should not run a DBOS workflow until after DBOS is launched."})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import os\nfrom dbos import DBOS, DBOSConfig\n\n# Configure and initialize DBOS\nconfig: DBOSConfig = {\n    "name": "dbos-starter",\n    "system_database_url": os.environ.get("DBOS_SYSTEM_DATABASE_URL"),\n}\nDBOS(config=config)\n\n@DBOS.step()\ndef step_one():\n    print("Step one completed!")\n\n@DBOS.step()\ndef step_two():\n    print("Step two completed!")\n\n@DBOS.workflow()\ndef dbos_workflow():\n    step_one()\n    step_two()\n\n# Launch DBOS, then run a workflow.\nif __name__ == "__main__":\n    DBOS.launch()\n    dbos_workflow()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"destroy",children:"destroy"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.destroy(\n    workflow_completion_timeout_sec: int = 0,\n    destroy_registry: bool = False\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Destroy the DBOS singleton, terminating all active workflows and closing database connections.\nAfter this completes, the singleton can be re-initialized.\nUseful for testing."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"workflow_completion_timeout_sec"}),": Wait this many seconds for active workflows to complete before shutting down."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"destroy_registry"}),": Whether to destroy the global registry of decorated functions. If set to ",(0,o.jsx)(n.code,{children:"True"}),", ",(0,o.jsx)(n.code,{children:"destroy"}),' will "un-register" all decorated functions. You probably want to leave this ',(0,o.jsx)(n.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"reset_system_database",children:"reset_system_database"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.reset_system_database()\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Destroy the DBOS ",(0,o.jsx)(n.a,{href:"/explanations/system-tables",children:"system database"}),", resetting DBOS's internal state in Postgres.\nUseful when testing a DBOS application to reset the internal state of DBOS between tests.\nFor example, see its use in the ",(0,o.jsx)(n.a,{href:"/python/tutorials/testing",children:"testing tutorial"}),".\n",(0,o.jsx)(n.strong,{children:"This is a destructive operation and should only be used in a test environment."})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(6540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);