"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=c(n),d=a,m=g["".concat(p,".").concat(d)]||g[d]||u[d]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[g]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:7,title:"Logging and Tracing",description:"Learn to use Operon logging and tracing"},i=void 0,l={unversionedId:"tutorials/logging",id:"tutorials/logging",title:"Logging and Tracing",description:"Learn to use Operon logging and tracing",source:"@site/docs/tutorials/logging.md",sourceDirName:"tutorials",slug:"/tutorials/logging",permalink:"/tutorials/logging",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Logging and Tracing",description:"Learn to use Operon logging and tracing"},sidebar:"tutorialSidebar",previous:{title:"Workflow Communication",permalink:"/tutorials/workflow-communication-tutorial"},next:{title:"Testing and Debugging",permalink:"/tutorials/testing-tutorial"}},p={},c=[{value:"Logging",id:"logging",level:2},{value:"Usage",id:"usage",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Tracing",id:"tracing",level:2},{value:"Jaeger exporter",id:"jaeger-exporter",level:3}],s={toc:c},g="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this section we will learn to use Operon's built-in logging and tracing systems."),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("p",null,"The Operon runtime comes with a global logger you can access through any operation's ",(0,a.kt)("a",{parentName:"p",href:"/api-reference/contexts"},"context"),"."),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@GetApi('/greeting/:name')\nstatic async greetingEndpoint(ctx: HandlerContext, name: string) {\n    ctx.logger.info(\"Logging from the greeting handler\");\n    return `Greeting, ${name}`;\n}\n")),(0,a.kt)("p",null,"The logger supports ",(0,a.kt)("inlineCode",{parentName:"p"},"info()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"debug()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"warn()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"emerg()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"alert()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"crit()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"error()"),".\nAll except ",(0,a.kt)("inlineCode",{parentName:"p"},"error()")," accept a ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," argument and print it as-is.\n",(0,a.kt)("inlineCode",{parentName:"p"},"error()")," accepts an argument of any type, wraps it in a Javascript ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," object (if it isn't an ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," already), and prints it with its stack trace."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@GetApi('/greeting/:name')\nstatic async greetingEndpoint(ctx: HandlerContext, name: string) {\n    const err = new Error(\"an error!\");\n    ctx.logger.error(err);\n    return `Greeting, ${name}`;\n}\n")),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"In the Operon ",(0,a.kt)("a",{parentName:"p",href:"../api-reference/configuration"},"configuration file"),", you can configure the logging level, silence the logger, and request to add context metadata to log entries:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"...\ntelemetry:\n  logs:\n    loglevel: info (default) | debug | warn | emerg | alert | crit | error\n    addContextMetadata: true (default) | false\n    silent: false (default) | true\n")),(0,a.kt)("p",null,"Context metadata includes the workflow identity UUID and the name of the user running the workflow."),(0,a.kt)("p",null,"You can also configure the logging level as a CLI argument to the Operon runtime:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx operon start --loglevel debug\n")),(0,a.kt)("h2",{id:"tracing"},"Tracing"),(0,a.kt)("p",null,"Operon workflows natively produce ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry"),"-compatible traces.\nWhen a request arrives at an Operon handler, the runtime looks up any ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/trace-context/#trace-context-http-headers-format"},"W3C-compatible trace context")," in the HTTP headers.\nIf found, it uses this context to create a new child ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/concepts/signals/traces/#spans"},(0,a.kt)("inlineCode",{parentName:"a"},"Span"))," and continue the trace, otherwise it starts a new trace. Each Operon operation creates a new child ",(0,a.kt)("inlineCode",{parentName:"p"},"Span")," for the current trace.\nFinally, Operon will inject the trace context in the HTTP headers of the response returned by the handler."),(0,a.kt)("p",null,"Each operation's ",(0,a.kt)("inlineCode",{parentName:"p"},"Span")," is available through its Context.\nHere is an example accessing the ",(0,a.kt)("inlineCode",{parentName:"p"},"Span")," to set custom trace attributes and events:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'@GetApi(\'/greeting/:name\')\nstatic async greetingEndpoint(ctx: HandlerContext, name: string) {\n  ctx.span.setAttributes({\n    key1: "value1",\n    key2: "value2",\n  });\n\n  ctx.span.addEvent("Greeting event", { attribute: "value" });\n\n  return `Greeting, ${name}`;\n}\n')),(0,a.kt)("p",null,"Under the hood, ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.span")," is implemented by the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base"},"OpenTelemetry NodeJS SDK"),"."),(0,a.kt)("h3",{id:"jaeger-exporter"},"Jaeger exporter"),(0,a.kt)("p",null,"Operon ships with a ",(0,a.kt)("a",{parentName:"p",href:"https://jaegertracing.io/"},"Jaeger")," exporter which you can enable in the configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"...\ntelemetry:\n  traces:\n    enable: true (default) | false\n    endpoint: http://localhost:4318/v1/traces (default)\n")))}u.isMDXComponent=!0}}]);