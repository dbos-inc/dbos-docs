"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[944],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>k});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(o),m=n,k=p["".concat(s,".").concat(m)]||p[m]||f[m]||a;return o?r.createElement(k,i(i({ref:t},u),{},{components:o})):r.createElement(k,i({ref:t},u))}));function k(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},7785:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:4,title:"Workflows",description:"Learn how to make applications reliable using workflows."},i=void 0,l={unversionedId:"tutorials/workflow-tutorial",id:"tutorials/workflow-tutorial",title:"Workflows",description:"Learn how to make applications reliable using workflows.",source:"@site/docs/tutorials/workflow-tutorial.md",sourceDirName:"tutorials",slug:"/tutorials/workflow-tutorial",permalink:"/tutorials/workflow-tutorial",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Workflows",description:"Learn how to make applications reliable using workflows."},sidebar:"tutorialSidebar",previous:{title:"Communicators",permalink:"/tutorials/communicator-tutorial"},next:{title:"Idempotency",permalink:"/tutorials/idempotency-tutorial"}},s={},c=[{value:"Invoking Functions from Workflows",id:"invoking-functions-from-workflows",level:3},{value:"Reliability Guarantees",id:"reliability-guarantees",level:3},{value:"Determinism",id:"determinism",level:3},{value:"Workflow Identity",id:"workflow-identity",level:3},{value:"Asynchronous Workflows",id:"asynchronous-workflows",level:3},{value:"Further Reading",id:"further-reading",level:3}],u={toc:c},p="wrapper";function f(e){let{components:t,...o}=e;return(0,n.kt)(p,(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"In this guide, you'll learn how to make your applications reliable using workflows."),(0,n.kt)("p",null,"Workflows orchestrate the execution of other functions, like transactions and communicators.\nThey're useful because they're ",(0,n.kt)("em",{parentName:"p"},"reliable"),": if a server is interruped for any reason (for example, it crashes and restarts), it automatically resumes all incomplete workflows and runs them to completion without re-executing any operation that already completed.\nYou can use workflows when you need to coordinate multiple operations that all need to complete for a program to be correct.\nFor example, in our ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/dbos-inc/operon-demo-apps/tree/main/e-commerce"},"e-commerce demo"),", we use a workflow to do payment processing.\nWorkflow reliability guarantees are especially valuable when some operations are long-running, like waiting for user inputs."),(0,n.kt)("p",null,"Workflows must be annotated with the ",(0,n.kt)("a",{parentName:"p",href:"../api-reference/decorators#operonworkflow"},(0,n.kt)("inlineCode",{parentName:"a"},"@OperonWorkflow"))," decorator and must have a ",(0,n.kt)("a",{parentName:"p",href:"../api-reference/contexts#workflowcontext"},(0,n.kt)("inlineCode",{parentName:"a"},"WorkflowContext"))," as their first argument.\nLike for other Operon functions, inputs and outputs must be serializable to JSON.\nAdditionally, workflows must be ",(0,n.kt)("a",{parentName:"p",href:"#determinism"},"deterministic"),"."),(0,n.kt)("p",null,"Here's an example workflow from our ",(0,n.kt)("a",{parentName:"p",href:"../getting-started/quickstart-programming-2"},"quickstart"),".\nIt increments a counter in the database, then sends an HTTP request.\nIf the request fails, it rolls back the increment.\nBy making this a workflow, we guarantee that the rollback always happens if the request fails, even if the server is interrupted."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"class Hello {\n\n  ... // Other function implementations\n\n  @GetApi('/greeting/:user')\n  @OperonWorkflow()\n  static async helloWorkflow(ctxt: WorkflowContext, user: string) {\n    const greeting = await ctxt.invoke(Hello).helloTransaction(user);\n    try {\n      await ctxt.invoke(Hello).greetPostman(greeting);\n      return greeting;\n    } catch (e) {\n      ctxt.logger.error(e);\n      await ctxt.invoke(Hello).rollbackHelloTransaction(user);\n      return `Greeting failed for ${user}\\n`\n    }\n  }\n")),(0,n.kt)("h3",{id:"invoking-functions-from-workflows"},"Invoking Functions from Workflows"),(0,n.kt)("p",null,"Workflows can invoke transactions and communicators using their ",(0,n.kt)("a",{parentName:"p",href:"../api-reference/contexts#workflowctxtinvoketargetclass"},(0,n.kt)("inlineCode",{parentName:"a"},"ctxt.invoke()"))," method.\nFor example, this line from our above example invokes ",(0,n.kt)("inlineCode",{parentName:"p"},"helloTransaction"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const greeting = await ctxt.invoke(Hello).helloTransaction(user);\n")),(0,n.kt)("p",null,"The syntax for invoking function ",(0,n.kt)("inlineCode",{parentName:"p"},"foo(args)")," in class ",(0,n.kt)("inlineCode",{parentName:"p"},"Bar")," is ",(0,n.kt)("inlineCode",{parentName:"p"},"ctxt.invoke(Bar).foo(args)"),"."),(0,n.kt)("p",null,"You can also invoke other workflows using the ",(0,n.kt)("a",{parentName:"p",href:"../api-reference/contexts#workflowctxtchildworkflowwf-args"},"ctxt.childWorkflow()")," method."),(0,n.kt)("h3",{id:"reliability-guarantees"},"Reliability Guarantees"),(0,n.kt)("p",null,"Workflows provide the following reliability guaranteees:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"They always run to completion.  If a server executing a workflow fails and is restarted, it resumes all incomplete workflows from where they left off."),(0,n.kt)("li",{parentName:"ol"},"Transactions execute ",(0,n.kt)("em",{parentName:"li"},"exactly once"),".  Regardless of what failures occur during a workflow's execution, it executes each of its transactions once and only once."),(0,n.kt)("li",{parentName:"ol"},"Communicators execute ",(0,n.kt)("em",{parentName:"li"},"at least once")," but are never re-executed after they successfully complete.  If a failure occurs inside a communicator, the communicator may be retried, but once a communicator has completed execution, Operon guarantees it will never be re-executed regardless of what failures happen afterwards.")),(0,n.kt)("h3",{id:"determinism"},"Determinism"),(0,n.kt)("p",null,"For workflows to provide reliability guarantees, they must be deterministic.\nIn other words, a workflow function must always do the same thing given the same inputs.\nIf you need to perform a non-deterministic operation like accessing the database, calling a third-party API, generating a random number, or getting the local time, you shouldn't do it directly in a workflow function.\nInstead, you should do all database operations in ",(0,n.kt)("a",{parentName:"p",href:"./transaction-tutorial"},"transactions")," and all other non-deterministic operations in ",(0,n.kt)("a",{parentName:"p",href:"./communicator-tutorial"},"communicators"),"."),(0,n.kt)("h3",{id:"workflow-identity"},"Workflow Identity"),(0,n.kt)("p",null,"Every time you execute a workflow, that execution is assigned a unique identity, represented as a ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Universally_unique_identifier"},"UUID"),".\nYou can access this UUID through the ",(0,n.kt)("inlineCode",{parentName:"p"},"context.workflowUUID")," field.\nWorkflow identities are important for communicating with workflows and developing interactive workflows.\nFor more information on workflow communication, see ",(0,n.kt)("a",{parentName:"p",href:"/tutorials/workflow-communication-tutorial"},"our guide"),"."),(0,n.kt)("h3",{id:"asynchronous-workflows"},"Asynchronous Workflows"),(0,n.kt)("p",null,"Because workflows are often long-running, Operon supports invoking workflows asynchronously.\nWhen you invoke a workflow from a handler or from another workflow, the invocation returns a ",(0,n.kt)("a",{parentName:"p",href:"../api-reference/workflow-handles"},"workflow handle"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"  @GetApi(...)\n  static async exampleHandler(ctxt: HandlerContext, ...) {\n    const handle = await ctxt.invoke(Class).workflow(...);\n  }\n")),(0,n.kt)("p",null,"You can also retrieve another workflow's handle if you know its identity:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"  @GetApi(...)\n  static async exampleHandler(ctxt: HandlerContext, workflowIdentity: string, ...) {\n    const handle = await ctxt.retrieveWorkflow(workflowIdentity);\n  }\n")),(0,n.kt)("p",null,"To wait for a workflow to complete and retrieve its result, await ",(0,n.kt)("inlineCode",{parentName:"p"},"handle.getResult()"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const handle = await ctxt.invoke(Class).workflow(...);\nconst result = await handle.getResult();\n")),(0,n.kt)("p",null,"Or, more concisely:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await ctxt.invoke(Class).workflow(name).then(h => h.getResult());\n")),(0,n.kt)("p",null,"For more information on workflow handles, see ",(0,n.kt)("a",{parentName:"p",href:"../api-reference/workflow-handles"},"their reference page"),"."),(0,n.kt)("h3",{id:"further-reading"},"Further Reading"),(0,n.kt)("p",null,"To learn how to make workflows (or other functions) idempotent, see ",(0,n.kt)("a",{parentName:"p",href:"./idempotency-tutorial"},"our idempotency guide"),"."),(0,n.kt)("p",null,"To learn how to make workflows interactive (for example, to handle user input), see our ",(0,n.kt)("a",{parentName:"p",href:"./workflow-communication-tutorial"},"workflow communication guide"),"."))}f.isMDXComponent=!0}}]);