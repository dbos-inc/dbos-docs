"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7203],{3133:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"typescript/reference/configuration","title":"Configuration","description":"Configuring DBOS","source":"@site/docs/typescript/reference/configuration.md","sourceDirName":"typescript/reference","slug":"/typescript/reference/configuration","permalink":"/typescript/reference/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":60,"frontMatter":{"sidebar_position":60,"title":"Configuration"},"sidebar":"tutorialSidebar","previous":{"title":"DBOS Client","permalink":"/typescript/reference/client"},"next":{"title":"DBOS CLI","permalink":"/typescript/reference/cli"}}');var t=i(4848),o=i(8453);const r={sidebar_position:60,title:"Configuration"},a=void 0,l={},c=[{value:"Configuring DBOS",id:"configuring-dbos",level:2},{value:"DBOS Configuration File",id:"dbos-configuration-file",level:2},{value:"Configuration File Fields",id:"configuration-file-fields",level:3},{value:"Configuration Schema File",id:"configuration-schema-file",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"configuring-dbos",children:"Configuring DBOS"}),"\n",(0,t.jsxs)(n.p,{children:["To configure DBOS, pass in a configuration with ",(0,t.jsx)(n.code,{children:"DBOS.setConfig"})," before you call ",(0,t.jsx)(n.code,{children:"DBOS.launch"}),".\nFor example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"DBOS.setConfig({\n  name: 'my-app',\n  systemDatabaseUrl: process.env.DBOS_SYSTEM_DATABASE_URL,\n});\nawait DBOS.launch();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A configuration object has the following fields.\nAll fields except ",(0,t.jsx)(n.code,{children:"name"})," are optional."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"export interface DBOSConfig {\n  name?: string;\n\n  readonly systemDatabaseUrl?: string;\n  readonly systemDatabasePoolSize?: number;\n\n  readonly logLevel?: string;\n  readonly otlpLogsEndpoints?: string[];\n  readonly otlpTracesEndpoints?: string[];\n\n  readonly runAdminServer?: boolean;\n  readonly adminPort?: number;\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"name"}),": Your application's name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"systemDatabaseUrl"}),": A connection string to a Postgres database in which ",(0,t.jsx)(n.a,{href:"/explanations/system-tables",children:"DBOS can store internal state"}),". The supported format is:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"postgresql://[username]:[password]@[hostname]:[port]/[database name]\n"})}),"\n",(0,t.jsx)(n.p,{children:"The default is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"postgresql://postgres:dbos@localhost:5432/[application name]_dbos_sys\n"})}),"\n",(0,t.jsx)(n.p,{children:"If the Postgres database referenced by this connection string does not exist, DBOS will attempt to create it."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"systemDatabasePoolSize"}),": The size of the connection pool used for the ",(0,t.jsx)(n.a,{href:"../../explanations/system-tables",children:"DBOS system database"}),". Defaults to 20."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"logLevel"}),": Configure the ",(0,t.jsx)(n.a,{href:"/typescript/tutorials/logging",children:"DBOS logger"})," severity. Defaults to ",(0,t.jsx)(n.code,{children:"info"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"otlpTracesEndpoints"}),": DBOS operations ",(0,t.jsx)(n.a,{href:"/typescript/tutorials/logging",children:"automatically generate OpenTelemetry Traces"}),". Use this field to declare a list of OTLP-compatible receivers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"otlpLogsEndpoints"}),": DBOS operations ",(0,t.jsx)(n.a,{href:"/typescript/tutorials/logging",children:"automatically generate OpenTelemetry Logs"}),". Use this field to declare a list of OTLP-compatible receivers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"runAdminServer"}),": Whether to run an ",(0,t.jsx)(n.a,{href:"/production/self-hosting/admin-api",children:"HTTP admin server"})," for workflow management operations. Defaults to True."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"adminPort"}),": The port on which the admin server runs. Defaults to 3001."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"dbos-configuration-file",children:"DBOS Configuration File"}),"\n",(0,t.jsxs)(n.p,{children:["Some tools in the DBOS ecosystem, including ",(0,t.jsx)(n.a,{href:"/production/dbos-cloud/deploying-to-cloud",children:"DBOS Cloud"})," and the ",(0,t.jsx)(n.a,{href:"/typescript/reference/cli",children:"DBOS CLI"}),", are configured by a ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"})," file."]}),"\n",(0,t.jsx)(n.p,{children:"Here is an example configuration file with default parameters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"name: my-app\nlanguage: node\nsystem_database_url: ${DBOS_SYSTEM_DATABASE_URL}\nruntimeConfig:\n  start:\n    - node dist/main.js\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-file-fields",children:"Configuration File Fields"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["You can use environment variables for configuration values through the syntax ",(0,t.jsx)(n.code,{children:"field: ${VALUE}"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"})," file has the following fields and sections:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"name"}),": Your application's name.  Must match the name supplied to ",(0,t.jsx)(n.code,{children:"DBOS.setConfig()"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"language"}),": The application language.  Must be set to ",(0,t.jsx)(n.code,{children:"node"})," for TypeScript applications."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"system_database_url"}),": The connection string to your DBOS system database.\nThis connection string is used by the DBOS ",(0,t.jsx)(n.a,{href:"/typescript/reference/cli",children:"CLI"})," and ",(0,t.jsx)(n.a,{href:"/typescript/tutorials/debugging",children:"debugger"}),".\nIt has the same format as the ",(0,t.jsx)(n.code,{children:"system_database_url"})," you pass to the DBOS constructor."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"runtimeConfig"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"start"}),": (required only in DBOS Cloud) The command(s) with which to start your app. Called from ",(0,t.jsx)(n.a,{href:"/typescript/reference/cli#npx-dbos-start",children:(0,t.jsx)(n.code,{children:"npx dbos start"})}),", which is used to start your app in DBOS Cloud."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"setup"}),": (optional) Setup commands to run before your application is built in DBOS Cloud. Used only in DBOS Cloud. Documentation ",(0,t.jsx)(n.a,{href:"/production/dbos-cloud/application-management#customizing-microvm-setup",children:"here"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-schema-file",children:"Configuration Schema File"}),"\n",(0,t.jsxs)(n.p,{children:["There is a schema file available for the DBOS configuration file schema ",(0,t.jsx)(n.a,{href:"https://raw.githubusercontent.com/dbos-inc/dbos-ts/main/dbos-config.schema.json",children:"in GitHub"}),".\nThis schema file can be used to provide an improved YAML editing experience for developer tools that leverage it.\nFor example, the Visual Studio Code ",(0,t.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml",children:"RedHat YAML extension"})," provides tooltips, statement completion and real-time validation for editing DBOS config files.\nThis extension provides ",(0,t.jsx)(n.a,{href:"https://github.com/redhat-developer/vscode-yaml#associating-schemas",children:"multiple ways"})," to associate a YAML file with its schema.\nThe easiest is to simply add a comment with a link to the schema at the top of the config file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# yaml-language-server: $schema=https://github.com/dbos-inc/dbos-transact-py/blob/main/dbos/dbos-config.schema.json\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);