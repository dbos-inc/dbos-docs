"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6847],{2333:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"python/examples/widget-store","title":"Fault-Tolerant Checkout","description":"In this example, we use DBOS and FastAPI to build an online storefront that\'s resilient to any failure.","source":"@site/docs/python/examples/widget-store.md","sourceDirName":"python/examples","slug":"/python/examples/widget-store","permalink":"/python/examples/widget-store","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":30,"title":"Fault-Tolerant Checkout"},"sidebar":"examplesSidebar","previous":{"title":"Document Ingestion Pipeline","permalink":"/python/examples/document-detective"},"next":{"title":"Stock Tracker","permalink":"/python/examples/stock-tracker"}}');var s=t(4848),o=t(8453);const a={displayed_sidebar:"examplesSidebar",sidebar_position:30,title:"Fault-Tolerant Checkout"},i=void 0,d={},c=[{value:"Import and Initialize the App",id:"import-and-initialize-the-app",level:2},{value:"Building the Checkout Workflow",id:"building-the-checkout-workflow",level:2},{value:"The Checkout and Payment Endpoints",id:"the-checkout-and-payment-endpoints",level:2},{value:"Database Operations",id:"database-operations",level:2},{value:"Launching and Serving the App",id:"launching-and-serving-the-app",level:2},{value:"Try it Yourself!",id:"try-it-yourself",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"In this example, we use DBOS and FastAPI to build an online storefront that's resilient to any failure."}),"\n",(0,s.jsxs)(n.p,{children:["You can see the application live ",(0,s.jsx)(n.a,{href:"https://demo-widget-store.cloud.dbos.dev/",children:"here"}),".\nTry playing with it and pressing the crash button as often as you want.\nWithin a few seconds, the app will recover and resume as if nothing happened."]}),"\n",(0,s.jsxs)(n.p,{children:["All source code is ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/widget-store",children:"available on GitHub"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Widget store UI",src:t(8662).A+"",width:"1243",height:"915"})}),"\n",(0,s.jsx)(n.h2,{id:"import-and-initialize-the-app",children:"Import and Initialize the App"}),"\n",(0,s.jsx)(n.p,{children:"Let's begin with imports and initializing DBOS and FastAPI.\nWe'll also define some constants."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os\n\nimport uvicorn\nfrom dbos import DBOS, SetWorkflowID, DBOSConfig\nfrom fastapi import FastAPI, HTTPException, Response\nfrom fastapi.responses import HTMLResponse\n\nfrom .schema import OrderStatus, orders, products\n\napp = FastAPI()\nconfig: DBOSConfig = {\n    "name": "widget-store",\n    "database_url": os.environ.get(\'DBOS_DATABASE_URL\'),\n}\nDBOS(fastapi=app, config=config)\n\nWIDGET_ID = 1\nPAYMENT_STATUS = "payment_status"\nPAYMENT_ID = "payment_id"\nORDER_ID = "order_id"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"building-the-checkout-workflow",children:"Building the Checkout Workflow"}),"\n",(0,s.jsx)(n.p,{children:"The heart of this application is the checkout workflow, which orchestrates the entire purchase process.\nThis workflow is triggered whenever a customer buys a widget and handles the complete order lifecycle:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Creates a new order in the system"}),"\n",(0,s.jsx)(n.li,{children:"Reserves inventory to ensure the item is available"}),"\n",(0,s.jsx)(n.li,{children:"Processes payment"}),"\n",(0,s.jsx)(n.li,{children:"Marks the order as paid and initiates fulfillment"}),"\n",(0,s.jsx)(n.li,{children:"Handles failures gracefully by releasing reserved inventory and canceling orders when necessary"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["DBOS ",(0,s.jsx)(n.strong,{children:"durably executes"})," this workflow.\nIt checkpoints each step in the database so that if the app fails or is interrupted during checkout, it will automatically recover from the last completed step.\nThis means that customers never lose their order progress, no matter what breaks."]}),"\n",(0,s.jsxs)(n.p,{children:["You can try this yourself!\nOn the ",(0,s.jsx)(n.a,{href:"https://demo-widget-store.cloud.dbos.dev/",children:"live application"}),", start an order and press the crash button at any time.\nWithin seconds, your app will recover to exactly the state it was in before the crash and continue as if nothing happened."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef checkout_workflow():\n    # Create a new order\n    order_id = create_order()\n\n    # Attempt to reserve inventory, cancelling the order if no inventory remains.\n    inventory_reserved = reserve_inventory()\n    if not inventory_reserved:\n        DBOS.logger.error(f"Failed to reserve inventory for order {order_id}")\n        update_order_status(order_id=order_id, status=OrderStatus.CANCELLED.value)\n        DBOS.set_event(PAYMENT_ID, None)\n        return\n\n    # Send a unique payment ID to the checkout endpoint so it\n    # can redirect the customer to the payments page.\n    DBOS.set_event(PAYMENT_ID, DBOS.workflow_id)\n\n    # Wait for a message that the customer has completed payment.\n    payment_status = DBOS.recv(PAYMENT_STATUS)\n\n    # If payment succeeded, mark the order as paid and start the order dispatch workflow.\n    # Otherwise, return reserved inventory and cancel the order.\n    if payment_status == "paid":\n        DBOS.logger.info(f"Payment successful for order {order_id}")\n        update_order_status(order_id=order_id, status=OrderStatus.PAID.value)\n        DBOS.start_workflow(dispatch_order_workflow, order_id)\n    else:\n        DBOS.logger.warn(f"Payment failed for order {order_id}")\n        undo_reserve_inventory()\n        update_order_status(order_id=order_id, status=OrderStatus.CANCELLED.value)\n\n    # Finally, send the order ID to the payment endpoint so it\n    # can redirect the customer to the order status page.\n    DBOS.set_event(ORDER_ID, str(order_id))\n'})}),"\n",(0,s.jsx)(n.h2,{id:"the-checkout-and-payment-endpoints",children:"The Checkout and Payment Endpoints"}),"\n",(0,s.jsx)(n.p,{children:"Now let's implement the HTTP endpoints that handle customer interactions with the checkout system."}),"\n",(0,s.jsx)(n.p,{children:'The checkout endpoint is triggered when a customer clicks the "Buy Now" button.\nIt starts the checkout workflow in the background, then waits for the workflow to generate and send it a unique payment ID.\nIt then returns the payment ID so the browser can redirect the user to the payments page.'}),"\n",(0,s.jsxs)(n.p,{children:["The endpoint accepts an ",(0,s.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"idempotency key"}),' so that even if the customer presses "buy now" multiple times, only one checkout workflow is started.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@app.post("/checkout/{idempotency_key}")\ndef checkout_endpoint(idempotency_key: str) -> Response:\n    # Idempotently start the checkout workflow in the background.\n    with SetWorkflowID(idempotency_key):\n        handle = DBOS.start_workflow(checkout_workflow)\n    # Wait for the checkout workflow to send a payment ID, then return it.\n    payment_id = DBOS.get_event(handle.workflow_id, PAYMENT_ID)\n    if payment_id is None:\n        raise HTTPException(status_code=404, detail="Checkout failed to start")\n    return Response(payment_id)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The payment endpoint handles the communication between the payment system and the checkout workflow.\nIt uses the payment ID to signal the checkout workflow whether the payment succeeded or failed.\nIt then retrieves the order ID from the checkout workflow so the browser can redirect the customer to the order status page."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@app.post("/payment_webhook/{payment_id}/{payment_status}")\ndef payment_endpoint(payment_id: str, payment_status: str) -> Response:\n    # Send the payment status to the checkout workflow.\n    DBOS.send(payment_id, payment_status, PAYMENT_STATUS)\n    # Wait for the checkout workflow to send an order ID, then return it.\n    order_url = DBOS.get_event(payment_id, ORDER_ID)\n    if order_url is None:\n        raise HTTPException(status_code=404, detail="Payment failed to process")\n    return Response(order_url)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"database-operations",children:"Database Operations"}),"\n",(0,s.jsxs)(n.p,{children:["Now, let's implement the checkout workflow's steps.\nEach step performs a database operation, like updating inventory or order status.\nBecause these steps access the database, they are implemented as ",(0,s.jsx)(n.a,{href:"/python/tutorials/transaction-tutorial",children:"transactions"}),"."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("strong",{children:"Database Operations"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@DBOS.transaction()\ndef reserve_inventory() -> bool:\n    rows_affected = DBOS.sql_session.execute(\n        products.update()\n        .where(products.c.product_id == WIDGET_ID)\n        .where(products.c.inventory > 0)\n        .values(inventory=products.c.inventory - 1)\n    ).rowcount\n    return rows_affected > 0\n\n\n@DBOS.transaction()\ndef undo_reserve_inventory() -> None:\n    DBOS.sql_session.execute(\n        products.update()\n        .where(products.c.product_id == WIDGET_ID)\n        .values(inventory=products.c.inventory + 1)\n    )\n\n\n@DBOS.transaction()\ndef create_order() -> int:\n    result = DBOS.sql_session.execute(\n        orders.insert().values(order_status=OrderStatus.PENDING.value)\n    )\n    return result.inserted_primary_key[0]\n\n\n@app.get("/order/{order_id}")\n@DBOS.transaction()\ndef get_order(order_id: int):\n    return (\n        DBOS.sql_session.execute(orders.select().where(orders.c.order_id == order_id))\n        .mappings()\n        .first()\n    )\n\n\n@DBOS.transaction()\ndef update_order_status(order_id: int, status: int) -> None:\n    DBOS.sql_session.execute(\n        orders.update().where(orders.c.order_id == order_id).values(order_status=status)\n    )\n\n\n@app.get("/product")\n@DBOS.transaction()\ndef get_product():\n    return DBOS.sql_session.execute(products.select()).mappings().first()\n\n\n@app.get("/orders")\n@DBOS.transaction()\ndef get_orders():\n    rows = DBOS.sql_session.execute(orders.select())\n    return [dict(row) for row in rows.mappings()]\n\n\n@app.post("/restock")\n@DBOS.transaction()\ndef restock():\n    DBOS.sql_session.execute(products.update().values(inventory=100))\n\n@DBOS.workflow()\ndef dispatch_order_workflow(order_id):\n    for _ in range(10):\n        DBOS.sleep(1)\n        update_order_progress(order_id)\n\n@DBOS.transaction()\ndef update_order_progress(order_id):\n    # Update the progress of paid orders.\n    progress_remaining = DBOS.sql_session.execute(\n        orders.update()\n        .where(orders.c.order_id == order_id)\n        .values(progress_remaining=orders.c.progress_remaining - 1)\n        .returning(orders.c.progress_remaining)\n    ).scalar_one()\n\n    # Dispatch if the order is fully-progressed.\n    if progress_remaining == 0:\n        DBOS.sql_session.execute(\n            orders.update()\n            .where(orders.c.order_id == order_id)\n            .values(order_status=OrderStatus.DISPATCHED.value)\n        )\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"launching-and-serving-the-app",children:"Launching and Serving the App"}),"\n",(0,s.jsx)(n.p,{children:"Let's add the final touches to the app.\nThis FastAPI endpoint serves its frontend:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@app.get("/")\ndef frontend():\n    with open(os.path.join("html", "app.html")) as file:\n        html = file.read()\n    return HTMLResponse(html)\n'})}),"\n",(0,s.jsx)(n.p,{children:"This FastAPI endpoint crashes the app. Trigger it as many times as you want\u2014DBOS always comes back, resuming from exactly where it left off!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@app.post("/crash_application")\ndef crash_application():\n    os._exit(1)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Finally, launch DBOS and the FastAPI server."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    DBOS.launch()\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"try-it-yourself",children:"Try it Yourself!"}),"\n",(0,s.jsxs)(n.p,{children:["First, clone and enter the ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"dbos-demo-apps"})," repository:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps.git\ncd python/widget-store\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then create a virtual environment and install DBOS:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python3 -m venv .venv\nsource .venv/bin/activate\npip install dbos\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Start Postgres (if you already use Postgres, instead set the ",(0,s.jsx)(n.code,{children:"DBOS_DATABASE_URL"})," environment variable to your database connection string):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"dbos postgres start\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create database tables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"dbos migrate\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then start your app:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python3 -m widget_store.main\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Visit ",(0,s.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"})," to see your app!"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8662:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/widget_store_ui-a4c2b42a8c4b98b711e3a2aa714511c9.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);