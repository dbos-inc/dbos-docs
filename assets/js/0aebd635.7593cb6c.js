"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6465],{2114:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(4848),r=n(8453);const s={sidebar_position:1,title:"Workflows",toc_max_heading_level:3},a=void 0,i={id:"python/tutorials/workflow-tutorial",title:"Workflows",description:"Workflows orchestrate other functions.",source:"@site/docs/python/tutorials/workflow-tutorial.md",sourceDirName:"python/tutorials",slug:"/python/tutorials/workflow-tutorial",permalink:"/python/tutorials/workflow-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Workflows",toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Learn DBOS Python",permalink:"/python/programming-guide"},next:{title:"Steps",permalink:"/python/tutorials/step-tutorial"}},l={},c=[{value:"Reliability Guarantees",id:"reliability-guarantees",level:2},{value:"Determinism",id:"determinism",level:2},{value:"Workflow IDs",id:"workflow-ids",level:2},{value:"Starting Workflows Asynchronously",id:"starting-workflows-asynchronously",level:2},{value:"Interactive Workflows",id:"interactive-workflows",level:2},{value:"Events API",id:"events-api",level:3},{value:"set_event",id:"set_event",level:4},{value:"get_event",id:"get_event",level:4},{value:"Events Example",id:"events-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees-1",level:4},{value:"Messages API",id:"messages-api",level:3},{value:"Send",id:"send",level:4},{value:"Recv",id:"recv",level:4},{value:"Messages Example",id:"messages-example",level:4},{value:"Reliability Guarantees",id:"reliability-guarantees-2",level:4}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Workflows orchestrate other functions.\nThey provide ",(0,o.jsx)(t.em,{children:"durable execution"}),": if they are interrupted for any reason (e.g., an executor is restarted or crashes), DBOS automatically resumes them from where they left off, running them to completion without re-executing any operation that already finished.\nWorkflows are critical for building reliable, fault-tolerant programs.\nTo see what workflows can do, try out our ",(0,o.jsx)(t.a,{href:"/python/examples/widget-store",children:"widget store example"}),": no matter how many times you crash the online storefront, it always correctly processes your orders."]}),"\n",(0,o.jsxs)(t.p,{children:["Workflows are comprised of ",(0,o.jsx)(t.a,{href:"/python/tutorials/step-tutorial",children:(0,o.jsx)(t.em,{children:"steps"})}),".\nSteps are functions that the workflow attempts to execute exactly-once.\nIf a workflow is interrupted, it resumes execution from the last completed step.\nYou can make any Python function a step by annotating it with ",(0,o.jsx)(t.code,{children:"@DBOS.step()"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Here's an example workflow (from the ",(0,o.jsx)(t.a,{href:"/python/programming-guide",children:"programming guide"}),") signing an online guestbook then recording the signature in the database.\nHere, ",(0,o.jsx)(t.code,{children:"sign_guestbook"})," is a ",(0,o.jsx)(t.a,{href:"/python/tutorials/step-tutorial",children:"step"})," and ",(0,o.jsx)(t.code,{children:"insert_greeting"})," is a ",(0,o.jsx)(t.a,{href:"/python/tutorials/transaction-tutorial",children:"transaction"}),", a special type of step optimized for database operations.\nBy using a workflow, we guarantee that every guestbook signature is recorded in the database, even if execution is interrupted."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"@DBOS.workflow()\ndef greeting_workflow(name: str, note: str):\n    sign_guestbook(name)\n    insert_greeting(name, note)\n"})}),"\n",(0,o.jsx)(t.h2,{id:"reliability-guarantees",children:"Reliability Guarantees"}),"\n",(0,o.jsx)(t.p,{children:"Workflows provide the following reliability guarantees.\nThese guarantees assume that the application and database may crash and go offline at any point in time, but are always restarted and return online."}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Workflows always run to completion.  If a DBOS process crashes while executing a workflow and is restarted, it resumes the workflow from where it left off."}),"\n",(0,o.jsxs)(t.li,{children:["Steps are tried ",(0,o.jsx)(t.em,{children:"at least once"})," but are never re-executed after they complete.  If a failure occurs inside a step, the step may be retried, but once a step has completed, it will never be re-executed."]}),"\n",(0,o.jsxs)(t.li,{children:["Transactions commit ",(0,o.jsx)(t.em,{children:"exactly once"}),".  Once a workflow commits a transaction, it will never retry that transaction."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"determinism",children:"Determinism"}),"\n",(0,o.jsxs)(t.p,{children:["A workflow implementation must be deterministic: if called multiple times with the same inputs, it should invoke the same steps with the same inputs in the same order.\nIf you need to perform a non-deterministic operation like accessing the database, calling a third-party API, generating a random number, or getting the local time, you shouldn't do it directly in a workflow function.\nInstead, you should do all database operations in ",(0,o.jsx)(t.a,{href:"./transaction-tutorial",children:"transactions"})," and all other non-deterministic operations in ",(0,o.jsx)(t.a,{href:"/python/tutorials/step-tutorial",children:"steps"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["For example, ",(0,o.jsx)(t.strong,{children:"don't do this"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'@DBOS.workflow()\ndef example_workflow(friend: str):\n    body = requests.get("https://example.com").text\n    return example_transaction(body)\n'})}),"\n",(0,o.jsx)(t.p,{children:"Do this instead:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'@DBOS.step()\ndef example_step():\n    return requests.get("https://example.com").text\n\n@DBOS.workflow()\ndef example_workflow(friend: str):\n    body = example_step()\n    return example_transaction(body)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"workflow-ids",children:"Workflow IDs"}),"\n",(0,o.jsxs)(t.p,{children:["Every time you execute a workflow, that execution is assigned a unique ID, by default a ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"}),".\nYou can access this ID through the ",(0,o.jsx)(t.a,{href:"/python/reference/contexts#workflow_id",children:(0,o.jsx)(t.code,{children:"DBOS.workflow_id"})})," context variable.\nWorkflow IDs are important for communicating with workflows and developing interactive workflows.\nFor more information on workflow communication, see our guide."]}),"\n",(0,o.jsx)(t.h2,{id:"starting-workflows-asynchronously",children:"Starting Workflows Asynchronously"}),"\n",(0,o.jsxs)(t.p,{children:["You can use ",(0,o.jsx)(t.a,{href:"/python/reference/contexts#start_workflow",children:"start_workflow"})," to start a workflow in the background without waiting for it to complete.\nThis is useful for long-running or interactive workflows."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"start_workflow"})," returns a ",(0,o.jsx)(t.a,{href:"/python/reference/workflow_handles",children:"workflow handle"}),", from which you can access information about the workflow or wait for it to complete and retrieve its result.\nThe ",(0,o.jsx)(t.code,{children:"start_workflow"})," method resolves after the handle is durably created; at this point the workflow is guaranteed to run to completion even if the app is interrupted."]}),"\n",(0,o.jsx)(t.p,{children:"Here's an example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'@DBOS.workflow()\ndef example_workflow(var1: str, var2: str):\n    DBOS.sleep(10) # Sleep for 10 seconds\n    return var1 + var2\n\n# Start example_workflow in the background\nhandle: WorkflowHandle = DBOS.start_workflow(example_workflow, "var1", "var2")\n# Wait for the workflow to complete and retrieve its result.\nresult = handle.get_result()\n'})}),"\n",(0,o.jsxs)(t.p,{children:["You can also use ",(0,o.jsx)(t.a,{href:"/python/reference/contexts#retrieve_workflow",children:(0,o.jsx)(t.code,{children:"DBOS.retrieve_workflow"})})," to retrieve a workflow's handle from its ",(0,o.jsx)(t.a,{href:"#workflow-ids",children:"workflow ID"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"interactive-workflows",children:"Interactive Workflows"}),"\n",(0,o.jsxs)(t.p,{children:["It is often useful to make workflows ",(0,o.jsx)(t.em,{children:"interactive"}),", for example if a long-running workflow needs to query a user for input or report intermediate results back to its caller.\nTo make this easier, DBOS provides two workflow communication APIs, the events API and the messages API."]}),"\n",(0,o.jsx)(t.h3,{id:"events-api",children:"Events API"}),"\n",(0,o.jsx)(t.p,{children:"This API allows workflows to emit and listen for events.\nEvents are immutable key-value pairs.\nThey are useful for publishing information about the state of an active workflow, for example to transmit information to the workflow's caller."}),"\n",(0,o.jsx)(t.h4,{id:"set_event",children:"set_event"}),"\n",(0,o.jsxs)(t.p,{children:["Any workflow can call ",(0,o.jsx)(t.a,{href:"/python/reference/contexts#set_event",children:(0,o.jsx)(t.code,{children:"DBOS.set_event"})})," to immutably publish a key-value pair.\nA workflow cannot set a key it has already set."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"DBOS.set_event(\n    key: str,\n    value: Any,\n) -> None\n"})}),"\n",(0,o.jsx)(t.h4,{id:"get_event",children:"get_event"}),"\n",(0,o.jsxs)(t.p,{children:["You can call ",(0,o.jsx)(t.a,{href:"/python/reference/contexts#get_event",children:(0,o.jsx)(t.code,{children:"DBOS.get_event"})})," to retrieve the value published by a particular workflow identity for a particular key.\nThis call waits for the event to be published, returning ",(0,o.jsx)(t.code,{children:"None"})," if the wait times out."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"DBOS.get_event(\n    workflow_id: str,\n    key: str,\n    timeout_seconds: float = 60,\n) -> None\n"})}),"\n",(0,o.jsx)(t.h4,{id:"events-example",children:"Events Example"}),"\n",(0,o.jsxs)(t.p,{children:["Events are especially useful for writing interactive workflows that communicate information to their caller.\nFor example, in our ",(0,o.jsx)(t.a,{href:"/python/examples/widget-store",children:"widget store demo"}),", the checkout workflow, after validating an order, needs to send the customer a unique payment ID.\nTo communicate the payment ID to the customer, it uses events."]}),"\n",(0,o.jsxs)(t.p,{children:["The payments workflow emits the payment ID using ",(0,o.jsx)(t.code,{children:"set_event()"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"@DBOS.workflow()\ndef checkout_workflow():\n    ...\n    payment_id = ...\n    dbos.set_event(PAYMENT_ID, payment_id)\n    ...\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The FastAPI handler that originally started the workflow uses ",(0,o.jsx)(t.code,{children:"get_event()"})," to await this payment ID, then returns it:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'@app.post("/checkout/{idempotency_key}")\ndef checkout_endpoint(idempotency_key: str) -> Response:\n    # Idempotently start the checkout workflow in the background.\n    with SetWorkflowID(idempotency_key):\n        handle = DBOS.start_workflow(checkout_workflow)\n    # Wait for the checkout workflow to send a payment ID, then return it.\n    payment_id = DBOS.get_event(handle.workflow_id, PAYMENT_ID)\n    if payment_id is None:\n        raise HTTPException(status_code=404, detail="Checkout failed to start")\n    return Response(payment_id)\n'})}),"\n",(0,o.jsx)(t.h4,{id:"reliability-guarantees-1",children:"Reliability Guarantees"}),"\n",(0,o.jsx)(t.p,{children:"All events are persisted to the database and are immutable, so once an event it set, it is guaranteed to always be retrievable."}),"\n",(0,o.jsx)(t.h3,{id:"messages-api",children:"Messages API"}),"\n",(0,o.jsxs)(t.p,{children:["This API allows operations to send messages to a specific ",(0,o.jsx)(t.a,{href:"./workflow-tutorial#workflow-ids",children:"workflow ID"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"send",children:"Send"}),"\n",(0,o.jsxs)(t.p,{children:["You can call ",(0,o.jsx)(t.code,{children:"DBOS.send()"})," to send a message to a workflow.\nMessages can optionally be associated with a topic and are queued on the receiver per topic."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"DBOS.send(\n    destination_id: str,\n    message: Any,\n    topic: Optional[str] = None\n) -> None\n"})}),"\n",(0,o.jsx)(t.h4,{id:"recv",children:"Recv"}),"\n",(0,o.jsxs)(t.p,{children:["Workflows can call ",(0,o.jsx)(t.code,{children:"DBOS.recv()"})," to receive messages sent to them, optionally for a particular topic.\nEach call to ",(0,o.jsx)(t.code,{children:"recv()"})," waits for and consumes the next message to arrive in the queue for the specified topic, returning ",(0,o.jsx)(t.code,{children:"None"})," if the wait times out.\nIf the topic is not specified, this method only receives messages sent without a topic."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"DBOS.recv(\n    topic: Optional[str] = None,\n    timeout_seconds: float = 60,\n) -> Any\n"})}),"\n",(0,o.jsx)(t.h4,{id:"messages-example",children:"Messages Example"}),"\n",(0,o.jsxs)(t.p,{children:["Messages are especially useful for sending notifications to a workflow.\nFor example, in our ",(0,o.jsx)(t.a,{href:"/python/examples/widget-store",children:"widget store demo"}),", the checkout workflow, after redirecting customers to a payments page, must wait for a notification that the user has paid."]}),"\n",(0,o.jsxs)(t.p,{children:["To wait for this notification, the payments workflow uses ",(0,o.jsx)(t.code,{children:"recv()"}),", executing failure-handling code if the notification doesn't arrive in time:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'@DBOS.workflow()\ndef checkout_workflow():\n  ... # Validate the order, then redirect customers to a payments service.\n  payment_status = DBOS.recv(PAYMENT_STATUS)\n  if payment_status is not None and payment_status == "paid":\n      ... # Handle a successful payment.\n  else:\n      ... # Handle a failed payment or timeout.\n'})}),"\n",(0,o.jsxs)(t.p,{children:["An endpoint waits for the payment processor to send the notification, then uses ",(0,o.jsx)(t.code,{children:"send()"})," to forward it to the workflow:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'@app.post("/payment_webhook/{workflow_id}/{payment_status}")\ndef payment_endpoint(payment_id: str, payment_status: str) -> Response:\n    # Send the payment status to the checkout workflow.\n    DBOS.send(payment_id, payment_status, PAYMENT_STATUS)\n'})}),"\n",(0,o.jsx)(t.h4,{id:"reliability-guarantees-2",children:"Reliability Guarantees"}),"\n",(0,o.jsxs)(t.p,{children:["All messages are persisted to the database, so if ",(0,o.jsx)(t.code,{children:"send"})," completes successfully, the destination workflow is guaranteed to be able to ",(0,o.jsx)(t.code,{children:"recv"})," it.\nIf you're sending a message from a workflow, DBOS guarantees exactly-once delivery because ",(0,o.jsx)(t.a,{href:"./workflow-tutorial#reliability-guarantees",children:"workflows are reliable"}),".\nIf you're sending a message from normal Python code, you can use ",(0,o.jsx)(t.a,{href:"/python/reference/contexts#setworkflowid",children:(0,o.jsx)(t.code,{children:"SetWorkflowID"})})," with an idempotency key to guarantee exactly-once execution."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);