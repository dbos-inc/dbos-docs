"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[113],{4262:(e,n,s)=>{s.d(n,{Ay:()=>l,RM:()=>i});var t=s(4848),o=s(8453),r=s(1432);const i=[];function a(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components},{TabItem:s,Tabs:i}=n;return s||c("TabItem",!0),i||c("Tabs",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i,{groupId:"postgres-or-docker",className:"small-tabs",children:[(0,t.jsxs)(s,{value:"cloud",label:"Use Cloud Postgres",children:[(0,t.jsx)(n.p,{children:"You can connect your local application to a Postgres database hosted in DBOS Cloud."}),(0,t.jsx)(n.p,{children:"First, set a password for your DBOS Cloud database:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"dbos-cloud db reset-password\n"})}),(0,t.jsx)(n.p,{children:"Then connect your local app to your cloud database.\nWhen prompted, enter the password you just set."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"dbos-cloud db local\n"})})]}),(0,t.jsxs)(s,{value:"docker",label:"Launch Postgres with Docker",children:[(0,t.jsxs)(i,{groupId:"operating-systems",className:"small-tabs",children:[(0,t.jsxs)(s,{value:"mac",label:"macOS",children:[(0,t.jsxs)(n.p,{children:["You can install Docker on macOS through ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/desktop/install/mac-install/",children:"Docker Desktop"}),"."]}),(0,t.jsx)(n.p,{children:"Then, run this script to launch Postgres in a Docker container:"}),(0,t.jsx)(r.A,{language:"bash",children:`export PGPASSWORD=dbos\n# Docker may require sudo -E\n${e.cmd}`})]}),(0,t.jsxs)(s,{value:"linux",label:"Linux",children:[(0,t.jsxs)(n.p,{children:["Follow the ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"Docker Engine installation page"})," to install Docker on several popular Linux distributions."]}),(0,t.jsx)(n.p,{children:"Then, run this script to launch Postgres in a Docker container:"}),(0,t.jsx)(r.A,{language:"bash",children:`export PGPASSWORD=dbos\n# Docker may require sudo -E\n${e.cmd}`})]}),(0,t.jsxs)(s,{value:"win-ps",label:"Windows (PowerShell)",children:[(0,t.jsxs)(n.p,{children:["You can install Docker on Windows through ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/desktop/install/windows-install/",children:"Docker Desktop"}),"."]}),(0,t.jsx)(n.p,{children:"Then, run this script to launch Postgres in a Docker container:"}),(0,t.jsx)(r.A,{language:"bash",children:`$env:PGPASSWORD = "dbos"\n${e.cmd}`})]}),(0,t.jsxs)(s,{value:"win-cmd",label:"Windows (cmd)",children:[(0,t.jsxs)(n.p,{children:["You can install Docker on Windows through ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/desktop/install/windows-install/",children:"Docker Desktop"}),"."]}),(0,t.jsx)(n.p,{children:"Then, run this script to launch Postgres in a Docker container:"}),(0,t.jsx)(r.A,{language:"bash",children:`set PGPASSWORD=dbos\n${e.cmd}`})]})]}),(0,t.jsxs)(n.p,{children:["If successful, the script should print ",(0,t.jsx)(n.code,{children:"Database started successfully!"})]})]}),(0,t.jsx)(s,{value:"postgres",label:"Install Postgres",children:(0,t.jsxs)(i,{groupId:"operating-systems",className:"small-tabs",children:[(0,t.jsxs)(s,{value:"mac",label:"macOS",children:[(0,t.jsxs)(n.p,{children:["Follow ",(0,t.jsx)(n.a,{href:"https://www.postgresql.org/download/macosx/",children:"this guide"})," to install Postgres on macOS."]}),(0,t.jsxs)(n.p,{children:["Then, set the ",(0,t.jsx)(n.code,{children:"PGPASSWORD"})," environment variable to your Postgres password:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export PGPASSWORD=<your-postgres-password>\n"})})]}),(0,t.jsxs)(s,{value:"linux",label:"Linux",children:[(0,t.jsxs)(n.p,{children:["Follow these ",(0,t.jsx)(n.a,{href:"https://www.postgresql.org/download/linux/",children:"guides"})," to install Postgres on popular Linux distributions."]}),(0,t.jsxs)(n.p,{children:["Then, set the ",(0,t.jsx)(n.code,{children:"PGPASSWORD"})," environment variable to your Postgres password:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export PGPASSWORD=<your-postgres-password>\n"})})]}),(0,t.jsxs)(s,{value:"win-ps",label:"Windows (PowerShell)",children:[(0,t.jsxs)(n.p,{children:["Follow ",(0,t.jsx)(n.a,{href:"https://www.postgresql.org/download/windows/",children:"this guide"})," to install Postgres on Windows."]}),(0,t.jsxs)(n.p,{children:["Then, set the ",(0,t.jsx)(n.code,{children:"PGPASSWORD"})," environment variable to your Postgres password:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$env:PGPASSWORD = "<your-postgres-password>"\n'})})]}),(0,t.jsxs)(s,{value:"win-cmd",label:"Windows (cmd)",children:[(0,t.jsxs)(n.p,{children:["Follow ",(0,t.jsx)(n.a,{href:"https://www.postgresql.org/download/windows/",children:"this guide"})," to install Postgres on Windows."]}),(0,t.jsxs)(n.p,{children:["Then, set the ",(0,t.jsx)(n.code,{children:"PGPASSWORD"})," environment variable to your Postgres password:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"set PGPASSWORD=<your-postgres-password>\n"})})]})]})})]}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, if you already have a Postgres database, update ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"})," with its connection information."]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}function c(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1833:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=s(4848),o=s(8453);s(4262);const r={sidebar_position:1,title:"Learn DBOS TypeScript",pagination_next:"typescript/tutorials/workflow-tutorial",pagination_prev:"quickstart"},i=void 0,a={id:"typescript/programming-guide",title:"Learn DBOS TypeScript",description:"This tutorial shows you how to use DBOS durable execution to make your TypeScript app resilient to any failure.",source:"@site/docs/typescript/programming-guide.md",sourceDirName:"typescript",slug:"/typescript/programming-guide",permalink:"/typescript/programming-guide",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Learn DBOS TypeScript",pagination_next:"typescript/tutorials/workflow-tutorial",pagination_prev:"quickstart"},sidebar:"tutorialSidebar",previous:{title:"Get Started with DBOS",permalink:"/quickstart"},next:{title:"Workflows",permalink:"/typescript/tutorials/workflow-tutorial"}},l={},c=[{value:"1. Setting Up Your App",id:"1-setting-up-your-app",level:2},{value:"2. Durable Execution with Workflows",id:"2-durable-execution-with-workflows",level:2},{value:"3. Optimizing Database Operations",id:"3-optimizing-database-operations",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{BrowserWindow:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("BrowserWindow",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This tutorial shows you how to use DBOS durable execution to make your TypeScript app ",(0,t.jsx)(n.strong,{children:"resilient to any failure."}),"\nFirst, without using DBOS, we'll build an app that records greetings to two different systems: Postgres and an online guestbook.\nThen, we'll add DBOS durable execution to the app in ",(0,t.jsx)(n.strong,{children:"just four lines of code"}),".\nThanks to durable execution, the app will always write to both systems consistently, even if it is interrupted or restarted at any point."]}),"\n",(0,t.jsx)(n.h2,{id:"1-setting-up-your-app",children:"1. Setting Up Your App"}),"\n",(0,t.jsx)(n.p,{children:"First, initialize a DBOS template app and install dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"npx @dbos-inc/create -t dbos-knex -n greeting-guestbook-ts\ncd greeting-guestbook-ts\nnpm install\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then, let's build a simple app that greets our friends.\nEvery time the app receives a greeting, it performs two steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Sign an online guestbook with the greeting."}),"\n",(0,t.jsx)(n.li,{children:"Record the greeting in the database."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We deliberately ",(0,t.jsx)(n.strong,{children:"won't"})," use DBOS yet so we can show you how easy it is to add later."]}),"\n",(0,t.jsxs)(n.p,{children:["Copy the following code into ",(0,t.jsx)(n.code,{children:"src/main.ts"}),", replacing its existing contents:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:"import express, { Request, Response } from 'express';\nimport knex from 'knex';\nconst knexConfig = require('../knexfile');\n\nexport class Guestbook {\n\n  // Sign the guestbook using an HTTP POST request\n  static async signGuestbook(name: string): Promise<void> {\n    await fetch(\"https://demo-guestbook.cloud.dbos.dev/record_greeting\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ name })\n    });\n    console.log(`>>> STEP 1: Signed the guestbook for ${name}`);\n  }\n\n  // Create a database connection using Knex.js\n  static db = knex(knexConfig);\n\n  // Record the greeting in the database using Knex.js\n  static async insertGreeting(name: string): Promise<void> {\n    await Guestbook.db('dbos_greetings').insert({ greeting_name: name });\n    console.log(`>>> STEP 2: Greeting to ${name} recorded in the database!`);\n  }\n\n  static async greetingEndpoint(name: string): Promise<string> {\n    await Guestbook.signGuestbook(name);\n    await Guestbook.insertGreeting(name);\n    return `Thank you for being awesome, ${name}!`;\n  }\n}\n\n// Create an HTTP server using Express.js\nexport const app = express();\napp.use(express.json());\n\napp.get('/greeting/:name', async (req: Request, res: Response): Promise<void> => {\n  const { name } = req.params;\n  res.send(await Guestbook.greetingEndpoint(name));\n});\n\nasync function main() {\n  const PORT = 3000;\n  const ENV = process.env.NODE_ENV || 'development';\n\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n    console.log(`\ud83c\udf1f Environment: ${ENV}`);\n  });\n}\n\nmain().catch(console.log);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now, run these commands to set up your database and start your app:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"npx dbos migrate\nnpm run build\nnpm run start\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To see that it's is working, visit this URL: ",(0,t.jsx)(n.a,{href:"http://localhost:3000/greeting/Mike",children:"http://localhost:3000/greeting/Mike"})]}),"\n",(0,t.jsx)(s,{url:"http://localhost:3000/greeting/Mike",children:(0,t.jsx)(n.p,{children:'"Thank you for being awesome, Mike!"'})}),"\n",(0,t.jsx)(n.p,{children:"Each time you visit, your app should log first that it has recorded your greeting in the guestbook, then that it has recorded your greeting in the database."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:">>> STEP 1: Signed the guestbook for Mike\n>>> STEP 2: Greeting to Mike recorded in the database!\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, this app has a problem: if it is interrupted after signing the guestbook, but before recording the greeting in the database, then ",(0,t.jsx)(n.strong,{children:"the greeting, though sent, will never be recorded"}),".\nThis is bad in many real-world situations, for example if a program fails to record making or receiving a payment.\nTo fix this problem, we'll use DBOS durable execution."]}),"\n",(0,t.jsx)(n.h2,{id:"2-durable-execution-with-workflows",children:"2. Durable Execution with Workflows"}),"\n",(0,t.jsxs)(n.p,{children:["Next, we want to ",(0,t.jsx)(n.strong,{children:"durably execute"})," our application: guarantee that it inserts exactly one database record per guestbook signature, even if interrupted or restarted.\nDBOS makes this easy with ",(0,t.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial",children:"workflows"}),".\nWe can add durable execution to our app with ",(0,t.jsx)(n.strong,{children:"just four lines of code"})," and an import statement.\nCopy the following code into your ",(0,t.jsx)(n.code,{children:"src/main.ts"}),", replacing its existing contents:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'showLineNumbers title="src/main.ts"',children:"//highlight-next-line\nimport { DBOS } from '@dbos-inc/dbos-sdk';\nimport express, { Request, Response } from 'express';\nimport knex from 'knex';\nconst knexConfig = require('../knexfile');\n\nexport class Guestbook {\n\n  // Sign the guestbook using an HTTP POST request\n  //highlight-next-line\n  @DBOS.step()\n  static async signGuestbook(name: string): Promise<void> {\n    await fetch(\"https://demo-guestbook.cloud.dbos.dev/record_greeting\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ name })\n    });\n    console.log(`>>> STEP 1: Signed the guestbook for ${name}`);\n  }\n\n  // Create a database connection using Knex.js\n  static db = knex(knexConfig);\n\n  // Record the greeting in the database using Knex.js\n  //highlight-next-line\n  @DBOS.step()\n  static async insertGreeting(name: string): Promise<void> {\n    await Guestbook.db('dbos_greetings').insert({ greeting_name: name });\n    console.log(`>>> STEP 2: Greeting to ${name} recorded in the database!`);\n  }\n\n//highlight-next-line\n  @DBOS.workflow()\n  static async greetingEndpoint(name: string): Promise<string> {\n    await Guestbook.signGuestbook(name);\n    for (let i = 0; i < 5; i++) {\n      console.log(\"Press Control + C to stop the app...\");\n      await DBOS.sleep(1000);\n  }\n    await Guestbook.insertGreeting(name);\n    return `Thank you for being awesome, ${name}!`;\n  }\n}\n\n// Create an HTTP server using Express.js\nexport const app = express();\napp.use(express.json());\n\napp.get('/greeting/:name', async (req: Request, res: Response): Promise<void> => {\n  const { name } = req.params;\n  res.send(await Guestbook.greetingEndpoint(name));\n});\n\nasync function main() {\n//highlight-next-line\n  await DBOS.launch({expressApp: app});\n\n  const PORT = 3000;\n  const ENV = process.env.NODE_ENV || 'development';\n\n  app.listen(PORT, () => {\n    console.log(`\ud83d\ude80 Server is running on http://localhost:${PORT}`);\n    console.log(`\ud83c\udf1f Environment: ${ENV}`);\n  });\n}\n\nmain().catch(console.log);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Only the ",(0,t.jsx)(n.strong,{children:"four highlighted lines of code"})," are needed to enable durable execution."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["First, we annotate ",(0,t.jsx)(n.code,{children:"sign_guestbook"})," and ",(0,t.jsx)(n.code,{children:"insert_greeting"})," as ",(0,t.jsx)(n.em,{children:"workflow steps"})," on lines 9 and 25."]}),"\n",(0,t.jsxs)(n.li,{children:["Then, we annotate ",(0,t.jsx)(n.code,{children:"greeting_endpoint"})," as a ",(0,t.jsx)(n.a,{href:"/typescript/tutorials/workflow-tutorial",children:(0,t.jsx)(n.em,{children:"durable workflow"})})," on line 31."]}),"\n",(0,t.jsx)(n.li,{children:"Finally, we launch DBOS on line 53."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Because ",(0,t.jsx)(n.code,{children:"greeting_endpoint"})," is now a durably executed workflow, if it's ever interrupted, it automatically resumes from the last completed step.\nTo help demonstrate this, we also add a sleep so you can interrupt your app midway through the workflow."]}),"\n",(0,t.jsxs)(n.p,{children:["To see the power of durable execution, rebuild your app with ",(0,t.jsx)(n.code,{children:"npm run build"})," and restart your app with ",(0,t.jsx)(n.code,{children:"npm run start"}),".\nThen, visit this URL: ",(0,t.jsx)(n.a,{href:"http://localhost:3000/greeting/Mike",children:"http://localhost:3000/greeting/Mike"}),".\nIn your terminal, you should see an output like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"\ud83d\ude80 Server is running on http://localhost:3000\n\ud83c\udf1f Environment: development\n>>> STEP 1: Signed the guestbook for Mike\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, press CTRL+C stop your app. Then, run ",(0,t.jsx)(n.code,{children:"dbos start"})," to restart it. You should see an output like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"\ud83d\ude80 Server is running on http://localhost:3000\n\ud83c\udf1f Environment: development\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n>>> STEP 2: Greeting to Mike recorded in the database!\n"})}),"\n",(0,t.jsxs)(n.p,{children:['Without durable execution\u2014if you remove the four highlighted lines\u2014your app would restart with a "clean slate" and completely forget about your interrupted workflow.\nBy contrast, DBOS ',(0,t.jsx)(n.strong,{children:"automatically resumes your workflow from where it left off"})," and correctly completes it by recording the greeting to the database without re-signing the guestbook.\nThis is an incredibly powerful guarantee that helps you build complex, reliable applications without worrying about error handling or interruptions."]}),"\n",(0,t.jsx)(n.h2,{id:"3-optimizing-database-operations",children:"3. Optimizing Database Operations"}),"\n",(0,t.jsxs)(n.p,{children:["For workflow steps that access the database, like ",(0,t.jsx)(n.code,{children:"insert_greeting"})," in the example, DBOS provides powerful optimizations.\nTo see this in action, replace the ",(0,t.jsx)(n.code,{children:"insert_greeting"})," function in ",(0,t.jsx)(n.code,{children:"src/main.ts"})," with the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:"showLineNumbers",children:"  @DBOS.transaction()\n  static async insertGreeting(name: string): Promise<void> {\n    await DBOS.knexClient('dbos_greetings').insert({ greeting_name: name });\n    console.log(`>>> STEP 2: Greeting to ${name} recorded in the database!`);\n  }\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/typescript/tutorials/transaction-tutorial",children:(0,t.jsx)(n.code,{children:"@DBOS.transaction()"})})," is a special annotation for workflow steps that access the database.\nIt executes your function in a single database transaction.\nWe recommend using transactions because:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"They give you access to a pre-configured database client, which is more convenient than connecting to the database yourself. DBOS integrates with most popular TypeScript ORMs, including Knex, Prisma, TypeORM, and Drizzle, and also supports raw SQL."}),"\n",(0,t.jsxs)(n.li,{children:["Under the hood, transactions are highly optimized because DBOS can update its record of your program's execution ",(0,t.jsx)(n.em,{children:"inside"})," your transaction. For more info, see our ",(0,t.jsx)(n.a,{href:"/explanations/how-workflows-work",children:'"how workflows work"'})," explainer."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Now, rebuild your app with with ",(0,t.jsx)(n.code,{children:"npm run build"}),", restart with ",(0,t.jsx)(n.code,{children:"npm run start"}),", and visit its URL again: ",(0,t.jsx)(n.a,{href:"http://localhost:3000/greeting/Mike",children:"http://localhost:3000/greeting/Mike"}),".\nThe app should durably execute your workflow the same as before!"]}),"\n",(0,t.jsxs)(n.p,{children:["The code for this guide is available ",(0,t.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/typescript/greeting-guestbook",children:"on GitHub"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Next, to learn how to build more complex applications, check out our TypeScript tutorials and ",(0,t.jsx)(n.a,{href:"/examples/",children:"example apps"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);