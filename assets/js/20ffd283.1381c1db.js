"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[4232],{2372:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"java/integrating-dbos","title":"Add DBOS To Your App","description":"This guide shows you how to add the open-source DBOS Transact library to your existing application to durably execute it and make it resilient to any failure.","source":"@site/docs/java/integrating-dbos.md","sourceDirName":"java","slug":"/java/integrating-dbos","permalink":"/java/integrating-dbos","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"Add DBOS To Your App"},"sidebar":"tutorialSidebar","previous":{"title":"Learn DBOS Java","permalink":"/java/programming-guide"},"next":{"title":"Workflows","permalink":"/java/tutorials/workflow-tutorial"}}');var r=o(4848),s=o(8453);const a={sidebar_position:20,title:"Add DBOS To Your App"},i=void 0,l={},d=[{value:"1. Install DBOS",id:"1-install-dbos",level:3},{value:"2. Add the DBOS Initializer",id:"2-add-the-dbos-initializer",level:3},{value:"3. Start Your Application",id:"3-start-your-application",level:3},{value:"4. Start Building With DBOS",id:"4-start-building-with-dbos",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This guide shows you how to add the open-source ",(0,r.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-transact-java",children:"DBOS Transact"})," library to your existing application to ",(0,r.jsx)(n.strong,{children:"durably execute"})," it and make it resilient to any failure."]}),"\n",(0,r.jsx)(n.h3,{id:"1-install-dbos",children:"1. Install DBOS"}),"\n",(0,r.jsx)(n.p,{children:"Add DBOS to your application by including it in your build configuration."}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:"Gradle"})," (build.gradle):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-groovy",children:"dependencies {\n    implementation 'dev.dbos:transact:0.6+'\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:"Maven"})," (pom.xml):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    <dependency>\n        <groupId>dev.dbos</groupId>\n        <artifactId>transact</artifactId>\n        <version>0.6.0</version>\n    </dependency>\n</dependencies>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-add-the-dbos-initializer",children:"2. Add the DBOS Initializer"}),"\n",(0,r.jsx)(n.p,{children:"Add these lines of code to your program's main method.\nThey configure and launch DBOS when your program starts."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import dev.dbos.transact.DBOS;\nimport dev.dbos.transact.config.DBOSConfig;\n\npublic class MyApp {\n    public static void main(String[] args) throws Exception {\n        // Configure DBOS\n        DBOSConfig config = DBOSConfig.defaults("my-app")\n            .withDatabaseUrl(System.getenv("DBOS_SYSTEM_JDBC_URL"))\n            .withDbUser(System.getenv("PGUSER"))\n            .withDbPassword(System.getenv("PGPASSWORD"));\n        DBOS.configure(config);\n\n        // Register your workflows and queues (see step 4)\n\n        // Launch DBOS\n        DBOS.launch();\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"DBOS uses a Postgres database to durably store workflow and step state.\nYou can connect to your database by setting these environment variables:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DBOS_SYSTEM_JDBC_URL"}),": The JDBC URL for your Postgres database (e.g., ",(0,r.jsx)(n.code,{children:"jdbc:postgresql://localhost:5432/mydb"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PGUSER"}),": Your Postgres username"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PGPASSWORD"}),": Your Postgres password"]}),"\n"]}),(0,r.jsx)(n.p,{children:"If you don't have a Postgres database, you can start one locally with Docker:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"docker run -d \\\n  --name dbos-postgres \\\n  -e POSTGRES_PASSWORD=dbos \\\n  -p 5432:5432 \\\n  postgres:17\n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"3-start-your-application",children:"3. Start Your Application"}),"\n",(0,r.jsxs)(n.p,{children:["Try starting your application.\nIf everything is set up correctly, your app should run normally, but log ",(0,r.jsx)(n.code,{children:"DBOS started"})," on startup.\nCongratulations! You've integrated DBOS into your application."]}),"\n",(0,r.jsx)(n.h3,{id:"4-start-building-with-dbos",children:"4. Start Building With DBOS"}),"\n",(0,r.jsxs)(n.p,{children:["At this point, you can add DBOS workflows and steps to your application.\nFor example, you can annotate one of your methods as a ",(0,r.jsx)(n.a,{href:"/java/tutorials/workflow-tutorial",children:"workflow"})," and the methods it calls as ",(0,r.jsx)(n.a,{href:"/java/tutorials/step-tutorial",children:"steps"}),".\nDBOS durably executes the workflow so if it is ever interrupted, upon restart it automatically resumes from the last completed step."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import dev.dbos.transact.workflow.Workflow;\nimport dev.dbos.transact.workflow.StepOptions;\n\ninterface MyWorkflows {\n    void reliableWorkflow();\n}\n\nclass MyWorkflowsImpl implements MyWorkflows {\n    private void stepOne() {\n        System.out.println("Step one completed!");\n    }\n\n    private void stepTwo() {\n        System.out.println("Step two completed!");\n    }\n\n    @Workflow(name = "reliable-workflow")\n    public void reliableWorkflow() {\n        DBOS.runStep(() -> stepOne(), "stepOne");\n        DBOS.runStep(() -> stepTwo(), "stepTwo");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"To use your workflows, create a proxy before launching DBOS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Create a workflow proxy (before launching DBOS)\nMyWorkflows workflows = DBOS.registerWorkflows(MyWorkflows.class, new MyWorkflowsImpl());\n\n// Launch DBOS\nDBOS.launch();\n\n// Now you can call your workflows\nworkflows.reliableWorkflow();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," You must create all workflow proxies and queues before calling ",(0,r.jsx)(n.code,{children:"DBOS.launch()"}),".\nWorkflow recovery begins after ",(0,r.jsx)(n.code,{children:"DBOS.launch()"}),", so all workflows must be registered before this point."]}),"\n",(0,r.jsx)(n.p,{children:"You can add DBOS to your application incrementally\u2014it won't interfere with code that's already there.\nIt's totally okay for your application to have one DBOS workflow alongside thousands of lines of non-DBOS code."}),"\n",(0,r.jsxs)(n.p,{children:["To learn more about programming with DBOS, check out ",(0,r.jsx)(n.a,{href:"/java/programming-guide",children:"the programming guide"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);