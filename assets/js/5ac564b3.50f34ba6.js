"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[1310],{1102:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"python/reference/client","title":"DBOS Client","description":"DBOSClient provides a programmatic way to interact with your DBOS application from external code.","source":"@site/docs/python/reference/client.md","sourceDirName":"python/reference","slug":"/python/reference/client","permalink":"/python/reference/client","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"DBOS Client"},"sidebar":"tutorialSidebar","previous":{"title":"Workflow Handles","permalink":"/python/reference/workflow_handles"},"next":{"title":"Configuration","permalink":"/python/reference/configuration"}}');var r=s(4848),o=s(8453);const t={sidebar_position:10,title:"DBOS Client"},l=void 0,d={},c=[{value:"class dbos.DBOSClient",id:"class-dbosdbosclient",level:3},{value:"enqueue",id:"enqueue",level:3},{value:"enqueue_async",id:"enqueue_async",level:3},{value:"retrieve_workflow",id:"retrieve_workflow",level:3},{value:"retrieve_workflow_async",id:"retrieve_workflow_async",level:3},{value:"send",id:"send",level:3},{value:"send_async",id:"send_async",level:3},{value:"get_event",id:"get_event",level:3},{value:"get_event_async",id:"get_event_async",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"DBOSClient"})," provides a programmatic way to interact with your DBOS application from external code.\n",(0,r.jsx)(n.code,{children:"DBOSClient"})," includes methods similar to ",(0,r.jsx)(n.a,{href:"/python/reference/contexts",children:(0,r.jsx)(n.code,{children:"DBOS"})})," that can be used outside of a DBOS application,\nsuch as ",(0,r.jsx)(n.a,{href:"/python/reference/queues#enqueue",children:(0,r.jsx)(n.code,{children:"enqueue"})})," or ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#get_event",children:(0,r.jsx)(n.code,{children:"getEvent"})}),"."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"DBOSClient"})," is included in the ",(0,r.jsx)(n.code,{children:"dbos"})," package, the same package that used by DBOS applications.\nWhere DBOS applications use the ",(0,r.jsxs)(n.a,{href:"/python/reference/contexts",children:[(0,r.jsx)(n.code,{children:"DBOS"})," methods"]}),",\nexternal applications use ",(0,r.jsx)(n.code,{children:"DBOSClient"})," instead."]})]}),"\n",(0,r.jsx)(n.h3,{id:"class-dbosdbosclient",children:"class dbos.DBOSClient"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"DBOSClient(\n    database_url: str, \n    *, \n    system_database: Optional[str] = None,\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"database_url"}),": A connection string to a Postgres database. Please see ",(0,r.jsx)(n.a,{href:"/python/reference/configuration#configuring-dbos",children:"Configuring DBOS"})," for more info."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"system_database"}),": The name of your DBOS application's system database.\nThe system database is stored on the same database server as the application database and typically has the same name as your application database, but suffixed with ",(0,r.jsx)(n.code,{children:"_dbos_sys"}),".\nIf you are using a non-standard system database name in your DBOS application, you must also provide its name when creating a ",(0,r.jsx)(n.code,{children:"DBOSClient"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,r.jsxs)(n.p,{children:["This DBOS client connects to the database specified in the ",(0,r.jsx)(n.code,{children:"DBOS_DATABASE_URL"})," environment variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'client = DBOSClient(os.environ["DBOS_DATABASE_URL"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"enqueue",children:"enqueue"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class EnqueueOptions(TypedDict):\n    workflow_name: str\n    queue_name: str\n    workflow_id: NotRequired[str]\n    app_version: NotRequired[str]\n\nclient.enqueue(\n    options: EnqueueOptions, \n    *args: Any, \n    **kwargs: Any\n) -> WorkflowHandle[R]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Enqueue a workflow for processing and return a handle to it, similar to ",(0,r.jsx)(n.a,{href:"/python/reference/queues#enqueue",children:"Queue.enqueue"}),".\nReturns a ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandle",children:"WorkflowHandle"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When enqueuing a workflow from within a DBOS application, the workflow and queue metadata can be retrieved automatically.\nHowever, since ",(0,r.jsx)(n.code,{children:"DBOSClient"})," runs outside the DBOS application, the metadata must be specified explicitly."]}),"\n",(0,r.jsx)(n.p,{children:"Required metadata includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_name"}),": The name of the workflow method being enqueued."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"queue_name"}),": The name of the ",(0,r.jsx)(n.a,{href:"/python/reference/queues",children:"Queue"})," to enqueue the workflow on."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Additional but optional metadata includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"}),": The unique ID for the enqueued workflow.\nIf left undefined, DBOS Client will generate a ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"}),".\nPlease see ",(0,r.jsx)(n.a,{href:"../tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"Workflow IDs and Idempotency"})," for more information."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"app_version"}),": The version of your application that should process this workflow.\nIf left undefined, it will be updated to the current version when the workflow is first dequeued.\nPlease see ",(0,r.jsx)(n.a,{href:"../../production/self-hosting/workflow-recovery#managing-application-versions",children:"Managing Application Versions"})," for more information."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'options: EnqueueOptions = {\n  "queue_name": "process_task",\n  "workflow_name": "example_queue",\n}\nhandle = client.enqueue(options, task)\nresult = handle.get_result()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"enqueue_async",children:"enqueue_async"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client.enqueue_async(\n    options: EnqueueOptions, \n    *args: Any, \n    **kwargs: Any\n) -> WorkflowHandleAsync[R]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Similar to ",(0,r.jsx)(n.a,{href:"#enqueue",children:"enqueue"}),", but enqueues asynchronously and returns a\n",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandleasync",children:"WorkflowHandleAsync"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'options: EnqueueOptions = {\n  "queue_name": "process_task",\n  "workflow_name": "example_queue",\n}\nhandle = await client.enqueue_async(options, task)\nresult = await handle.get_result()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"retrieve_workflow",children:"retrieve_workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client.retrieve_workflow(\n    workflow_id: str, \n) -> WorkflowHandle[R]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieve the ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandle",children:"handle"})," of a workflow with identity ",(0,r.jsx)(n.code,{children:"workflow_id"}),".\nSimilar to ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#retrieve_workflow",children:(0,r.jsx)(n.code,{children:"DBOS.retrieve_workflow"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"}),": The identifier of the workflow whose handle to retrieve."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandle",children:"WorkflowHandle"})," of the workflow whose ID is ",(0,r.jsx)(n.code,{children:"workflow_id"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"retrieve_workflow_async",children:"retrieve_workflow_async"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client.retrieve_workflow_async(\n    workflow_id: str, \n) -> WorkflowHandleAsync[R]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Asynchronously retrieve the ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandleasync",children:"handle"})," of a workflow with identity ",(0,r.jsx)(n.code,{children:"workflow_id"}),".\nSimilar to ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#retrieve_workflow",children:(0,r.jsx)(n.code,{children:"DBOS.retrieve_workflow"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"}),": The identifier of the workflow whose handle to retrieve."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.a,{href:"/python/reference/workflow_handles#workflowhandleasync",children:"WorkflowHandleAsync"})," of the workflow whose ID is ",(0,r.jsx)(n.code,{children:"workflow_id"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"send",children:"send"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client.send(\n    destination_id: str,\n    message: Any,\n    topic: Optional[str] = None,\n    idempotency_key: Optional[str] = None,\n) -> None\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Sends a message to a specified workflow. Similar to ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#send",children:(0,r.jsx)(n.code,{children:"DBOS.send"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"destination_id"}),": The workflow to which to send the message."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message"}),": The message to send. Must be serializable."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic"}),": An optional topic with which to associate the message. Messages are enqueued per-topic on the receiver."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"idempotency_key"}),": An optional string used to ensure exactly-once delivery, even from outside of the DBOS application."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["Since DBOS Client is running outside of a DBOS application,\nit is highly recommended that you use the ",(0,r.jsx)(n.code,{children:"idempotencyKey"})," parameter with both ",(0,r.jsx)(n.code,{children:"send"})," and ",(0,r.jsx)(n.code,{children:"send_async"}),"\nin order to get exactly-once behavior."]})}),"\n",(0,r.jsx)(n.h3,{id:"send_async",children:"send_async"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client.send_async(\n    destination_id: str,\n    message: Any,\n    topic: Optional[str] = None,\n    idempotency_key: Optional[str] = None,\n) -> None\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Asynchronously sends a message to a specified workflow. Similar to ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#send_async",children:(0,r.jsx)(n.code,{children:"DBOS.send_async"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"destination_id"}),": The workflow to which to send the message."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message"}),": The message to send. Must be serializable."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topic"}),": An optional topic with which to associate the message. Messages are enqueued per-topic on the receiver."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"idempotency_key"}),": An optional string used to ensure exactly-once delivery, even from outside of the DBOS application."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get_event",children:"get_event"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client.get_event(\n    workflow_id: str, \n    key: str, \n    timeout_seconds: float = 60\n) -> Any\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Retrieve the latest value of an event published by the workflow identified by ",(0,r.jsx)(n.code,{children:"workflow_id"})," to the key ",(0,r.jsx)(n.code,{children:"key"}),".\nIf the event does not yet exist, wait for it to be published, returning ",(0,r.jsx)(n.code,{children:"None"})," if the wait times out.\nSimilar to ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#get_event",children:"`DBOS.get_event"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"}),": The identifier of the workflow whose events to retrieve."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The key of the event to retrieve."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timeout_seconds"}),": A timeout in seconds. If the wait times out, return ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The value of the event published by ",(0,r.jsx)(n.code,{children:"workflow_id"})," with name ",(0,r.jsx)(n.code,{children:"key"}),", or ",(0,r.jsx)(n.code,{children:"None"})," if the wait times out."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"get_event_async",children:"get_event_async"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client.get_event_async(\n    workflow_id: str, \n    key: str, \n    timeout_seconds: float = 60\n) -> Any\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Asynchronously retrieve the latest value of an event published by the workflow identified by ",(0,r.jsx)(n.code,{children:"workflow_id"})," to the key ",(0,r.jsx)(n.code,{children:"key"}),".\nIf the event does not yet exist, wait for it to be published, returning ",(0,r.jsx)(n.code,{children:"None"})," if the wait times out.\nSimilar to ",(0,r.jsx)(n.a,{href:"/python/reference/contexts#get_event_async",children:"`DBOS.get_event_async"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"workflow_id"}),": The identifier of the workflow whose events to retrieve."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": The key of the event to retrieve."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timeout_seconds"}),": A timeout in seconds. If the wait times out, return ",(0,r.jsx)(n.code,{children:"None"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The value of the event published by ",(0,r.jsx)(n.code,{children:"workflow_id"})," with name ",(0,r.jsx)(n.code,{children:"key"}),", or ",(0,r.jsx)(n.code,{children:"None"})," if the wait times out."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);