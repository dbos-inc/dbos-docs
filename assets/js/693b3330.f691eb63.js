"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6420],{6791:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"typescript/reference/dbos-class","title":"DBOS Lifecycle","description":"The DBOS class is a singleton&mdash;it must be configured and launched exactly once in a program\'s lifetime, before running any DBOS workflows.","source":"@site/docs/typescript/reference/dbos-class.md","sourceDirName":"typescript/reference","slug":"/typescript/reference/dbos-class","permalink":"/typescript/reference/dbos-class","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"DBOS Lifecycle","pagination_prev":null},"sidebar":"tutorialSidebar","next":{"title":"Workflows & Steps","permalink":"/typescript/reference/workflows-steps"}}');var t=s(4848),o=s(8453);const i={sidebar_position:10,title:"DBOS Lifecycle",pagination_prev:null},c=void 0,a={},l=[{value:"DBOS.setConfig",id:"dbossetconfig",level:3},{value:"DBOS.launch",id:"dboslaunch",level:3},{value:"DBOS.shutdown",id:"dbosshutdown",level:3},{value:"DBOS.logRegisteredEndpoints",id:"dboslogregisteredendpoints",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The DBOS class is a singleton\u2014it must be configured and launched exactly once in a program's lifetime, before running any DBOS workflows.\nHere, we document its lifecycle.\nOther methods and variables are documented ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"dbossetconfig",children:"DBOS.setConfig"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"DBOS.setConfig(\n    config: DBOSConfig\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Configure DBOS.\nConfiguration is documented ",(0,t.jsx)(n.a,{href:"/typescript/reference/configuration",children:"here"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"config"}),": Configuration parameters for DBOS. See the ",(0,t.jsx)(n.a,{href:"/typescript/reference/configuration",children:"configuration docs"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dboslaunch",children:"DBOS.launch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"DBOS.launch(\n    options?: DBOSLaunchOptions\n): Promise<void>\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface DBOSLaunchOptions {\n  conductorKey?: string;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Launch DBOS, initializing database connections and starting queues and scheduled workflows.\nShould be called after all workflows and steps are registered.\n",(0,t.jsx)(n.strong,{children:"You should not call a DBOS function until after DBOS is launched."})]}),"\n",(0,t.jsx)(n.p,{children:"For example, here is one way to launch DBOS in an app:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'async function main() {\n  // Configure DBOS\n  DBOS.setConfig({\n    "name": "dbos-node-toolbox",\n    "systemDatabaseUrl": process.env.DBOS_SYSTEM_DATABASE_URL,\n  });\n  // Launch DBOS\n  await DBOS.launch();\n}\n\nmain().catch(console.log);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"conductor_key"}),": An API key for ",(0,t.jsx)(n.a,{href:"/production/self-hosting/conductor",children:"DBOS Conductor"}),". If provided, application is connected to Conductor. API keys can be created from the ",(0,t.jsx)(n.a,{href:"https://console.dbos.dev",children:"DBOS console"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dbosshutdown",children:"DBOS.shutdown"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"DBOS.shutdown(\n): Promise<void>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Shut down DBOS, terminating all active workflows and closing database disconnections.\nAfter this completes, DBOS can be re-configured and re-launched.\nUseful for testing."}),"\n",(0,t.jsx)(n.h3,{id:"dboslogregisteredendpoints",children:"DBOS.logRegisteredEndpoints"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"DBOS.logRegisteredEndpoints(): void\n"})}),"\n",(0,t.jsx)(n.p,{children:"Logs all DBOS functions that are bound to endpoints, including scheduled workflows, kafka consumers, and any other library event receivers.  This can be a useful diagnostic to call at DBOS launch."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);