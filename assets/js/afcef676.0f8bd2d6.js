"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7553],{9820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"python/reference/contexts","title":"DBOS Methods & Variables","description":"DBOS provides a number of useful context methods and variables.","source":"@site/docs/python/reference/contexts.md","sourceDirName":"python/reference","slug":"/python/reference/contexts","permalink":"/python/reference/contexts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"DBOS Methods & Variables"},"sidebar":"tutorialSidebar","previous":{"title":"Decorators","permalink":"/python/reference/decorators"},"next":{"title":"Queues","permalink":"/python/reference/queues"}}');var o=t(4848),r=t(8453);const i={sidebar_position:3,title:"DBOS Methods & Variables"},l=void 0,a={},d=[{value:"Context Methods",id:"context-methods",level:2},{value:"send",id:"send",level:3},{value:"send_async",id:"send_async",level:3},{value:"recv",id:"recv",level:3},{value:"recv_async",id:"recv_async",level:3},{value:"set_event",id:"set_event",level:3},{value:"set_event_async",id:"set_event_async",level:3},{value:"get_event",id:"get_event",level:3},{value:"get_event_async",id:"get_event_async",level:3},{value:"sleep",id:"sleep",level:3},{value:"sleep_async",id:"sleep_async",level:3},{value:"retrieve_workflow",id:"retrieve_workflow",level:3},{value:"retrieve_workflow_async",id:"retrieve_workflow_async",level:3},{value:"start_workflow",id:"start_workflow",level:3},{value:"start_workflow_async",id:"start_workflow_async",level:3},{value:"Workflow Management Methods",id:"workflow-management-methods",level:2},{value:"list_workflows",id:"list_workflows",level:3},{value:"list_queued_workflows",id:"list_queued_workflows",level:3},{value:"list_workflow_steps",id:"list_workflow_steps",level:3},{value:"cancel_workflow",id:"cancel_workflow",level:3},{value:"resume_workflow",id:"resume_workflow",level:3},{value:"fork_workflow",id:"fork_workflow",level:3},{value:"Workflow Status",id:"workflow-status",level:3},{value:"Context Variables",id:"context-variables",level:2},{value:"logger",id:"logger",level:3},{value:"sql_session",id:"sql_session",level:3},{value:"workflow_id",id:"workflow_id",level:3},{value:"step_id",id:"step_id",level:3},{value:"step_status",id:"step_status",level:3},{value:"span",id:"span",level:3},{value:"Authentication",id:"authentication",level:2},{value:"authenticated_user",id:"authenticated_user",level:3},{value:"authenticated_roles",id:"authenticated_roles",level:3},{value:"assumed_role",id:"assumed_role",level:3},{value:"set_authentication",id:"set_authentication",level:3},{value:"Context Management",id:"context-management",level:2},{value:"SetWorkflowID",id:"setworkflowid",level:3},{value:"SetWorkflowTimeout",id:"setworkflowtimeout",level:3},{value:"SetEnqueueOptions",id:"setenqueueoptions",level:3},{value:"DBOSContextEnsure",id:"dboscontextensure",level:3},{value:"DBOSContextSetAuth",id:"dboscontextsetauth",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["DBOS provides a number of useful context methods and variables.\nAll are accessed through the syntax ",(0,o.jsx)(n.code,{children:"DBOS.<method>"})," and can only be used once a DBOS class object has been initialized."]}),"\n",(0,o.jsx)(n.h2,{id:"context-methods",children:"Context Methods"}),"\n",(0,o.jsx)(n.h3,{id:"send",children:"send"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.send(\n    destination_id: str,\n    message: Any,\n    topic: Optional[str] = None\n) -> None\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Send a message to the workflow identified by ",(0,o.jsx)(n.code,{children:"destination_id"}),".\nMessages can optionally be associated with a topic.\nThe ",(0,o.jsx)(n.code,{children:"send"})," function should not be used in ",(0,o.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#coroutine-async-workflows",children:"coroutine workflows"}),", ",(0,o.jsx)(n.a,{href:"#send_async",children:(0,o.jsx)(n.code,{children:"send_async"})})," should be used instead."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"destination_id"}),": The workflow to which to send the message."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"message"}),": The message to send. Must be serializable."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"topic"}),": A topic with which to associate the message. Messages are enqueued per-topic on the receiver."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"send_async",children:"send_async"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.send_async(\n    destination_id: str,\n    message: Any,\n    topic: Optional[str] = None\n) -> Coroutine[Any, Any, None]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Coroutine version of ",(0,o.jsx)(n.a,{href:"#send",children:(0,o.jsx)(n.code,{children:"send"})})]}),"\n",(0,o.jsx)(n.h3,{id:"recv",children:"recv"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.recv(\n    topic: Optional[str] = None,\n    timeout_seconds: float = 60,\n) -> Any\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Receive and return a message sent to this workflow.\nCan only be called from within a workflow.\nMessages are dequeued first-in, first-out from a queue associated with the topic.\nCalls to ",(0,o.jsx)(n.code,{children:"recv"})," wait for the next message in the queue, returning ",(0,o.jsx)(n.code,{children:"None"})," if the wait times out.\nIf no topic is specified, ",(0,o.jsx)(n.code,{children:"recv"})," can only access messages sent without a topic.\nThe ",(0,o.jsx)(n.code,{children:"recv"})," function should not be used in ",(0,o.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#coroutine-async-workflows",children:"coroutine workflows"}),", ",(0,o.jsx)(n.a,{href:"#recv_async",children:(0,o.jsx)(n.code,{children:"recv_async"})})," should be used instead."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"topic"}),": A topic queue on which to wait."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"timeout_seconds"}),": A timeout in seconds. If the wait times out, return ",(0,o.jsx)(n.code,{children:"None"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The first message enqueued on the input topic, or ",(0,o.jsx)(n.code,{children:"None"})," if the wait times out."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"recv_async",children:"recv_async"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.recv_async(\n    topic: Optional[str] = None,\n    timeout_seconds: float = 60,\n) -> Coroutine[Any, Any, Any]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Coroutine version of ",(0,o.jsx)(n.a,{href:"#recv",children:(0,o.jsx)(n.code,{children:"recv"})})]}),"\n",(0,o.jsx)(n.h3,{id:"set_event",children:"set_event"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.set_event(\n    key: str,\n    value: Any,\n) -> None\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Create and associate with this workflow an event with key ",(0,o.jsx)(n.code,{children:"key"})," and value ",(0,o.jsx)(n.code,{children:"value"}),".\nIf the event already exists, update its value.\nCan only be called from within a workflow.\nThe ",(0,o.jsx)(n.code,{children:"set_event"})," function should not be used in ",(0,o.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#coroutine-async-workflows",children:"coroutine workflows"}),", ",(0,o.jsx)(n.code,{children:"set_event_async"})," should be used instead."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"key"}),": The key of the event."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"value"}),": The value of the event. Must be serializable."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"set_event_async",children:"set_event_async"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.set_event(\n    key: str,\n    value: Any,\n) -> Coroutine[Any, Any, None]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Coroutine version of ",(0,o.jsx)(n.a,{href:"#set_event",children:(0,o.jsx)(n.code,{children:"set_event"})})]}),"\n",(0,o.jsx)(n.h3,{id:"get_event",children:"get_event"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.get_event(\n    workflow_id: str,\n    key: str,\n    timeout_seconds: float = 60,\n) -> Any\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Retrieve the latest value of an event published by the workflow identified by ",(0,o.jsx)(n.code,{children:"workflow_id"})," to the key ",(0,o.jsx)(n.code,{children:"key"}),".\nIf the event does not yet exist, wait for it to be published, returning ",(0,o.jsx)(n.code,{children:"None"})," if the wait times out.\nThe ",(0,o.jsx)(n.code,{children:"get_event"})," function should not be used in ",(0,o.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#coroutine-async-workflows",children:"coroutine workflows"}),", ",(0,o.jsx)(n.a,{href:"#get_event_async",children:(0,o.jsx)(n.code,{children:"get_event_async"})})," should be used instead."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"workflow_id"}),": The identifier of the workflow whose events to retrieve."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"key"}),": The key of the event to retrieve."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"timeout_seconds"}),": A timeout in seconds. If the wait times out, return ",(0,o.jsx)(n.code,{children:"None"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The value of the event published by ",(0,o.jsx)(n.code,{children:"workflow_id"})," with name ",(0,o.jsx)(n.code,{children:"key"}),", or ",(0,o.jsx)(n.code,{children:"None"})," if the wait times out."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"get_event_async",children:"get_event_async"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.get_event_async(\n    workflow_id: str,\n    key: str,\n    timeout_seconds: float = 60,\n) -> Coroutine[Any, Any, Any]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Coroutine version of ",(0,o.jsx)(n.a,{href:"#get_event",children:(0,o.jsx)(n.code,{children:"get_event"})})]}),"\n",(0,o.jsx)(n.h3,{id:"sleep",children:"sleep"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.sleep(\n    seconds: float\n) -> None\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Sleep for the given number of seconds.\nMay only be called from within a workflow.\nThis sleep is durable\u2014it records its intended wake-up time in the database so if it is interrupted and recovers, it still wakes up at the intended time.\nThe ",(0,o.jsx)(n.code,{children:"sleep"})," function should not be used in ",(0,o.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#coroutine-async-workflows",children:"coroutine workflows"}),", ",(0,o.jsx)(n.a,{href:"#sleep_async",children:(0,o.jsx)(n.code,{children:"sleep_async"})})," should be used instead."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"seconds"}),": The number of seconds to sleep."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"sleep_async",children:"sleep_async"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.sleep_async(\n    seconds: float\n) -> Coroutine[Any, Any, None]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Coroutine version of ",(0,o.jsx)(n.a,{href:"#sleep",children:(0,o.jsx)(n.code,{children:"sleep"})})]}),"\n",(0,o.jsx)(n.h3,{id:"retrieve_workflow",children:"retrieve_workflow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.retrieve_workflow(\n    workflow_id: str,\n    existing_workflow: bool = True,\n) -> WorkflowHandle[R]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Retrieve the ",(0,o.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," of a workflow with identity ",(0,o.jsx)(n.code,{children:"workflow_id"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"workflow_id"}),": The identifier of the workflow whose handle to retrieve."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"existing_workflow"}),": Whether to throw an exception if the workflow does not yet exist, or to wait for its creation. If set to ",(0,o.jsx)(n.code,{children:"False"})," and the workflow does not exist, will wait for the workflow to be created, then return its handle."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," of the workflow whose ID is ",(0,o.jsx)(n.code,{children:"workflow_id"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"retrieve_workflow_async",children:"retrieve_workflow_async"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.retrieve_workflow(\n    workflow_id: str,\n    existing_workflow: bool = True,\n) -> WorkflowHandleAsync[R]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Coroutine version of ",(0,o.jsx)(n.a,{href:"#retrieve_workflow",children:(0,o.jsx)(n.code,{children:"DBOS.retrieve_workflow"})}),", retrieving an async workflow handle."]}),"\n",(0,o.jsx)(n.h3,{id:"start_workflow",children:"start_workflow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.start_workflow(\n    func: Workflow[P, R],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -> WorkflowHandle[R]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Start a workflow in the background and return a ",(0,o.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," to it.\nThe ",(0,o.jsx)(n.code,{children:"DBOS.start_workflow"})," method resolves after the handle is durably created; at this point the workflow is guaranteed to run to completion even if the app is interrupted."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef example_workflow(var1: str, var2: str):\n    DBOS.logger.info("I am a workflow")\n\n# Start example_workflow in the background\nhandle: WorkflowHandle = DBOS.start_workflow(example_workflow, "var1", "var2")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"start_workflow_async",children:"start_workflow_async"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.start_workflow_async(\n    func: Workflow[P, Coroutine[Any, Any, R]],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -> Coroutine[Any, Any, WorkflowHandleAsync[R]]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Start an asynchronous workflow in the background and return a ",(0,o.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," to it.\nThe ",(0,o.jsx)(n.code,{children:"DBOS.start_workflow_async"})," method resolves after the handle is durably created; at this point the workflow is guaranteed to run to completion even if the app is interrupted."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\nasync def example_workflow(var1: str, var2: str):\n    DBOS.logger.info("I am a workflow")\n\n# Start example_workflow in the background\nhandle: WorkflowHandleAsync = await DBOS.start_workflow_async(example_workflow, "var1", "var2")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"workflow-management-methods",children:"Workflow Management Methods"}),"\n",(0,o.jsx)(n.h3,{id:"list_workflows",children:"list_workflows"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def list_workflows(\n    *,\n    workflow_ids: Optional[List[str]] = None,\n    status: Optional[str] = None,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    name: Optional[str] = None,\n    app_version: Optional[str] = None,\n    user: Optional[str] = None,\n    limit: Optional[int] = None,\n    offset: Optional[int] = None,\n    sort_desc: bool = False,\n    workflow_id_prefix: Optional[str] = None,\n) -> List[WorkflowStatus]:\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Retrieve a list of ",(0,o.jsx)(n.a,{href:"#workflow-status",children:(0,o.jsx)(n.code,{children:"WorkflowStatus"})})," of all workflows matching specified criteria."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"workflow_ids"}),": Retrieve workflows with these IDs."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"workflow_id_prefix"}),": Retrieve workflows whose IDs start with the specified string."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"status"}),": Retrieve workflows with this status (Must be ",(0,o.jsx)(n.code,{children:"ENQUEUED"}),", ",(0,o.jsx)(n.code,{children:"PENDING"}),", ",(0,o.jsx)(n.code,{children:"SUCCESS"}),", ",(0,o.jsx)(n.code,{children:"ERROR"}),", ",(0,o.jsx)(n.code,{children:"CANCELLED"}),", or ",(0,o.jsx)(n.code,{children:"RETRIES_EXCEEDED"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"start_time"}),": Retrieve workflows started after this (RFC 3339-compliant) timestamp."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"end_time"}),": Retrieve workflows started before this (RFC 3339-compliant) timestamp."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"name"}),": Retrieve workflows with this fully-qualified name."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"app_version"}),": Retrieve workflows tagged with this application version."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"user"}),": Retrieve workflows run by this authenticated user."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"limit"}),": Retrieve up to this many workflows."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"offset"}),": Skip this many workflows from the results returned (for pagination)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"sort_desc"}),": Whether to sort the results in descending (",(0,o.jsx)(n.code,{children:"True"}),") or ascending (",(0,o.jsx)(n.code,{children:"False"}),") order by workflow start time."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"list_queued_workflows",children:"list_queued_workflows"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def list_queued_workflows(\n    *,\n    queue_name: Optional[str] = None,\n    status: Optional[str] = None,\n    start_time: Optional[str] = None,\n    end_time: Optional[str] = None,\n    name: Optional[str] = None,\n    limit: Optional[int] = None,\n    offset: Optional[int] = None,\n    sort_desc: bool = False,\n) -> List[WorkflowStatus]:\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Retrieve a list of ",(0,o.jsx)(n.a,{href:"#workflow-status",children:(0,o.jsx)(n.code,{children:"WorkflowStatus"})})," of all ",(0,o.jsx)(n.strong,{children:"currently enqueued"})," workflows matching specified criteria."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"queue_name"}),": Retrieve workflows running on this queue."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"status"}),": Retrieve workflows with this status (Must be ",(0,o.jsx)(n.code,{children:"ENQUEUED"})," or ",(0,o.jsx)(n.code,{children:"PENDING"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"start_time"}),": Retrieve workflows enqueued after this (RFC 3339-compliant) timestamp."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"end_time"}),": Retrieve workflows enqueued before this (RFC 3339-compliant) timestamp."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"name"}),": Retrieve workflows with this fully-qualified name."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"limit"}),": Retrieve up to this many workflows."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"offset"}),": Skip this many workflows from the results returned (for pagination)."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"list_workflow_steps",children:"list_workflow_steps"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def list_workflow_steps(\n    workflow_id: str,\n) -> List[StepInfo]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Retrieve the steps of a workflow.\nThis is a list of ",(0,o.jsx)(n.code,{children:"StepInfo"})," objects, with the following structure:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class StepInfo(TypedDict):\n    # The unique ID of the step in the workflow. One-indexed.\n    function_id: int\n    # The (fully qualified) name of the step\n    function_name: str\n    # The step's output, if any\n    output: Optional[Any]\n    # The error the step threw, if any\n    error: Optional[Exception]\n    # If the step starts or retrieves the result of a workflow, its ID\n    child_workflow_id: Optional[str]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"cancel_workflow",children:"cancel_workflow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.cancel_workflow(\n    workflow_id: str,\n) -> None\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Cancel a workflow.\nThis sets is status to ",(0,o.jsx)(n.code,{children:"CANCELLED"}),", removes it from its queue (if it is enqueued) and preempts its execution (interrupting it at the beginning of its next step)"]}),"\n",(0,o.jsx)(n.h3,{id:"resume_workflow",children:"resume_workflow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.resume_workflow(\n    workflow_id: str\n) -> WorkflowHandle[R]\n"})}),"\n",(0,o.jsx)(n.p,{children:"Resume a workflow.\nThis immediately starts it from its last completed step.\nYou can use this to resume workflows that are cancelled or have exceeded their maximum recovery attempts.\nYou can also use this to start an enqueued workflow immediately, bypassing its queue."}),"\n",(0,o.jsx)(n.h3,{id:"fork_workflow",children:"fork_workflow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.fork_workflow(\n    workflow_id: str,\n    start_step: int,\n    *,\n    application_version: Optional[str] = None,\n) -> WorkflowHandle[R]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Start a new execution of a workflow from a specific step.\nThe input step ID must match the ",(0,o.jsx)(n.code,{children:"function_id"})," of the step returned by ",(0,o.jsx)(n.code,{children:"list_workflow_steps"}),".\nThe specified ",(0,o.jsx)(n.code,{children:"start_step"})," is the step from which the new workflow will start, so any steps whose ID is less than ",(0,o.jsx)(n.code,{children:"start_step"})," will not be re-executed."]}),"\n",(0,o.jsxs)(n.p,{children:["The forked workflow will have a new workflow ID, which can be set with ",(0,o.jsx)(n.a,{href:"#setworkflowid",children:(0,o.jsx)(n.code,{children:"SetWorkflowID"})}),".\nIt is possible to specify the application version on which the forked workflow will run by setting ",(0,o.jsx)(n.code,{children:"application_version"}),', this is useful for "patching" workflows that failed due to a bug in a previous application version.']}),"\n",(0,o.jsx)(n.h3,{id:"workflow-status",children:"Workflow Status"}),"\n",(0,o.jsxs)(n.p,{children:["Some workflow introspection and management methods return a ",(0,o.jsx)(n.code,{children:"WorkflowStatus"}),".\nThis object has the following definition:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class WorkflowStatus:\n    # The workflow ID\n    workflow_id: str\n    # The workflow status. Must be one of ENQUEUED, PENDING, SUCCESS, ERROR, CANCELLED, or RETRIES_EXCEEDED\n    status: str\n    # The name of the workflow function\n    name: str\n    # The number of times the workflow was scheduled to run\n    recovery_attempts: int\n    # The name of the workflow's class, if any\n    class_name: Optional[str]\n    # The name with which the workflow's class instance was configured, if any\n    config_name: Optional[str]\n    # The user who ran the workflow, if specified\n    authenticated_user: Optional[str]\n    # The role with which the workflow ran, if specified\n    assumed_role: Optional[str]\n    # All roles which the authenticated user could assume\n    authenticated_roles: Optional[list[str]]\n    # The deserialized workflow input object\n    input: Optional[WorkflowInputs]\n    # The workflow's output, if any\n    output: Optional[Any]\n    # The error the workflow threw, if any\n    error: Optional[Exception]\n    # Workflow start time, as a Unix epoch timestamp in ms\n    created_at: Optional[int]\n    # Last time the workflow status was updated, as a Unix epoch timestamp in ms\n    updated_at: Optional[int]\n    # If this workflow was enqueued, on which queue\n    queue_name: Optional[str]\n    # The executor to most recently executed this workflow (DBOS__VMID if set else \"local\")\n    executor_id: Optional[str]\n    # The application version on which this workflow was started\n    app_version: Optional[str]\n    # The ID of the application (DBOS__APPID if set)\n    app_id: Optional[str]\n"})}),"\n",(0,o.jsx)(n.h2,{id:"context-variables",children:"Context Variables"}),"\n",(0,o.jsx)(n.h3,{id:"logger",children:"logger"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.logger: Logger\n"})}),"\n",(0,o.jsx)(n.p,{children:"Retrieve the DBOS logger. This is a pre-configured Python logger provided as a convenience."}),"\n",(0,o.jsx)(n.h3,{id:"sql_session",children:"sql_session"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.sql_session: sqlalchemy.Session\n"})}),"\n",(0,o.jsx)(n.p,{children:"May only be accessed from within a transaction.\nRetrieves the SQLAlchemy session of the transaction, a database connection the transaction can use to interact with the database."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["DBOS automatically wraps your transaction functions in a SQLAlchemy ",(0,o.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/20/core/connections.html#connect-and-begin-once-from-the-engine",children:'"begin once" block'}),". Transaction functions automatically commit when they successfully complete and roll back if they throw an exception. Therefore, do not use ",(0,o.jsx)(n.code,{children:"DBOS.sql_session.commit()"})," or ",(0,o.jsx)(n.code,{children:"DBOS.sql_session.rollback()"})," in your transaction functions. Otherwise, you might see a ",(0,o.jsx)(n.code,{children:"sqlalchemy.exc.InvalidRequestError: Can't operate on closed transaction inside context manager"})," error."]})}),"\n",(0,o.jsx)(n.h3,{id:"workflow_id",children:"workflow_id"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.workflow_id: str\n"})}),"\n",(0,o.jsx)(n.p,{children:"May only be accessed from within a workflow, step, or transaction.\nReturn the identity of the current workflow."}),"\n",(0,o.jsx)(n.h3,{id:"step_id",children:"step_id"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.step_id: int\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the unique ID of the current step within a workflow."}),"\n",(0,o.jsx)(n.h3,{id:"step_status",children:"step_status"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.step_status: StepStatus\n"})}),"\n",(0,o.jsx)(n.p,{children:"Return the status of the currently executing step.\nThis object has the following properties:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class StepStatus:\n    # The unique ID of this step in its workflow.\n    step_id: int\n    # For steps with automatic retries, which attempt number (zero-indexed) is currently executing.\n    current_attempt: Optional[int]\n    # For steps with automatic retries, the maximum number of attempts that will be made before the step fails.\n    max_attempts: Optional[int]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"span",children:"span"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.span: opentelemetry.trace.Span\n"})}),"\n",(0,o.jsx)(n.p,{children:"Retrieve the OpenTelemetry span associated with the curent request.\nYou can use this to set custom attributes in your span."}),"\n",(0,o.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,o.jsx)(n.h3,{id:"authenticated_user",children:"authenticated_user"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.authenticated_user: Optional[str]\n"})}),"\n",(0,o.jsx)(n.p,{children:"Return the current authenticated user, if any, associated with the current context."}),"\n",(0,o.jsx)(n.h3,{id:"authenticated_roles",children:"authenticated_roles"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.authenticated_roles: Optional[List[str]]\n"})}),"\n",(0,o.jsx)(n.p,{children:"Return the roles granted to the current authenticated user, if any, associated with the current context."}),"\n",(0,o.jsx)(n.h3,{id:"assumed_role",children:"assumed_role"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.assumed_role: Optional[str]\n"})}),"\n",(0,o.jsx)(n.p,{children:"Return the role currently assumed by the authenticated user, if any, associated with the current context."}),"\n",(0,o.jsx)(n.h3,{id:"set_authentication",children:"set_authentication"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOS.set_authentication(\n  authenticated_user: Optional[str],\n  authenticated_roles: Optional[List[str]]\n) -> None\n"})}),"\n",(0,o.jsx)(n.p,{children:"Set the current authenticated user and granted roles into the current context.  This would generally be done by HTTP middleware"}),"\n",(0,o.jsx)(n.h2,{id:"context-management",children:"Context Management"}),"\n",(0,o.jsx)(n.h3,{id:"setworkflowid",children:"SetWorkflowID"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"SetWorkflowID(\n    wfid: str\n)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Set the ",(0,o.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"workflow ID"})," of the next workflow to run.\nShould be used in a ",(0,o.jsx)(n.code,{children:"with"})," statement."]}),"\n",(0,o.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef example_workflow():\n    DBOS.logger.info(f"I am a workflow with ID {DBOS.workflow_id}")\n\n# The workflow will run with the supplied ID\nwith SetWorkflowID("very-unique-id"):\n    example_workflow()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"setworkflowtimeout",children:"SetWorkflowTimeout"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"SetWorkflowTimeout(\n    workflow_timeout_sec: Optional[float]\n)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Set a timeout for all enclosed workflow invocations or enqueues.\nWhen the timeout expires, the workflow ",(0,o.jsx)(n.strong,{children:"and all its children"})," are cancelled.\nCancelling a workflow sets its status to ",(0,o.jsx)(n.code,{children:"CANCELLED"})," and preempts its execution at the beginning of its next step."]}),"\n",(0,o.jsxs)(n.p,{children:["Timeouts are ",(0,o.jsx)(n.strong,{children:"start-to-completion"}),": if a workflow is enqueued, the timeout does not begin until the workflow is dequeued and starts execution.\nAlso, timeouts are ",(0,o.jsx)(n.strong,{children:"durable"}),": they are stored in the database and persist across restarts, so workflows can have very long timeouts."]}),"\n",(0,o.jsxs)(n.p,{children:["Timeout deadlines are propagated to child workflows by default, so when a workflow's deadline expires all of its child workflows (and their children, and so on) are also cancelled.\nIf you want to detach a child workflow from its parent's timeout, you can start it with ",(0,o.jsx)(n.code,{children:"SetWorkflowTimeout(custom_timeout)"})," to override the propagated timeout.\nYou can use ",(0,o.jsx)(n.code,{children:"SetWorkflowTimeout(None)"})," to start a child workflow with no timeout."]}),"\n",(0,o.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"@DBOS.workflow()\ndef example_workflow():\n    ...\n\n# If the workflow does not complete within 10 seconds, it times out and is cancelled\nwith SetWorkflowTimeout(10):\n    example_workflow()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"setenqueueoptions",children:"SetEnqueueOptions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"SetEnqueueOptions(\n    *,\n    deduplication_id: Optional[str] = None,\n    priority: Optional[int] = None,\n)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Set options for enclosed workflow enqueue operations.\nThese options are ",(0,o.jsx)(n.strong,{children:"not propagated"})," to child workflows."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"deduplication_id"}),": At any given time, only one workflow with a specific deduplication ID can be enqueued in the specified queue. If a workflow with a deduplication ID is currently enqueued or actively executing (status ",(0,o.jsx)(n.code,{children:"ENQUEUED"})," or ",(0,o.jsx)(n.code,{children:"PENDING"}),"), subsequent workflow enqueue attempt with the same deduplication ID in the same queue will raise a ",(0,o.jsx)(n.code,{children:"DBOSQueueDeduplicatedError"})," exception. Defaults to ",(0,o.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"priority"}),": The priority of the enqueued workflow in the specified queue. Workflows with the same priority are dequeued in ",(0,o.jsx)(n.strong,{children:"FIFO (first in, first out)"})," order. Priority values can range from ",(0,o.jsx)(n.code,{children:"1"})," to ",(0,o.jsx)(n.code,{children:"2,147,483,647"}),", where ",(0,o.jsx)(n.strong,{children:"a low number indicates a higher priority"}),". Defaults to ",(0,o.jsx)(n.code,{children:"None"}),". Workflows without assigned priorities have the highest priority and are dequeued before workflows with assigned priorities."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Deduplication Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'with SetEnqueueOptions(deduplication_id="my_dedup_id"):\n    try:\n        handle = queue.enqueue(example_workflow, ...)\n    except DBOSQueueDeduplicatedError as e:\n        # Handle deduplication error\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Priority Example"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"with SetEnqueueOptions(priority=10):\n    # All workflows are enqueued with priority set to 10\n    # They will be dequeued in FIFO order\n    for task in tasks:\n        queue.enqueue(task_workflow, task)\n\nwith SetEnqueueOptions(priority=1):\n    queue.enqueue(first_workflow)\n\n# first_workflow (priority=1) will be dequeued before all task_workflows (priority=10)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"dboscontextensure",children:"DBOSContextEnsure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOSContextEnsure()\n\n  # Code inside will run with a DBOS context available\n  with DBOSContextEnsure():\n    # Call DBOS functions\n    pass\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Use of ",(0,o.jsx)(n.code,{children:"DBOSContextEnsure"})," ensures that there is a DBOS context associated with the enclosed code prior to calling DBOS functions.  ",(0,o.jsx)(n.code,{children:"DBOSContextEnsure"})," is generally not used by applications directly, but used by event dispatchers, HTTP server middleware, etc., to set up the DBOS context prior to entry into function calls."]}),"\n",(0,o.jsx)(n.h3,{id:"dboscontextsetauth",children:"DBOSContextSetAuth"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"DBOSContextSetAuth(user: Optional[str], roles: Optional[List[str]])\n\n  # Code inside will run with `curuser` and `curroles`\n  with DBOSContextSetAuth(curuser, curroles):\n    # Call DBOS functions\n    pass\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"with DBOSContextSetAuth"})," sets the current authorized user and roles for the code inside the ",(0,o.jsx)(n.code,{children:"with"})," block.  Similar to ",(0,o.jsx)(n.code,{children:"DBOSContextEnsure"}),", ",(0,o.jsx)(n.code,{children:"DBOSContextSetAuth"})," also ensures that there is a DBOS context associated with the enclosed code prior to calling DBOS functions."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"DBOSContextSetAuth"})," is generally not used by applications directly, but used by event dispatchers, HTTP server middleware, etc., to set up the DBOS context prior to entry into function calls."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);