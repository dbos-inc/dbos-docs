"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6388],{4633:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>u,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"python/tutorials/queue-tutorial","title":"Queues & Concurrency","description":"You can use queues to run many workflows at once with managed concurrency.","source":"@site/docs/python/tutorials/queue-tutorial.md","sourceDirName":"python/tutorials","slug":"/python/tutorials/queue-tutorial","permalink":"/python/tutorials/queue-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Queues & Concurrency","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Transactions","permalink":"/python/tutorials/transaction-tutorial"},"next":{"title":"Workflow Management","permalink":"/python/tutorials/workflow-management"}}');var t=o(4848),s=o(8453);const i={sidebar_position:4,title:"Queues & Concurrency",toc_max_heading_level:3},u=void 0,a={},l=[{value:"Queue Example",id:"queue-example",level:3},{value:"Managing Concurrency",id:"managing-concurrency",level:3},{value:"Worker Concurrency",id:"worker-concurrency",level:4},{value:"Global Concurrency",id:"global-concurrency",level:4},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"In-Order Processing",id:"in-order-processing",level:3},{value:"Setting Timeouts",id:"setting-timeouts",level:2},{value:"Deduplication",id:"deduplication",level:2},{value:"Priority",id:"priority",level:2},{value:"Enqueueing with DBOS Client",id:"enqueueing-with-dbos-client",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["You can use queues to run many workflows at once with managed concurrency.\nQueues provide ",(0,t.jsx)(n.em,{children:"flow control"}),", letting you manage how many workflows run at once or how often workflows are started."]}),"\n",(0,t.jsx)(n.p,{children:"To create a queue, specify its name:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can then enqueue any DBOS workflow or step.\nEnqueuing a function submits it for execution and returns a ",(0,t.jsx)(n.a,{href:"/python/reference/workflow_handles",children:"handle"})," to it.\nQueued tasks are started in first-in, first-out (FIFO) order."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue")\n\n@DBOS.workflow()\ndef process_task(task):\n  ...\n\ntask = ...\nhandle = queue.enqueue(process_task, task)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"queue-example",children:"Queue Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of a workflow using a queue to process tasks concurrently:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue\n\nqueue = Queue("example_queue")\n\n@DBOS.workflow()\ndef process_task(task):\n  ...\n\n@DBOS.workflow()\ndef process_tasks(tasks):\n  task_handles = []\n  # Enqueue each task so all tasks are processed concurrently.\n  for task in tasks:\n    handle = queue.enqueue(process_task, task)\n    task_handles.append(handle)\n  # Wait for each task to complete and retrieve its result.\n  # Return the results of all tasks.\n  return [handle.get_result() for handle in task_handles]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"managing-concurrency",children:"Managing Concurrency"}),"\n",(0,t.jsx)(n.p,{children:"You can control how many workflows from a queue run simultaneously by configuring concurrency limits.\nThis helps prevent resource exhaustion when workflows consume significant memory or processing power."}),"\n",(0,t.jsx)(n.h4,{id:"worker-concurrency",children:"Worker Concurrency"}),"\n",(0,t.jsx)(n.p,{children:"Worker concurrency sets the maximum number of workflows from a queue that can run concurrently on a single DBOS process.\nThis is particularly useful for resource-intensive workflows to avoid exhausting the resources of any process.\nFor example, this queue has a worker concurrency of 5, so each process will run at most 5 workflows from this queue simultaneously:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue", worker_concurrency=5)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"global-concurrency",children:"Global Concurrency"}),"\n",(0,t.jsx)(n.p,{children:"Global concurrency limits the total number of workflows from a queue that can run concurrently across all DBOS processes in your application.\nFor example, this queue will have a maximum of 10 workflows running simultaneously across your entire application."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Worker concurrency limits are recommended for most use cases.\nTake care when using a global concurrency limit as any ",(0,t.jsx)(n.code,{children:"PENDING"})," workflow on the queue counts toward the limit, including workflows from previous application versions"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import Queue\n\nqueue = Queue("example_queue", concurrency=10)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,t.jsxs)(n.p,{children:["You can set ",(0,t.jsx)(n.em,{children:"rate limits"})," for a queue, limiting the number of functions that it can start in a given period.\nRate limits are global across all DBOS processes using this queue.\nFor example, this queue has a limit of 50 with a period of 30 seconds, so it may not start more than 50 functions in 30 seconds:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'queue = Queue("example_queue", limiter={"limit": 50, "period": 30})\n'})}),"\n",(0,t.jsx)(n.p,{children:"Rate limits are especially useful when working with a rate-limited API, such as many LLM APIs."}),"\n",(0,t.jsx)(n.h3,{id:"in-order-processing",children:"In-Order Processing"}),"\n",(0,t.jsxs)(n.p,{children:["You can use a queue with ",(0,t.jsx)(n.code,{children:"concurrency=1"})," to guarantee sequential, in-order processing of events.\nOnly a single event will be processed at a time.\nFor example, this app processes events sequentially in the order of their arrival:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI\nfrom dbos import DBOS, Queue\n\napp = FastAPI()\nDBOS(fastapi=app)\n\nqueue = Queue("in_order_queue", concurrency=1)\n\n@DBOS.step()\ndef process_event(event: str):\n   ...\n\n@app.post("/events/{event}")\ndef event_endpoint(event: str):\n   queue.enqueue(process_event, event)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"setting-timeouts",children:"Setting Timeouts"}),"\n",(0,t.jsxs)(n.p,{children:["You can set a timeout for an enqueued workflow with ",(0,t.jsx)(n.a,{href:"/python/reference/contexts#setworkflowtimeout",children:(0,t.jsx)(n.code,{children:"SetWorkflowTimeout"})}),".\nWhen the timeout expires, the workflow ",(0,t.jsx)(n.strong,{children:"and all its children"})," are cancelled.\nCancelling a workflow sets its status to ",(0,t.jsx)(n.code,{children:"CANCELLED"})," and preempts its execution at the beginning of its next step."]}),"\n",(0,t.jsxs)(n.p,{children:["Timeouts are ",(0,t.jsx)(n.strong,{children:"start-to-completion"}),": a workflow's timeout does not begin until the workflow is dequeued and starts execution.\nAlso, timeouts are ",(0,t.jsx)(n.strong,{children:"durable"}),": they are stored in the database and persist across restarts, so workflows can have very long timeouts."]}),"\n",(0,t.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'@DBOS.workflow()\ndef example_workflow():\n    ...\n\nqueue = Queue("example-queue")\n\n# If the workflow does not complete within 10 seconds after being dequeued, it times out and is cancelled\nwith SetWorkflowTimeout(10):\n    queue.enqueue(example_workflow)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"deduplication",children:"Deduplication"}),"\n",(0,t.jsxs)(n.p,{children:["You can set a deduplication ID for an enqueued workflow with ",(0,t.jsx)(n.a,{href:"/python/reference/contexts#setenqueueoptions",children:(0,t.jsx)(n.code,{children:"SetEnqueueOptions"})}),".\nAt any given time, only one workflow with a specific deduplication ID can be enqueued in the specified queue.\nIf a workflow with a deduplication ID is currently enqueued or actively executing (status ",(0,t.jsx)(n.code,{children:"ENQUEUED"})," or ",(0,t.jsx)(n.code,{children:"PENDING"}),"), subsequent workflow enqueue attempt with the same deduplication ID in the same queue will raise a ",(0,t.jsx)(n.code,{children:"DBOSQueueDeduplicatedError"})," exception."]}),"\n",(0,t.jsx)(n.p,{children:"For example, this is useful if you only want to have one workflow active at a time per user\u2014set the deduplication ID to the user's ID."}),"\n",(0,t.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS, Queue, SetEnqueueOptions\nfrom dbos import error as dboserror\n\nwith SetEnqueueOptions(deduplication_id="my_dedup_id"):\n    try:\n        handle = queue.enqueue(example_workflow, ...)\n    except dboserror.DBOSQueueDeduplicatedError as e:\n        # Handle deduplication error\n'})}),"\n",(0,t.jsx)(n.h2,{id:"priority",children:"Priority"}),"\n",(0,t.jsxs)(n.p,{children:["You can set a priority for an enqueued workflow with ",(0,t.jsx)(n.a,{href:"/python/reference/contexts#setenqueueoptions",children:(0,t.jsx)(n.code,{children:"SetEnqueueOptions"})}),".\nWorkflows with the same priority are dequeued in ",(0,t.jsx)(n.strong,{children:"FIFO (first in, first out)"})," order. Priority values can range from ",(0,t.jsx)(n.code,{children:"1"})," to ",(0,t.jsx)(n.code,{children:"2,147,483,647"}),", where ",(0,t.jsx)(n.strong,{children:"a low number indicates a higher priority"}),".\nIf using priority, you must set ",(0,t.jsx)(n.code,{children:"priority_enabled=True"})," on your queue."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Workflows without assigned priorities have the highest priority and are dequeued before workflows with assigned priorities."})}),"\n",(0,t.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'queue = Queue("priority_queue", priority_enabled=True)\n\nwith SetEnqueueOptions(priority=10):\n    # All workflows are enqueued with priority set to 10\n    # They will be dequeued in FIFO order\n    for task in tasks:\n        queue.enqueue(task_workflow, task)\n\nwith SetEnqueueOptions(priority=1):\n    queue.enqueue(first_workflow)\n\n# first_workflow (priority=1) will be dequeued before all task_workflows (priority=10)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"enqueueing-with-dbos-client",children:"Enqueueing with DBOS Client"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.a,{href:"/python/reference/client",children:"DBOS Client"})," to enqueue workflows from outside your DBOS application by connecting to Postgres directly."]}),"\n",(0,t.jsx)(n.p,{children:"Since the DBOS Client is designed to be used from outside your DBOS application, workflow and queue metadata must be specified explicitly."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import DBOSClient, EnqueueOptions\n\nclient = DBOSClient(system_database_url=os.environ["DBOS_SYSTEM_DATABASE_URL"])\n\noptions: EnqueueOptions = {\n  "queue_name": "process_task",\n  "workflow_name": "example_queue",\n}\nhandle = client.enqueue(options, task)\nresult = handle.get_result()\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>u});var r=o(6540);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);