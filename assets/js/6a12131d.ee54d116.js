"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[1190],{4807:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"typescript/tutorials/queue-tutorial","title":"Queues & Concurrency","description":"You can use queues to run many workflows at once with managed concurrency.","source":"@site/docs/typescript/tutorials/queue-tutorial.md","sourceDirName":"typescript/tutorials","slug":"/typescript/tutorials/queue-tutorial","permalink":"/typescript/tutorials/queue-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":45,"frontMatter":{"sidebar_position":45,"title":"Queues & Concurrency","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Transactions & Datasources","permalink":"/typescript/tutorials/transaction-tutorial"},"next":{"title":"Communicating with Workflows","permalink":"/typescript/tutorials/workflow-communication"}}');var t=s(4848),r=s(8453);const a={sidebar_position:45,title:"Queues & Concurrency",toc_max_heading_level:3},i=void 0,u={},c=[{value:"Queue Example",id:"queue-example",level:3},{value:"Managing Concurrency",id:"managing-concurrency",level:3},{value:"Worker Concurrency",id:"worker-concurrency",level:4},{value:"Global Concurrency",id:"global-concurrency",level:4},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Setting Timeouts",id:"setting-timeouts",level:3},{value:"Deduplication",id:"deduplication",level:3},{value:"Priority",id:"priority",level:3},{value:"In-Order Processing",id:"in-order-processing",level:3},{value:"Enqueue with DBOSClient",id:"enqueue-with-dbosclient",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["You can use queues to run many workflows at once with managed concurrency.\nQueues provide ",(0,t.jsx)(n.em,{children:"flow control"}),", letting you manage how many workflows run at once or how often workflows are started."]}),"\n",(0,t.jsx)(n.p,{children:"To create a queue, specify its name:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\n\nconst queue = new WorkflowQueue("example_queue");\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can then enqueue any workflow by passing the queue as an argument to ",(0,t.jsx)(n.code,{children:"DBOS.startWorkflow"}),".\nEnqueuing a function submits it for execution and returns a ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#workflow-handles",children:"handle"})," to it.\nQueued tasks are started in first-in, first-out (FIFO) order."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue");\n\nclass Tasks {\n  @DBOS.workflow()\n  static async processTask(task) {\n    // ...\n  }\n}\n\nasync function main() {\n  const task = ...\n  const handle = await DBOS.startWorkflow(Tasks, {queueName: queue.name}).processTask(task)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"queue-example",children:"Queue Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of a workflow using a queue to process tasks in parallel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\n\nconst queue = new WorkflowQueue("example_queue");\n\nasync function taskFunction(task) {\n    // ...\n}\nconst taskWorkflow = DBOS.registerWorkflow(taskFunction, {"name": "taskWorkflow"});\n\nasync function queueFunction(tasks) {\n  const handles = []\n  \n  // Enqueue each task so all tasks are processed concurrently.\n  for (const task of tasks) {\n    handles.push(await DBOS.startWorkflow(taskWorkflow, { queueName: queue.name })(task))\n  }\n\n  // Wait for each task to complete and retrieve its result.\n  // Return the results of all tasks.\n  const results = []\n  for (const h of handles) {\n    results.push(await h.getResult())\n  }\n  return results\n}\nconst queueWorkflow = DBOS.registerWorkflow(queueFunction, {"name": "queueWorkflow"})\n'})}),"\n",(0,t.jsx)(n.h3,{id:"managing-concurrency",children:"Managing Concurrency"}),"\n",(0,t.jsx)(n.p,{children:"You can control how many workflows from a queue run simultaneously by configuring concurrency limits.\nThis helps prevent resource exhaustion when workflows consume significant memory or processing power."}),"\n",(0,t.jsx)(n.h4,{id:"worker-concurrency",children:"Worker Concurrency"}),"\n",(0,t.jsx)(n.p,{children:"Worker concurrency sets the maximum number of workflows from a queue that can run concurrently on a single DBOS process.\nThis is particularly useful for resource-intensive workflows to avoid exhausting the resources of any process.\nFor example, this queue has a worker concurrency of 5, so each process will run at most 5 workflows from this queue simultaneously:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\n\nconst queue = new WorkflowQueue("example_queue", { workerConcurrency: 5 });\n'})}),"\n",(0,t.jsx)(n.h4,{id:"global-concurrency",children:"Global Concurrency"}),"\n",(0,t.jsx)(n.p,{children:"Global concurrency limits the total number of workflows from a queue that can run concurrently across all DBOS processes in your application.\nFor example, this queue will have a maximum of 10 workflows running simultaneously across your entire application."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Worker concurrency limits are recommended for most use cases.\nTake care when using a global concurrency limit as any ",(0,t.jsx)(n.code,{children:"PENDING"})," workflow on the queue counts toward the limit, including workflows from previous application versions"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\n\nconst queue = new WorkflowQueue("example_queue", { concurrency: 10 });\n'})}),"\n",(0,t.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,t.jsxs)(n.p,{children:["You can set ",(0,t.jsx)(n.em,{children:"rate limits"})," for a queue, limiting the number of functions that it can start in a given period.\nRate limits are global across all DBOS processes using this queue.\nFor example, this queue has a limit of 50 with a period of 30 seconds, so it may not start more than 50 functions in 30 seconds:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue", { rateLimit: { limitPerPeriod: 50, periodSec: 30 } });\n'})}),"\n",(0,t.jsx)(n.p,{children:"Rate limits are especially useful when working with a rate-limited API, such as many LLM APIs."}),"\n",(0,t.jsx)(n.h3,{id:"setting-timeouts",children:"Setting Timeouts"}),"\n",(0,t.jsxs)(n.p,{children:["You can set a timeout for an enqueued workflow by passing a ",(0,t.jsx)(n.code,{children:"timeoutMS"})," argument to ",(0,t.jsx)(n.code,{children:"DBOS.startWorkflow"}),".\nWhen the timeout expires, the workflow ",(0,t.jsx)(n.strong,{children:"and all its children"})," are cancelled.\nCancelling a workflow sets its status to ",(0,t.jsx)(n.code,{children:"CANCELLED"})," and preempts its execution at the beginning of its next step."]}),"\n",(0,t.jsxs)(n.p,{children:["Timeouts are ",(0,t.jsx)(n.strong,{children:"start-to-completion"}),": a workflow's timeout does not begin until the workflow is dequeued and starts execution.\nAlso, timeouts are ",(0,t.jsx)(n.strong,{children:"durable"}),": they are stored in the database and persist across restarts, so workflows can have very long timeouts."]}),"\n",(0,t.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue");\n\nasync function taskFunction(task) {\n    // ...\n}\nconst taskWorkflow = DBOS.registerWorkflow(taskFunction, {"name": "taskWorkflow"});\n\nasync function main() {\n  const task = ...\n  const timeout = ... // Timeout in milliseconds\n  const handle = await DBOS.startWorkflow(taskWorkflow, {queueName: queue.name, timeoutMS: timeout})(task);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"deduplication",children:"Deduplication"}),"\n",(0,t.jsxs)(n.p,{children:["You can set a deduplication ID for an enqueued workflow as an argument to ",(0,t.jsx)(n.code,{children:"DBOS.startWorkflow"}),".\nAt any given time, only one workflow with a specific deduplication ID can be enqueued in the specified queue.\nIf a workflow with a deduplication ID is currently enqueued or actively executing (status ",(0,t.jsx)(n.code,{children:"ENQUEUED"})," or ",(0,t.jsx)(n.code,{children:"PENDING"}),"), subsequent workflow enqueue attempt with the same deduplication ID in the same queue will raise a ",(0,t.jsx)(n.code,{children:"DBOSQueueDuplicatedError"})," exception."]}),"\n",(0,t.jsx)(n.p,{children:"For example, this is useful if you only want to have one workflow active at a time per user\u2014set the deduplication ID to the user's ID."}),"\n",(0,t.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue");\n\nasync function taskFunction(task) {\n    // ...\n}\nconst taskWorkflow = DBOS.registerWorkflow(taskFunction, {"name": "taskWorkflow"});\n\nasync function main() {\n  const task = ...\n  const dedup: string = ...\n  try {\n    const handle = await DBOS.startWorkflow(taskWorkflow, {queueName: queue.name, enqueueOptions: {deduplicationID: dedup}})(task);\n  } catch (e) {\n    // Handle DBOSQueueDuplicatedError\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"priority",children:"Priority"}),"\n",(0,t.jsxs)(n.p,{children:["You can set a priority for an enqueued workflow as an argument to ",(0,t.jsx)(n.code,{children:"DBOS.startWorkflow"}),".\nWorkflows with the same priority are dequeued in ",(0,t.jsx)(n.strong,{children:"FIFO (first in, first out)"})," order. Priority values can range from ",(0,t.jsx)(n.code,{children:"1"})," to ",(0,t.jsx)(n.code,{children:"2,147,483,647"}),", where ",(0,t.jsx)(n.strong,{children:"a low number indicates a higher priority"}),".\nIf using priority, you must set ",(0,t.jsx)(n.code,{children:"usePriority: true"})," on your queue."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Workflows without assigned priorities have the highest priority and are dequeued before workflows with assigned priorities."})}),"\n",(0,t.jsx)(n.p,{children:"Example syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const queue = new WorkflowQueue("example_queue", {usePriority: true});\n\nasync function taskFunction(task) {\n    // ...\n}\nconst taskWorkflow = DBOS.registerWorkflow(taskFunction, {"name": "taskWorkflow"});\n\nasync function main() {\n  const task = ...\n  const priority: number = ...\n  const handle = await DBOS.startWorkflow(taskWorkflow, {queueName: queue.name, enqueueOptions: {priority: priority}})(task);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"in-order-processing",children:"In-Order Processing"}),"\n",(0,t.jsxs)(n.p,{children:["You can use a queue with ",(0,t.jsx)(n.code,{children:"concurrency=1"})," to guarantee sequential, in-order processing of events.\nOnly a single event will be processed at a time.\nFor example, this app processes events sequentially in the order of their arrival:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { DBOS, WorkflowQueue } from "@dbos-inc/dbos-sdk";\nimport express from "express";\n\nconst serialQueue = new WorkflowQueue("in_order_queue", { concurrency: 1 });\nconst app = express();\n\nclass Tasks {\n  @DBOS.workflow()\n  static async processTask(task){\n    // ... process task\n  }\n}\n\napp.get("/events/:event", async (req, res) => {\n  await DBOS.startWorkflow(Tasks, {queueName: serialQueue.name}).processTask(req.params);\n  await res.send("Workflow Started!");\n});\n\n// Launch DBOS and start the server\nasync function main() {\n  await DBOS.launch();\n  app.listen(3000, () => {});\n}\n\nmain().catch(console.log);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enqueue-with-dbosclient",children:"Enqueue with DBOSClient"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/typescript/reference/client",children:(0,t.jsx)(n.code,{children:"DBOSClient"})})," provides a way to programmatically interact with your DBOS application from external code.\nAmong other things, this allows you to enqueue workflows from outside your DBOS application."]}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(n.code,{children:"DBOSClient"})," is designed to be used from outside your DBOS application, workflow and queue metadata must be specified explicitly."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { DBOSClient } from \"@dbos-inc/dbos-sdk\";\n\nconst client = await DBOSClient.create({systemDatabaseUrl: process.env.DBOS_SYSTEM_DATABASE_URL});\n\ntype ProcessTask = typeof Tasks.processTask;\nawait client.enqueue<ProcessTask>(\n    {\n        workflowName: 'processTask',\n        workflowClassName: 'Tasks',\n        queueName: 'example_queue',\n    }, \n    task);\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var o=s(6540);const t={},r=o.createContext(t);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);