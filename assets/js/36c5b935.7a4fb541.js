"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6287],{9017:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"python/programming-guide","title":"Learn DBOS Python","description":"This guide shows you how to use DBOS to build Python apps that are resilient to any failure.","source":"@site/docs/python/programming-guide.md","sourceDirName":"python","slug":"/python/programming-guide","permalink":"/python/programming-guide","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Learn DBOS Python","pagination_next":"python/tutorials/workflow-tutorial","pagination_prev":"quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"Get Started with DBOS","permalink":"/quickstart"},"next":{"title":"Workflows","permalink":"/python/tutorials/workflow-tutorial"}}');var s=t(4848),r=t(8453);const i={sidebar_position:10,title:"Learn DBOS Python",pagination_next:"python/tutorials/workflow-tutorial",pagination_prev:"quickstart"},a=void 0,l={},p=[{value:"1. Setting Up Your Environment",id:"1-setting-up-your-environment",level:2},{value:"2. Workflows and Steps",id:"2-workflows-and-steps",level:2},{value:"3. Queues and Parallelism",id:"3-queues-and-parallelism",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{TabItem:t,Tabs:o}=n;return t||h("TabItem",!0),o||h("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This guide shows you how to use DBOS to build Python apps that are ",(0,s.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"1-setting-up-your-environment",children:"1. Setting Up Your Environment"}),"\n",(0,s.jsx)(n.p,{children:"Create a folder for your app with a virtual environment, then enter the folder and activate the virtual environment."}),"\n",(0,s.jsxs)(o,{groupId:"operating-systems",className:"small-tabs",children:[(0,s.jsx)(t,{value:"maclinux",label:"macOS or Linux",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python3 -m venv dbos-starter/.venv\ncd dbos-starter\nsource .venv/bin/activate\n"})})}),(0,s.jsx)(t,{value:"win-ps",label:"Windows (PowerShell)",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python3 -m venv dbos-starter/.venv\ncd dbos-starter\n.venv\\Scripts\\activate.ps1\n"})})}),(0,s.jsx)(t,{value:"win-cmd",label:"Windows (cmd)",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"python3 -m venv dbos-starter/.venv\ncd dbos-starter\n.venv\\Scripts\\activate.bat\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Then, install DBOS:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pip install dbos\n"})}),"\n",(0,s.jsx)(n.h2,{id:"2-workflows-and-steps",children:"2. Workflows and Steps"}),"\n",(0,s.jsxs)(n.p,{children:["DBOS helps you add reliability to your Python programs.\nThe key feature of DBOS is ",(0,s.jsx)(n.strong,{children:"workflow functions"})," comprised of ",(0,s.jsx)(n.strong,{children:"steps"}),".\nDBOS checkpoints the state of your workflows and steps to its system database.\nIf your program crashes or is interrupted, DBOS uses this checkpointed state to recover each of your workflows from its last completed step.\nThus, DBOS makes your application ",(0,s.jsx)(n.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["DBOS uses a database to durably store workflow and step state.\nBy default, it uses SQLite, which requires no configuration.\nFor production use, we recommend connecting your DBOS application to a Postgres database.\nYou can optionally run these examples with Postgres by setting the ",(0,s.jsx)(n.code,{children:"DBOS_SYSTEM_DATABASE_URL"})," environment variable to a connection string to your Postgres database."]})}),"\n",(0,s.jsxs)(n.p,{children:["Let's create a simple DBOS program that runs a workflow of two steps.\nCreate ",(0,s.jsx)(n.code,{children:"main.py"})," and add this code to it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'import os\nfrom dbos import DBOS, DBOSConfig\n\nconfig: DBOSConfig = {\n    "name": "dbos-starter",\n    "system_database_url": os.environ.get("DBOS_SYSTEM_DATABASE_URL"),\n}\nDBOS(config=config)\n\n@DBOS.step()\ndef step_one():\n    print("Step one completed!")\n\n@DBOS.step()\ndef step_two():\n    print("Step two completed!")\n\n@DBOS.workflow()\ndef dbos_workflow():\n    step_one()\n    step_two()\n\nif __name__ == "__main__":\n    DBOS.launch()\n    dbos_workflow()\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now, run this code with ",(0,s.jsx)(n.code,{children:"python3 main.py"}),".\nYour program should print output like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"15:41:06 [    INFO] (dbos:_dbos.py:534) DBOS launched!\nStep one completed!\nStep two completed!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To see durable execution in action, let's modify the app to serve a DBOS workflow from an HTTP endpoint using FastAPI.\nCopy this code into ",(0,s.jsx)(n.code,{children:"main.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'import os\n\nimport uvicorn\nfrom dbos import DBOS, DBOSConfig\nfrom fastapi import FastAPI\n\napp = FastAPI()\nconfig: DBOSConfig = {\n    "name": "dbos-starter",\n    "system_database_url": os.environ.get("DBOS_SYSTEM_DATABASE_URL"),\n}\nDBOS(config=config, fastapi=app)\n\n@DBOS.step()\ndef step_one():\n    print("Step one completed!")\n\n@DBOS.step()\ndef step_two():\n    print("Step two completed!")\n\n@app.get("/")\n@DBOS.workflow()\ndef dbos_workflow():\n    step_one()\n    for _ in range(5):\n        print("Press Control + C to stop the app...")\n        DBOS.sleep(1)\n    step_two()\n\nif __name__ == "__main__":\n    DBOS.launch()\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now, install FastAPI with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"pip install fastapi[standard]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, start your app with ",(0,s.jsx)(n.code,{children:"python3 main.py"}),".\nThen, visit this URL: ",(0,s.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In your terminal, you should see an output like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\nStep one completed!\nPress Control + C to stop the app...\nPress Control + C to stop the app...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, press CTRL+C stop your app (press CTRL+C multiple times to force quit it). Then, run ",(0,s.jsx)(n.code,{children:"python3 main.py"})," to restart it. You should see an output like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nPress Control + C to stop the app...\nStep two completed!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can see how DBOS ",(0,s.jsx)(n.strong,{children:"recovers your workflow from the last completed step"}),", executing step two without re-executing step one.\nLearn more about workflows, steps, and their guarantees ",(0,s.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"3-queues-and-parallelism",children:"3. Queues and Parallelism"}),"\n",(0,s.jsxs)(n.p,{children:["If you need to run many functions concurrently, use DBOS ",(0,s.jsx)(n.em,{children:"queues"}),".\nTo try them out, copy this code into ",(0,s.jsx)(n.code,{children:"main.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'showLineNumbers title="main.py"',children:'import os\nimport time\n\nimport uvicorn\nfrom dbos import DBOS, DBOSConfig, Queue\nfrom fastapi import FastAPI\n\napp = FastAPI()\nconfig: DBOSConfig = {\n    "name": "dbos-starter",\n    "system_database_url": os.environ.get("DBOS_SYSTEM_DATABASE_URL"),\n}\nDBOS(config=config, fastapi=app)\n\nqueue = Queue("example-queue")\n\n@DBOS.step()\ndef dbos_step(n: int):\n    time.sleep(5)\n    print(f"Step {n} completed!")\n\n@app.get("/")\n@DBOS.workflow()\ndef dbos_workflow():\n    print("Enqueueing steps")\n    handles = []\n    for i in range(10):\n        handle = queue.enqueue(dbos_step, i)\n        handles.append(handle)\n    results = [handle.get_result() for handle in handles]\n    print(f"Successfully completed {len(results)} steps")\n\nif __name__ == "__main__":\n    DBOS.launch()\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When you enqueue a function with ",(0,s.jsx)(n.code,{children:"queue.enqueue"}),", DBOS executes it ",(0,s.jsx)(n.em,{children:"asynchronously"}),", running it in the background without waiting for it to finish.\n",(0,s.jsx)(n.code,{children:"enqueue"})," returns a handle representing the state of the enqueued function.\nThis example enqueues ten functions, then waits for them all to finish using ",(0,s.jsx)(n.code,{children:"handle.get_result()"})," to wait for each of their handles."]}),"\n",(0,s.jsxs)(n.p,{children:["Start your app with ",(0,s.jsx)(n.code,{children:"python3 main.py"}),".\nThen, visit this URL: ",(0,s.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"}),".\nWait five seconds and you should see an output like:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\nEnqueueing steps\nStep 0 completed!\nStep 1 completed!\nStep 2 completed!\nStep 3 completed!\nStep 4 completed!\nStep 5 completed!\nStep 6 completed!\nStep 7 completed!\nStep 8 completed!\nStep 9 completed!\nSuccessfully completed 10 steps\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can see how all ten steps run concurrently\u2014even though each takes five seconds, they all finish at the same time.\nLearn more about DBOS queues ",(0,s.jsx)(n.a,{href:"/python/tutorials/queue-tutorial",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Congratulations!  You've finished the DBOS Python guide.\nYou can find the code from this guide in the ",(0,s.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/dbos-toolbox",children:"DBOS Toolbox"})," template app."]}),"\n",(0,s.jsxs)(n.p,{children:["Next learn how to ",(0,s.jsx)(n.a,{href:"/python/integrating-dbos",children:"add DBOS to your own application"})," and check out the Python tutorials and ",(0,s.jsx)(n.a,{href:"/examples/",children:"example apps"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);