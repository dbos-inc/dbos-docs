"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9935],{3353:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=s(4848),i=s(8453);const o={sidebar_position:1,title:"DBOS Class"},a=void 0,r={id:"python/reference/dbos-class",title:"DBOS Class",description:"The DBOS class is a singleton&mdash;you must instantiate it (by calling its constructor) exactly once in a program's lifetime.",source:"@site/docs/python/reference/dbos-class.md",sourceDirName:"python/reference",slug:"/python/reference/dbos-class",permalink:"/python/reference/dbos-class",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"DBOS Class"},sidebar:"tutorialSidebar",previous:{title:"Integrating with Kafka",permalink:"/python/tutorials/kafka-integration"},next:{title:"Decorators",permalink:"/python/reference/decorators"}},l={},c=[{value:"class dbos.DBOS",id:"class-dbosdbos",level:3},{value:"launch",id:"launch",level:3},{value:"destroy",id:"destroy",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The DBOS class is a singleton\u2014you must instantiate it (by calling its constructor) exactly once in a program's lifetime.\nHere, we document its constructor and lifecycle methods.\nDecorators are documented ",(0,t.jsx)(n.a,{href:"/python/reference/decorators",children:"here"})," and context methods and variables ",(0,t.jsx)(n.a,{href:"/python/reference/contexts",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"class-dbosdbos",children:"class dbos.DBOS"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS(\n    *,\n    fastapi: Optional[FastAPI] = None,\n    flask: Optional[Flask] = None,\n    config: Optional[ConfigFile] = None,\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fastapi"}),": If your application is using FastAPI, the ",(0,t.jsx)(n.code,{children:"FastAPI"})," object. If this is passed in, DBOS automatically calls ",(0,t.jsx)(n.a,{href:"#launch",children:(0,t.jsx)(n.code,{children:"dbos.launch"})})," when FastAPI is fully initialized. DBOS also adds to all routes a middleware that enables ",(0,t.jsx)(n.a,{href:"/python/tutorials/logging-and-tracing#tracing",children:"tracing"})," through FastAPI HTTP endpoints."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"flask"}),": If your application is using Flask, the ",(0,t.jsx)(n.code,{children:"flask"})," object. If this is passed in, DBOS adds to all routes a middleware that enables ",(0,t.jsx)(n.a,{href:"/python/tutorials/logging-and-tracing#tracing",children:"tracing"})," through Flask HTTP endpoints."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"}),": A configuration object. By default, DBOS reads configuration from ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"}),", but if this object is passed in its contents are used instead. We recommend using this for testing only."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"launch",children:"launch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"DBOS.launch()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Launch DBOS, initializing database connections and starting scheduled workflows.\nShould be called after all decorators run.\nIf a FastAPI app is passed into the ",(0,t.jsx)(n.code,{children:"DBOS"})," constructor, ",(0,t.jsx)(n.code,{children:"launch"})," is called automatically during FastAPI setup."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from dbos import DBOS\n\n# Initialize the DBOS object\nDBOS()\n\n# Define a scheduled workflow\n@DBOS.scheduled("* * * * *")\n@DBOS.workflow()\ndef run_every_minute(scheduled_time: datetime, actual_time: datetime):\n    DBOS.logger.info("This is a scheduled workflow!")\n\n# After all decorators run, launch DBOS\nDBOS.launch()\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example using Flask:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from flask import Flask\nfrom dbos import DBOS\n\napp = Flask(__name__)\nDBOS(flask=app)\n\n@app.route("/")\n@DBOS.workflow()\ndef test_workflow():\n    return "<p>Workflow successful!</p>"\n\n# After all decorators run, launch DBOS\nDBOS.launch()\n\nif __name__ == "__main__":\n    app.run()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Assuming your file is ",(0,t.jsx)(n.code,{children:"main.py"}),", run with ",(0,t.jsx)(n.code,{children:"python3 -m main"})," (dev) or ",(0,t.jsx)(n.code,{children:"gunicorn -w 1 'main:app' -b 0.0.0.0:8000"})," (prod)"]}),"\n",(0,t.jsx)(n.h3,{id:"destroy",children:"destroy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"DBOS.destroy()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Destroy the DBOS singleton, terminating all active workflows and closing database connections.\nAfter this completes, the singleton can be re-initialized.\nUseful for testing."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);