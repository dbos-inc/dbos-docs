"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3942],{3724:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"java/tutorials/queue-tutorial","title":"Queues & Concurrency","description":"You can use queues to run many workflows at once with managed concurrency.","source":"@site/docs/java/tutorials/queue-tutorial.md","sourceDirName":"java/tutorials","slug":"/java/tutorials/queue-tutorial","permalink":"/java/tutorials/queue-tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30,"title":"Queues & Concurrency","toc_max_heading_level":3},"sidebar":"tutorialSidebar","previous":{"title":"Steps","permalink":"/java/tutorials/step-tutorial"},"next":{"title":"Communicating with Workflows","permalink":"/java/tutorials/workflow-communication"}}');var o=r(4848),i=r(8453);const s={sidebar_position:30,title:"Queues & Concurrency",toc_max_heading_level:3},a=void 0,l={},u=[{value:"Queue Example",id:"queue-example",level:2},{value:"Enqueueing from Another Application",id:"enqueueing-from-another-application",level:2},{value:"Managing Concurrency",id:"managing-concurrency",level:2},{value:"Worker Concurrency",id:"worker-concurrency",level:3},{value:"Global Concurrency",id:"global-concurrency",level:3},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Deduplication",id:"deduplication",level:2},{value:"Priority",id:"priority",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["You can use queues to run many workflows at once with managed concurrency.\nQueues provide ",(0,o.jsx)(n.em,{children:"flow control"}),", letting you manage how many workflows run at once or how often workflows are started."]}),"\n",(0,o.jsxs)(n.p,{children:["To create a queue, instantiate and register a ",(0,o.jsx)(n.a,{href:"/java/reference/queues#queue",children:(0,o.jsx)(n.code,{children:"Queue"})})," object.\nAll queues should be created and registered before DBOS is launched."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Queue queue = new Queue("example-queue");\nDBOS.registerQueue(queue);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can then enqueue any workflow using ",(0,o.jsx)(n.a,{href:"/java/reference/workflows-steps#startworkflow",children:(0,o.jsx)(n.code,{children:"withQueue"})})," when calling ",(0,o.jsx)(n.code,{children:"startWorkflow"}),".\nEnqueuing a workflow submits it for execution and returns a ",(0,o.jsx)(n.a,{href:"/java/reference/workflows-steps#workflowhandle",children:"handle"})," to it.\nQueued tasks are started in first-in, first-out (FIFO) order."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'class ExampleImpl implements Example {\n    @Workflow(name = "processTask")\n    public String processTask(String task) {\n        // Process the task...\n        return "Processed: " + task;\n    }\n}\n\npublic String example(Queue queue, Example proxy, String task) throws Exception {\n    // Enqueue a workflow\n    WorkflowHandle<String, Exception> handle = DBOS.startWorkflow(\n        () -> proxy.processTask(task),\n        new StartWorkflowOptions().withQueue(queue)\n    );\n\n    // Get the result\n    String result = handle.getResult();\n    System.out.println("Task result: " + result);\n    return result;\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"queue-example",children:"Queue Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's an example of a workflow using a queue to process tasks concurrently:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'interface Example {\n    public void setProxy(Example proxy);\n    public String taskWorkflow(String task);\n    public List<String> queueWorkflow(String[] tasks) throws Exception;\n}\n\nclass ExampleImpl implements Example {\n\n    private final Queue queue;\n    private Example proxy;\n\n    public ExampleImpl(Queue queue) {\n        this.queue = queue;\n    }\n\n    public void setProxy(Example proxy) {\n        this.proxy = proxy;\n    }\n\n    @Workflow(name = "taskWorkflow")\n    public String taskWorkflow(String task) {\n        // Process the task...\n        return "Processed: " + task;\n    }\n\n    @Workflow(name = "queueWorkflow")\n    public List<String> queueWorkflow(String[] tasks) throws Exception {\n        // Enqueue each task so all tasks are processed concurrently\n        List<WorkflowHandle<String, Exception>> handles = new ArrayList<>();\n        for (String task : tasks) {\n            WorkflowHandle<String, Exception> handle = DBOS.startWorkflow(\n                () -> proxy.taskWorkflow(task),\n                new StartWorkflowOptions().withQueue(queue)\n            );\n            handles.add(handle);\n        }\n\n        // Wait for each task to complete and retrieve its result\n        List<String> results = new ArrayList<>();\n        for (WorkflowHandle<String, Exception> handle : handles) {\n            String result = handle.getResult();\n            results.add(result);\n        }\n\n        return results;\n    }\n}\n\npublic class App {\n    public static void main(String[] args) throws Exception {\n        DBOSConfig config = ...\n        DBOS.configure(config);\n\n        // Create and register a queue\n        Queue queue = new Queue("example-queue");\n        DBOS.registerQueue(queue);\n        // Instantiate an Example and register its workflows\n        ExampleImpl impl = new ExampleImpl(queue);\n        Example proxy = DBOS.registerWorkflows(Example.class, impl);\n        // Provide the workflow proxy to the class so its methods can invoke workflows\n        impl.setProxy(proxy);\n\n        DBOS.launch();\n\n        // Run the queue workflow\n        String[] tasks = {"task1", "task2", "task3", "task4", "task5"};\n        List<String> results = proxy.queueWorkflow(tasks);\n        for (String result : results) {\n            System.out.println(result);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"enqueueing-from-another-application",children:"Enqueueing from Another Application"}),"\n",(0,o.jsx)(n.p,{children:"Often, you want to enqueue a workflow from outside your DBOS application.\nFor example, let's say you have an API server and a data processing service.\nYou're using DBOS to build a durable data pipeline in the data processing service.\nWhen the API server receives a request, it should enqueue the data pipeline for execution on the data processing service."}),"\n",(0,o.jsxs)(n.p,{children:["You can use the ",(0,o.jsx)(n.a,{href:"/java/reference/client",children:"DBOS Client"})," to enqueue workflows from outside your DBOS application by connecting directly to your DBOS application's system database.\nSince the DBOS Client is designed to be used from outside your DBOS application, workflow and queue metadata must be specified explicitly."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, this code enqueues the ",(0,o.jsx)(n.code,{children:"dataPipeline"})," workflow on the ",(0,o.jsx)(n.code,{children:"pipelineQueue"})," queue with arguments:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'var client = new DBOSClient(dbUrl, dbUser, dbPassword);\n\nvar options = new DBOSClient.EnqueueOptions(\n    "com.example.DataPipelineImpl",  // Class name\n    "dataPipeline",                  // Workflow name\n    "pipelineQueue"                  // Queue name\n);\n\nvar handle = client.enqueueWorkflow(\n    options,\n    new Object[]{"task-123", "data"}  // Workflow arguments\n);\n\n// Optionally wait for the result\nObject result = handle.getResult();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"managing-concurrency",children:"Managing Concurrency"}),"\n",(0,o.jsx)(n.p,{children:"You can control how many workflows from a queue run simultaneously by configuring concurrency limits.\nThis helps prevent resource exhaustion when workflows consume significant memory or processing power."}),"\n",(0,o.jsx)(n.h3,{id:"worker-concurrency",children:"Worker Concurrency"}),"\n",(0,o.jsx)(n.p,{children:"Worker concurrency sets the maximum number of workflows from a queue that can run concurrently on a single DBOS process.\nThis is particularly useful for resource-intensive workflows to avoid exhausting the resources of any process.\nFor example, this queue has a worker concurrency of 5, so each process will run at most 5 workflows from this queue simultaneously:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Queue queue = new Queue("example-queue")\n    .withWorkerConcurrency(5);\nDBOS.registerQueue(queue);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"global-concurrency",children:"Global Concurrency"}),"\n",(0,o.jsx)(n.p,{children:"Global concurrency limits the total number of workflows from a queue that can run concurrently across all DBOS processes in your application.\nFor example, this queue will have a maximum of 10 workflows running simultaneously across your entire application."}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["Worker concurrency limits are recommended for most use cases.\nTake care when using a global concurrency limit as any ",(0,o.jsx)(n.code,{children:"PENDING"})," workflow on the queue counts toward the limit, including workflows from previous application versions."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Queue queue = new Queue("example-queue")\n    .withConcurrency(10);\nDBOS.registerQueue(queue);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,o.jsxs)(n.p,{children:["You can set ",(0,o.jsx)(n.em,{children:"rate limits"})," for a queue, limiting the number of workflows that it can start in a given period.\nRate limits are global across all DBOS processes using this queue.\nFor example, this queue has a limit of 100 workflows with a period of 60 seconds, so it may not start more than 100 workflows in 60 seconds:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Queue queue = new Queue("example-queue")\n    .withRateLimit(100, 60.0);  // 100 workflows per 60 seconds\nDBOS.registerQueue(queue);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Rate limits are especially useful when working with a rate-limited API."}),"\n",(0,o.jsx)(n.h2,{id:"deduplication",children:"Deduplication"}),"\n",(0,o.jsxs)(n.p,{children:["You can set a deduplication ID for an enqueued workflow using ",(0,o.jsx)(n.a,{href:"/java/reference/workflows-steps#startworkflow",children:(0,o.jsx)(n.code,{children:"withQueue"})})," when calling ",(0,o.jsx)(n.code,{children:"startWorkflow"}),".\nAt any given time, only one workflow with a specific deduplication ID can be enqueued in the specified queue.\nIf a workflow with a deduplication ID is currently enqueued or actively executing (status ",(0,o.jsx)(n.code,{children:"ENQUEUED"})," or ",(0,o.jsx)(n.code,{children:"PENDING"}),"), subsequent workflow enqueue attempts with the same deduplication ID in the same queue will raise an exception."]}),"\n",(0,o.jsx)(n.p,{children:"For example, this is useful if you only want to have one workflow active at a time per user\u2014set the deduplication ID to the user's ID."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Workflow(name = "taskWorkflow")\npublic String taskWorkflow(String task) {\n    // Process the task...\n    return "completed";\n}\n\npublic void example(Example proxy, String task, String userID) throws Exception {\n    // Use user ID for deduplication\n    WorkflowHandle<String, Exception> handle = DBOS.startWorkflow(\n        () -> proxy.taskWorkflow(task),\n        new StartWorkflowOptions().withQueue(queue).withDeduplicationId(userID)\n    );\n\n    String result = handle.getResult();\n    System.out.println("Workflow completed: " + result);\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"priority",children:"Priority"}),"\n",(0,o.jsxs)(n.p,{children:["You can set a priority for an enqueued workflow using ",(0,o.jsx)(n.a,{href:"/java/reference/workflows-steps#startworkflow",children:(0,o.jsx)(n.code,{children:"withQueue"})})," when calling ",(0,o.jsx)(n.code,{children:"startWorkflow"}),".\nWorkflows with the same priority are dequeued in ",(0,o.jsx)(n.strong,{children:"FIFO (first in, first out)"})," order. Priority values can range from ",(0,o.jsx)(n.code,{children:"1"})," to ",(0,o.jsx)(n.code,{children:"2,147,483,647"}),", where ",(0,o.jsx)(n.strong,{children:"a low number indicates a higher priority"}),".\nIf using priority, you must set ",(0,o.jsx)(n.a,{href:"/java/reference/queues#queue",children:(0,o.jsx)(n.code,{children:"priorityEnabled"})})," on your queue."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"Workflows without assigned priorities have the highest priority and are dequeued before workflows with assigned priorities."})}),"\n",(0,o.jsx)(n.p,{children:"To use priorities in a queue, you must enable it when creating the queue:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'Queue queue = new Queue("example-queue")\n    .withPriorityEnabled(true);\nDBOS.registerQueue(queue);\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example syntax:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Workflow(name = "taskWorkflow")\npublic String taskWorkflow(String task) {\n    // Process the task...\n    return "completed";\n}\n\npublic void example(Example proxy, String task, int priority) throws Exception {\n    WorkflowHandle<String, Exception> handle = DBOS.startWorkflow(\n        () -> proxy.taskWorkflow(task),\n        new StartWorkflowOptions().withQueue(queue).withPriority(priority)\n    );\n\n    String result = handle.getResult();\n    System.out.println("Workflow completed: " + result);\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);