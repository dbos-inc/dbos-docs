"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[1153],{1652:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"typescript/reference/cli","title":"DBOS CLI","description":"Workflow Management Commands","source":"@site/docs/typescript/reference/cli.md","sourceDirName":"typescript/reference","slug":"/typescript/reference/cli","permalink":"/typescript/reference/cli","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":100,"frontMatter":{"sidebar_position":100,"title":"DBOS CLI"},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/typescript/reference/configuration"},"next":{"title":"DBOS Plugin Architecture","permalink":"/typescript/reference/plugins"}}');var i=n(4848),o=n(8453);const t={sidebar_position:100,title:"DBOS CLI"},l=void 0,c={},d=[{value:"Workflow Management Commands",id:"workflow-management-commands",level:2},{value:"npx dbos workflow list",id:"npx-dbos-workflow-list",level:3},{value:"npx dbos workflow get",id:"npx-dbos-workflow-get",level:3},{value:"npx dbos workflow steps",id:"npx-dbos-workflow-steps",level:3},{value:"npx dbos workflow cancel",id:"npx-dbos-workflow-cancel",level:3},{value:"npx dbos workflow resume",id:"npx-dbos-workflow-resume",level:3},{value:"npx dbos workflow fork",id:"npx-dbos-workflow-fork",level:3},{value:"npx dbos workflow queue list",id:"npx-dbos-workflow-queue-list",level:3},{value:"Application Management Commands",id:"application-management-commands",level:2},{value:"npx dbos schema",id:"npx-dbos-schema",level:3},{value:"npx dbos reset",id:"npx-dbos-reset",level:3},{value:"npx @dbos-inc/create",id:"npx-dbos-inccreate",level:3},{value:"npx dbos start",id:"npx-dbos-start",level:3}];function a(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"workflow-management-commands",children:"Workflow Management Commands"}),"\n",(0,i.jsxs)(s.p,{children:["These commands all require the URL of your DBOS system database.\nYou can supply this URL through the ",(0,i.jsx)(s.code,{children:"--sys-db-url"})," argument or through a ",(0,i.jsxs)(s.a,{href:"/typescript/reference/configuration#dbos-configuration-file",children:[(0,i.jsx)(s.code,{children:"dbos-config.yaml"})," configuration file"]}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-workflow-list",children:"npx dbos workflow list"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nList workflows run by your application in JSON format ordered by recency (most recently started workflows last)."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-s, --sys-db-url <string>"}),": Your DBOS system database URL"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-n, --name <string>"}),"                 Retrieve functions with this name"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-l, --limit <number>"}),'                Limit the results returned (default: "10")']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-u, --user <string>"}),"                 Retrieve workflows run by this user"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-s, --start-time <string>"}),"           Retrieve workflows starting after this timestamp (ISO 8601 format)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-e, --end-time <string>"}),"             Retrieve workflows starting before this timestamp (ISO 8601 format)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-S, --status <string>"}),"               Retrieve workflows with this status (",(0,i.jsx)(s.code,{children:"PENDING"}),", ",(0,i.jsx)(s.code,{children:"SUCCESS"}),", ",(0,i.jsx)(s.code,{children:"ERROR"}),", ",(0,i.jsx)(s.code,{children:"MAX_RECOVERY_ATTEMPTS_EXCEEDED"}),", ",(0,i.jsx)(s.code,{children:"ENQUEUED"}),", or ",(0,i.jsx)(s.code,{children:"CANCELLED"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-v, --application-version <string>"}),"  Retrieve workflows with this application version"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Output:"}),"\nFor each retrieved workflow, emit a JSON whose fields are:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowUUID"}),": The ID of the workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"status"}),": The status of the workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowName"}),": The name of the workflow function"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowClassName"}),": The name of the class in which the workflow function is implemented"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowConfigName"}),": If the workflow is in a ",(0,i.jsx)(s.a,{href:"/typescript/tutorials/instantiated-objects",children:"configured class"}),", the name of the configuration"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"authenticatedUser"}),": The user who ran the workflow, if specified"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"assumedRole"}),": The role with which the workflow ran, if specified"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"authenticatedRoles"}),": All roles which the authenticated user could assume"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"queueName"}),": The queue of the workflow, if enqueued."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"input"}),": The input arguments to the workflow, in array format"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"output"}),": If the workflow completed successfuly, its output"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"error"}),": If the workflow threw an error, the serialized error object"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-workflow-get",children:"npx dbos workflow get"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nRetrieve information on a workflow run by your application."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<workflow-id>"}),": The ID of the workflow to retrieve."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Output:"}),"\nA JSON whose fields are:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowUUID"}),": The ID of the workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"status"}),": The status of the workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowName"}),": The name of the workflow function"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowClassName"}),": The name of the class in which the workflow function is implemented"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowConfigName"}),": If the workflow is in a ",(0,i.jsx)(s.a,{href:"../tutorials/instantiated-objects",children:"configured class"}),", the name of the configuration"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"authenticatedUser"}),": The user who ran the workflow, if specified"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"assumedRole"}),": The role with which the workflow ran, if specified"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"authenticatedRoles"}),": All roles which the authenticated user could assume"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"queueName"}),": The queue of the workflow, if enqueued."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"input"}),": The input arguments to the workflow, in array format"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"output"}),": If the workflow completed successfuly, its output"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"error"}),": If the workflow threw an error, the serialized error object"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-workflow-steps",children:"npx dbos workflow steps"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-s, --sys-db-url <string>"}),": Your DBOS system database URL"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<workflow-id>"}),": The ID of the workflow to retrieve"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Output:"}),"\nA JSON-formatted list of ",(0,i.jsx)(s.a,{href:"/typescript/reference/methods#dboslistworkflowsteps",children:"workflow steps"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-workflow-cancel",children:"npx dbos workflow cancel"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nCancel a workflow so it is no longer automatically retried or restarted. Active executions are not halted."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-s, --sys-db-url <string>"}),": Your DBOS system database URL"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<workflow-id>"}),": The ID of the workflow to cancel."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-workflow-resume",children:"npx dbos workflow resume"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nResume a workflow from its last completed step.\nYou can use this to resume workflows that are cancelled or that have exceeded their maximum recovery attempts.\nYou can also use this to start an ",(0,i.jsx)(s.code,{children:"ENQUEUED"})," workflow, bypassing its queue."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-s, --sys-db-url <string>"}),": Your DBOS system database URL"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<workflow-id>"}),": The ID of the workflow to resume."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-workflow-fork",children:"npx dbos workflow fork"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nFork a new execution of a workflow, starting at a given step.\nThis new workflow has a new workflow ID but the same code version (you can fork to a different code version ",(0,i.jsx)(s.a,{href:"/typescript/reference/client#forkworkflow",children:"programmatically"}),").\nForking from step N copies the results of all previous steps to the new workflow, which then starts running from step N."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"<workflow-id>"}),": The ID of the workflow to restart."]}),"\n"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-s, --sys-db-url URL"}),": Your DBOS system database URL."]}),"\n"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-f, --forked-workflow-id"}),": Custom ID for the forked workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-v, --application-version"}),": Custom application version for the forked workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-S, --step INTEGER"}),": Restart from this step [default: 1]"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-workflow-queue-list",children:"npx dbos workflow queue list"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nLists all currently enqueued workflows in JSON format ordered by recency (most recently enqueued workflows last)."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-s, --sys-db-url <string>"}),": Your DBOS system database URL"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-n, --name <string>"}),"        Retrieve functions with this name"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-t, --start-time <string>"}),"  Retrieve functions starting after this timestamp (ISO 8601 format)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-e, --end-time <string>"}),"    Retrieve functions starting before this timestamp (ISO 8601 format)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-S, --status <string>"}),"      Retrieve functions with this status (PENDING, SUCCESS, ERROR, MAX_RECOVERY_ATTEMPTS_EXCEEDED, ENQUEUED, or CANCELLED)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-l, --limit <number>"}),"       Limit the results returned"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-q, --queue <string>"}),"       Retrieve functions run on this queue"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Output:"}),"\nFor each retrieved workflow, emit a JSON whose fields are:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowUUID"}),": The ID of the workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"status"}),": The status of the workflow"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowName"}),": The name of the workflow function"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowClassName"}),": The name of the class in which the workflow function is implemented"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"workflowConfigName"}),": If the workflow is in a ",(0,i.jsx)(s.a,{href:"../tutorials/instantiated-objects",children:"configured class"}),", the name of the configuration"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"authenticatedUser"}),": The user who ran the workflow, if specified"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"assumedRole"}),": The role with which the workflow ran, if specified"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"authenticatedRoles"}),": All roles which the authenticated user could assume"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"queueName"}),": The queue of the workflow, if enqueued."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"input"}),": The input arguments to the workflow, in array format"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"output"}),": If the workflow completed successfuly, its output"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"error"}),": If the workflow threw an error, the serialized error object"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"application-management-commands",children:"Application Management Commands"}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-schema",children:"npx dbos schema"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nCreate the DBOS system database and internal tables.\nBy default, a DBOS application automatically creates these on startup.\nHowever, in production environments, a DBOS application may not run with sufficient privilege to create databases or tables.\nIn that case, this command can be run with a privileged user to create all DBOS database tables."]}),"\n",(0,i.jsxs)(s.p,{children:["After creating the DBOS database tables with this command, a DBOS application can run with minimum permissions, requiring only access to the DBOS schema in the application and system databases.\nUse the ",(0,i.jsx)(s.code,{children:"-r"})," flag to grant a role access to that schema."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"systemDatabaseUrl"}),":  A connection string for your DBOS ",(0,i.jsx)(s.a,{href:"/explanations/system-tables",children:"system database"}),", in which DBOS stores its internal state. This command will create that database if it does not exist and create or update the DBOS system tables within it."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-r, --app-role"}),": The role with which you will run your DBOS app. This role is granted the minimum permissions needed to access the DBOS schema in your system database."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-reset",children:"npx dbos reset"}),"\n",(0,i.jsxs)(s.p,{children:["Reset your DBOS ",(0,i.jsx)(s.a,{href:"/explanations/system-tables",children:"system database"}),", deleting metadata about past workflows and steps.\n",(0,i.jsx)(s.strong,{children:"Use only in a development environment."})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"--sys-db-url, -s <string>"}),": Your DBOS system database URL"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"--yes, -y"}),": Skip confirmation prompt."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-inccreate",children:"npx @dbos-inc/create"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nThis command initializes a new DBOS application from a template into a target directory."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Arguments:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-n, --appName <app-name>"}),": The name and directory to which to instantiate the application. Application names should be between 3 and 30 characters and must contain only lowercase letters and numbers, dashes (",(0,i.jsx)(s.code,{children:"-"}),"), and underscores (",(0,i.jsx)(s.code,{children:"_"}),")."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-t, --templateName <template>"}),": The template to use for project creation. If not provided, will prompt with a list of available templates."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"npx-dbos-start",children:"npx dbos start"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Description:"}),"\nStart your DBOS application by executing the ",(0,i.jsx)(s.code,{children:"start"})," command defined in ",(0,i.jsx)(s.a,{href:"/typescript/reference/configuration",children:(0,i.jsx)(s.code,{children:"dbos-config.yaml"})}),".\nFor example:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:'runtimeConfig:\n  start:\n    - "node dist/main.js"\n'})}),"\n",(0,i.jsx)(s.p,{children:"DBOS Cloud executes this command to start your app."})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var r=n(6540);const i={},o=r.createContext(i);function t(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);