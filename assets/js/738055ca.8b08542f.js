"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[8063],{176:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(4848),a=t(8453);const i={sidebar_position:2,title:"Transactions",description:"Learn how to perform database operations"},s=void 0,o={id:"typescript/tutorials/transaction-tutorial",title:"Transactions",description:"Learn how to perform database operations",source:"@site/docs/typescript/tutorials/transaction-tutorial.md",sourceDirName:"typescript/tutorials",slug:"/typescript/tutorials/transaction-tutorial",permalink:"/typescript/tutorials/transaction-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Transactions",description:"Learn how to perform database operations"},sidebar:"tutorialSidebar",previous:{title:"HTTP Serving",permalink:"/typescript/tutorials/http-serving-tutorial"},next:{title:"Communicators",permalink:"/typescript/tutorials/communicator-tutorial"}},c={},l=[{value:"Schema Management",id:"schema-management",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{TabItem:t,Tabs:i}=n;return t||m("TabItem",!0),i||m("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.em,{children:"transaction functions"})," to read and write from your database. A transaction function may contain multiple queries as well as TypeScript business logic and executes as a single ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_transaction",children:"database transaction"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Transaction functions must be annotated with the ",(0,r.jsx)(n.a,{href:"../reference/decorators#transaction",children:(0,r.jsx)(n.code,{children:"@Transaction"})})," decorator and must have a ",(0,r.jsx)(n.a,{href:"../reference/contexts#transactioncontextt",children:(0,r.jsx)(n.code,{children:"TransactionContext"})})," as their first argument.\nAs with other DBOS functions, inputs and outputs must be serializable to JSON."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"../reference/contexts#transactioncontextt",children:(0,r.jsx)(n.code,{children:"TransactionContext"})})," provides a ",(0,r.jsx)(n.code,{children:".client"})," field you can use to interact with the database, so you don't need to worry about managing connections.\nDBOS supports ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-knex",children:"Knex.js"}),", ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-drizzle",children:"Drizzle"}),", ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-typeorm",children:"TypeORM"}),", and ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-prisma",children:"Prisma"})," clients as well as raw SQL.\nYou can configure which client to use in your ",(0,r.jsx)(n.a,{href:"/typescript/reference/configuration",children:(0,r.jsx)(n.code,{children:"dbos-config.yaml"})})," file.\nKnex is the default and we recommend using ",(0,r.jsx)(n.code,{children:"Knex.raw()"})," for raw SQL."]}),"\n",(0,r.jsx)(n.p,{children:"Here are examples of a write and a read transaction function using each client."}),"\n",(0,r.jsxs)(i,{groupId:"database-clients",children:[(0,r.jsxs)(t,{value:"knex",label:"Knex",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"interface GreetingRecord {\n  name: string;\n  note: string;\n}\n\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<Knex>, gr: GreetingRecord) {\n    await ctxt.client('greetings').insert(gr);\n  }\n\n  @Transaction({readOnly: true})\n  static async getGreetings(ctxt: TransactionContext<Knex>): Promise<GreetingRecord[]>  {\n    return await ctxt.client<GreetingRecord>('greetings').select('*');\n  }\n}\n"})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-knex",children:"Knex guide"})," for more information."]})]}),(0,r.jsxs)(t,{value:"drizzle",label:"Drizzle",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export const GreetingRecord = pgTable('greetings', {\n  name: text('name'),\n  note: text('note'),\n});\n\nexport class Greetings {\n  //..\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<NodePgDatabase>, name: string, note: string) {\n    await ctxt.client.insert(GreetingRecord).values({name: name, note: note});\n  }\n\n  @Transaction({ readOnly:true })\n  static async getGreetings(ctxt: TransactionContext<NodePgDatabase>): Promise<{name: string | null, note: string | null}[]> {\n    return await ctxt.client.select().from(GreetingRecord);\n  }\n}\n"})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-drizzle",children:"Drizzle guide"})," for more information."]})]}),(0,r.jsxs)(t,{value:"typeorm",label:"TypeORM",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Entity('greetings') //set the name of the table to 'greetings'\nexport class GreetingRecord {\n    @PrimaryGeneratedColumn() //note: TypeORM requires at least one primary key\n    id!: number;\n\n    @Column()\n    name!: string;\n\n    @Column()\n    note!: string;\n}\n\n@OrmEntities([GreetingRecord])\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<EntityManager>, name: string, note: string) {\n    const greeting = new GreetingRecord();\n    greeting.name = name;\n    greeting.note = note;\n    await ctxt.client.save(greeting);\n  }\n\n  @Transaction({ readOnly:true })\n  static async getGreetings(ctxt: TransactionContext<EntityManager>): Promise<GreetingRecord[]> {\n    return await ctxt.client.getRepository(GreetingRecord).find();\n  }  \n}\n"})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-typeorm",children:"TypeORM guide"})," for more information."]})]}),(0,r.jsxs)(t,{value:"prisma",label:"Prisma",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'//Model specified in prisma/schema.prisma:\n//\n//model GreetingRecord {\n//  @@map("greetings") \n//  greeting_id Int @id @default(autoincrement()) //Note: Prisma requires at least one primary key\n//  name String\n//  note String\n//}\n\n// Use the generated Prisma client and GreetingRecord class\nimport { PrismaClient, GreetingRecord } from "@prisma/client";\n\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<PrismaClient>, name: string, note: string) {\n    await ctxt.client.greetingRecord.create({\n      data: {\n        name: name,\n        note: note\n      },\n    });\n  }\n\n  @Transaction({ readOnly:true })\n  static async getGreetings(ctxt: TransactionContext<PrismaClient>): Promise<GreetingRecord[]> {\n    return await ctxt.client.greetingRecord.findMany();\n  }\n}\n'})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-prisma",children:"Prisma guide"})," for more information."]})]}),(0,r.jsx)(t,{value:"raw",label:"Raw SQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"interface GreetingRecord {\n  name: string;\n  note: string;\n}\n\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<Knex>, gr: GreetingRecord) {\n    await ctxt.client.raw('INSERT INTO greetings (name, note) VALUES (?, ?)', [gr.name, gr.note]);\n  }\n\n  @Transaction({readOnly: true})\n  static async getGreetings(ctxt: TransactionContext<Knex>): Promise<GreetingRecord[]> {\n    const result = await ctxt.client.raw('SELECT name, note FROM greetings') as { rows: GreetingRecord[] };\n    return result.rows;\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["As shown above, we suggest decorating read transactions as ",(0,r.jsx)(n.code,{children:"@Transaction({readOnly: true})"})," for faster performance."]})}),"\n",(0,r.jsx)(n.h2,{id:"schema-management",children:"Schema Management"}),"\n",(0,r.jsx)(n.p,{children:"We strongly recommend you manage your database schema using migrations.\nKnex, TypeORM, and Prisma all provide rich support for schema management through migrations.\nPlease see their guides for more detail:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-knex#schema-management",children:"Knex schema management guide."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-drizzle#schema-management",children:"Drizzle schema management guide."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-typeorm#schema-management",children:"TypeORM schema management guide."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/typescript/tutorials/using-prisma#schema-management",children:"Prisma schema management guide."})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If you are not using database transactions, you may wish to disable database migrations.\nIn ",(0,r.jsx)(n.a,{href:"/typescript/reference/configuration",children:(0,r.jsx)(n.code,{children:"dbos-config.yaml"})}),", set your ",(0,r.jsx)(n.code,{children:"migrate:"})," section as below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"migrate:\n    - echo 'No migrations'  \n"})})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);