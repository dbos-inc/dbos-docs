"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3473],{9959:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"why-dbos","title":"Why DBOS?","description":"What is DBOS?","source":"@site/docs/why-dbos.md","sourceDirName":".","slug":"/why-dbos","permalink":"/why-dbos","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_table_of_contents":false,"hide_title":false,"title":"Why DBOS?"},"sidebar":"tutorialSidebar","previous":{"title":"Get Started","permalink":"/quickstart"},"next":{"title":"Learn DBOS Python","permalink":"/python/programming-guide"}}');var n=r(4848),t=r(8453);const a={hide_table_of_contents:!1,hide_title:!1,title:"Why DBOS?"},l=void 0,i={},c=[{value:"What is DBOS?",id:"what-is-dbos",level:3},{value:"When Should I Use DBOS?",id:"when-should-i-use-dbos",level:2},{value:"How Does DBOS Work?",id:"how-does-dbos-work",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"DBOS vs. Other Systems",id:"dbos-vs-other-systems",level:2},{value:"DBOS vs. Temporal",id:"dbos-vs-temporal",level:3},{value:"DBOS vs. Airflow",id:"dbos-vs-airflow",level:3},{value:"DBOS vs. Celery/BullMQ",id:"dbos-vs-celerybullmq",level:3}];function d(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components},{TabItem:o,Tabs:a}=s;return o||u("TabItem",!0),a||u("Tabs",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h3,{id:"what-is-dbos",children:"What is DBOS?"}),"\n",(0,n.jsx)(s.p,{children:"DBOS provides lightweight durable workflows built on top of Postgres.\nInstead of managing your own workflow orchestrator or task queue system, you can use DBOS to add durable workflows and queues to your program in just a few lines of code."}),"\n",(0,n.jsxs)(s.p,{children:["To get started, follow the ",(0,n.jsx)(s.a,{href:"/quickstart",children:"quickstart"})," to install the open-source library and connect it to a Postgres database.\nThen, annotate workflows and steps in your program to make it durable!\nThat's all you need to do\u2014DBOS is entirely contained in the open-source library, there's no additional infrastructure for you to configure or manage."]}),"\n",(0,n.jsx)(s.h2,{id:"when-should-i-use-dbos",children:"When Should I Use DBOS?"}),"\n",(0,n.jsxs)(s.p,{children:["You should consider using DBOS if your application needs to ",(0,n.jsx)(s.strong,{children:"reliably handle failures"}),".\nFor example, you might be building a payments service that must reliably process transactions even if servers crash mid-operation, or a long-running data pipeline that needs to resume seamlessly from checkpoints rather than restart from the beginning when interrupted."]}),"\n",(0,n.jsx)(s.p,{children:"Handling failures is costly and complicated, requiring complex state management and recovery logic as well as heavyweight tools like external orchestration services.\nDBOS makes it simpler: annotate your code to checkpoint it in Postgres and automatically recover from any failure.\nDBOS also provides powerful Postgres-backed primitives that makes it easier to write and operate reliable code, including durable queues, notifications, scheduling, event processing, and programmatic workflow management."}),"\n",(0,n.jsx)(s.h2,{id:"how-does-dbos-work",children:"How Does DBOS Work?"}),"\n",(0,n.jsxs)(s.p,{children:["DBOS workflows make your program ",(0,n.jsx)(s.strong,{children:"durable"})," by checkpointing its state in Postgres.\nIf your program ever fails, when it restarts all your workflows will automatically resume from the last completed step."]}),"\n",(0,n.jsx)(s.p,{children:"For example, let's say you're running an e-commerce platform where an order goes through multiple steps:"}),"\n",(0,n.jsx)("img",{src:r(5374).A,alt:"Durable Workflow",width:"750",className:"custom-img"}),"\n",(0,n.jsxs)(s.p,{children:["This program looks simple, but making it ",(0,n.jsx)(s.em,{children:"reliable"})," is deceptively difficult.\nFor example, the program may crash (or its server may be restarted) after validating payment but before shipping an order.\nAlternatively, the shipping service may experience an outage, leaving the shipping step impossible to complete.\nIn either case, the customer has been charged, but their order is never shipped."]}),"\n",(0,n.jsxs)(s.p,{children:["DBOS makes these failures easier to recover from.\nAll you have to do is annotate your program with decorators like ",(0,n.jsx)(s.code,{children:"@DBOS.workflow()"})," and ",(0,n.jsx)(s.code,{children:"@DBOS.step()"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"@DBOS.step()\ndef validate_payment():\n    ...\n\n@DBOS.workflow()\ndef checkout_workflow()\n    validate_payment()\n    check_inventory()\n    ship_order()\n    notify_customer()\n"})}),"\n",(0,n.jsxs)(s.p,{children:["These decorators ",(0,n.jsx)(s.strong,{children:"durably execute"})," your program, persisting its state to a Postgres database:"]}),"\n",(0,n.jsx)("img",{src:r(764).A,alt:"Durable Workflow",width:"750",className:"custom-img"}),"\n",(0,n.jsxs)(s.p,{children:["You can think of this stored state as a checkpoint for your program.\nIf your program is ever interrupted or crashes, DBOS uses this saved state to recover it from the last completed step.\nFor example, if your checkout workflow crashes right after validating payment, instead of the order being lost forever, DBOS recovers from a checkpoint and goes on to ship the order.\nThus, DBOS makes your application ",(0,n.jsx)(s.strong,{children:"resilient to any failure"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,n.jsx)(s.p,{children:"DBOS helps you write complex programs in remarkably few lines of code. For example:"}),"\n",(0,n.jsxs)(a,{groupId:"examples",className:"medium-tabs",children:[(0,n.jsx)(o,{value:"workflow",label:"Reliable Workflows",children:(0,n.jsxs)("section",{className:"row list",children:[(0,n.jsxs)("article",{className:"col col--4",children:[(0,n.jsx)(s.p,{children:"Write business logic in normal code, with branches, loops, subtasks, and retries. DBOS makes it resilient to any failure."}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/python/examples/widget-store",children:"See an example \u2197\ufe0f"})})]}),(0,n.jsx)("article",{className:"col col--8",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"@DBOS.step()\ndef validate_payment():\n    ...\n\n@DBOS.workflow()\ndef checkout_workflow()\n    validate_payment()\n    check_inventory()\n    ship_order()\n    notify_customer()\n"})})})]})}),(0,n.jsx)(o,{value:"background",label:"Background Tasks",children:(0,n.jsxs)("section",{className:"row list",children:[(0,n.jsxs)("article",{className:"col col--4",children:[(0,n.jsx)(s.p,{children:"Launch any task to run in the background and guarantee it eventually completes.\nWait for days or weeks, or for a notification, before continuing."}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/python/examples/scheduled-reminders",children:"See an example \u2197\ufe0f"})})]}),(0,n.jsx)("article",{className:"col col--8",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'@DBOS.workflow()\ndef schedule_reminder(to_email, days_to_wait):\n    DBOS.recv(days_to_seconds(days_to_wait))\n    send_reminder_email(to_email, days_to_wait)\n\n@app.post("/email")\ndef email_endpoint(request):\n    DBOS.start_workflow(schedule_reminder, request.email, request.days)\n'})})})]})}),(0,n.jsx)(o,{value:"cron",label:"Cron Jobs",children:(0,n.jsxs)("section",{className:"row list",children:[(0,n.jsxs)("article",{className:"col col--4",children:[(0,n.jsx)(s.p,{children:"Schedule functions to run at specific times.\nHost them serverlessly on DBOS Cloud."}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/python/examples/cron-starter",children:"Get started \u2197\ufe0f"})})]}),(0,n.jsx)("article",{className:"col col--8",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'@DBOS.scheduled("0 * * * *") # Run once an hour\n@DBOS.workflow()\ndef run_hourly(scheduled_time, actual_time):\n    results = search_hackernews("serverless")\n    for comment, url in results:\n        post_to_slack(comment, url)\n'})})})]})}),(0,n.jsx)(o,{value:"pipelines",label:"Data Pipelines",children:(0,n.jsxs)("section",{className:"row list",children:[(0,n.jsxs)("article",{className:"col col--4",children:[(0,n.jsx)(s.p,{children:"Build data pipelines that are reliable and observable by default.\nDBOS durable queues guarantee all your tasks complete."}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/python/examples/document-detective",children:"See an example \u2197\ufe0f"})})]}),(0,n.jsx)("article",{className:"col col--8",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'queue = Queue("indexing_queue")\n\n@DBOS.workflow()\ndef indexing_workflow(urls):\n    handles = []\n    for url in urls:\n        handles.append(queue.enqueue(index_step, url))\n    return [h.get_result() for h in handles]\n'})})})]})}),(0,n.jsx)(o,{value:"kafka",label:"Kafka",children:(0,n.jsxs)("section",{className:"row list",children:[(0,n.jsxs)("article",{className:"col col--4",children:[(0,n.jsx)(s.p,{children:"Consume Kafka messages exactly-once, no need to worry about timeouts or offsets."}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/python/tutorials/kafka-integration",children:"Learn more \u2197\ufe0f"})})]}),(0,n.jsx)("article",{className:"col col--8",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'@DBOS.kafka_consumer(config,["alerts-topic"])\n@DBOS.workflow()\ndef process_kafka_alerts(msg):\n    alerts = msg.value.decode()\n    for alert in alerts:\n        respond_to_alert(alert)\n'})})})]})}),(0,n.jsx)(o,{value:"agents",label:"AI Agents",children:(0,n.jsxs)("section",{className:"row list",children:[(0,n.jsxs)("article",{className:"col col--4",children:[(0,n.jsx)(s.p,{children:"Enhance your AI agents with reliable asynchronous tasks and human in the loop.\nIntegrate with popular frameworks like LangChain and LlamaIndex."}),(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"/python/examples/customer-service",children:"See an example \u2197\ufe0f"})})]}),(0,n.jsx)("article",{className:"col col--8",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'@DBOS.workflow()\ndef agentic_refund(purchase):\n    email_human_for_approval(purchase)\n    status = DBOS.recv(timeout_seconds=APPROVAL_TIMEOUT)\n    if status == "approve":\n        approve_refund(purchase)\n    else:\n        reject_refund(purchase)\n'})})})]})})]}),"\n",(0,n.jsx)(s.h2,{id:"dbos-vs-other-systems",children:"DBOS vs. Other Systems"}),"\n",(0,n.jsx)(s.h3,{id:"dbos-vs-temporal",children:"DBOS vs. Temporal"}),"\n",(0,n.jsx)(s.p,{children:"Both DBOS and Temporal provide durable execution, but DBOS is implemented in a lightweight Postgres-backed library whereas Temporal is implemented in an externally orchestrated server."}),"\n",(0,n.jsxs)(s.p,{children:["You can add DBOS to your program by installing the open-source library, connecting it to Postgres, and annotating workflows and steps.\nBy contrast, to add Temporal to your program, you must rearchitect your program to move your workflows and steps (activities) to a Temporal worker, configure a Temporal server to orchestrate those workflows, and access your workflows only through a Temporal client.\n",(0,n.jsx)(s.a,{href:"https://www.dbos.dev/blog/durable-execution-coding-comparison",children:"This blog post"})," makes the comparison in more detail."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"When to use DBOS:"})," You need to add durable workflows to your applications with minimal rearchitecting, or you are using Postgres."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"When to use Temporal:"})," You don't want to add Postgres to your stack, or you need a language DBOS doesn't support yet."]}),"\n",(0,n.jsx)(s.h3,{id:"dbos-vs-airflow",children:"DBOS vs. Airflow"}),"\n",(0,n.jsx)(s.p,{children:"DBOS and Airflow both provide workflow abstractions.\nAirflow is targeted at data science use cases, providing many out-of-the-box connectors but requiring workflows be written as explicit DAGs and externally orchestrating them from an Airflow cluster.\nAirflow is designed for batch operations and does not provide good performance for streaming or real-time use cases.\nDBOS is general-purpose, but is often used for data pipelines, allowing developers to write workflows as code and requiring no infrastructure except Postgres."}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"When to use DBOS:"})," You need the flexibility of writing workflows as code, or you need higher performance than Airflow is capable of (particularly for streaming or real-time use cases)."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"When to use Airflow:"})," You need Airflow's ecosystem of connectors."]}),"\n",(0,n.jsx)(s.h3,{id:"dbos-vs-celerybullmq",children:"DBOS vs. Celery/BullMQ"}),"\n",(0,n.jsxs)(s.p,{children:["DBOS provides a similar queue abstraction to dedicated queueing systems like Celery or BullMQ: you can declare queues, submit tasks to them, and control their flow with concurrency limits, rate limits, timeouts, prioritization, etc.\nHowever, DBOS queues are ",(0,n.jsx)(s.strong,{children:"durable and Postgres-backed"})," and integrate with durable workflows.\nFor example, in DBOS you can write a durable workflow that enqueues a thousand tasks and waits for their results.\nDBOS checkpoints the workflow and each of its tasks in Postgres, guaranteeing that even if failures or interruptions occur, the tasks will complete and the workflow will collect their results.\nBy contrast, Celery/BullMQ are Redis-backed and don't provide workflows, so they provide fewer guarantees but better performance."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"When to use DBOS:"})," You need the reliability of enqueueing tasks from durable workflows."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"When to use Celery/BullMQ"}),": You don't need durability, or you need very high throughput beyond what your Postgres server can support."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}function u(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},764:(e,s,r)=>{r.d(s,{A:()=>o});const o=r.p+"assets/images/dbos-pg-e7fab60a07a86ab936384738e03ed135.png"},5374:(e,s,r)=>{r.d(s,{A:()=>o});const o=r.p+"assets/images/workflow-example-a1ac61ccbf88bf93d65a79722385a0cc.png"},8453:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>l});var o=r(6540);const n={},t=o.createContext(n);function a(e){const s=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(t.Provider,{value:s},e.children)}}}]);