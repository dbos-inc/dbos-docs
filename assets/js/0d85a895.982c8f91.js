"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[5883],{7589:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var n=r(4848),o=r(8453);const i={sidebar_position:3,title:"Communicators",description:"Learn how to communicate with external APIs and services"},a=void 0,c={id:"typescript/tutorials/communicator-tutorial",title:"Communicators",description:"Learn how to communicate with external APIs and services",source:"@site/docs/typescript/tutorials/communicator-tutorial.md",sourceDirName:"typescript/tutorials",slug:"/typescript/tutorials/communicator-tutorial",permalink:"/typescript/tutorials/communicator-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Communicators",description:"Learn how to communicate with external APIs and services"},sidebar:"tutorialSidebar",previous:{title:"Transactions",permalink:"/typescript/tutorials/transaction-tutorial"},next:{title:"Workflows",permalink:"/typescript/tutorials/workflow-tutorial"}},s={},m=[{value:"Configurable Retries",id:"configurable-retries",level:3}];function l(e){const t={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"In this guide, you'll learn how to communicate with external APIs and services from a DBOS application."}),"\n",(0,n.jsxs)(t.p,{children:["We recommend that all communication with external services be done in ",(0,n.jsx)(t.em,{children:"communicator"})," functions.\nFor example, you can use communicators to serve a file from ",(0,n.jsx)(t.a,{href:"https://aws.amazon.com/s3/",children:"AWS S3"}),", call an external API like ",(0,n.jsx)(t.a,{href:"https://stripe.com/",children:"Stripe"}),", or access a non-Postgres data store like ",(0,n.jsx)(t.a,{href:"https://www.elastic.co/elasticsearch/",children:"Elasticsearch"}),".\nEncapsulating these calls in communicators is especially important if you're using ",(0,n.jsx)(t.a,{href:"./workflow-tutorial",children:"workflows"})," so the workflow knows to execute them only once."]}),"\n",(0,n.jsxs)(t.p,{children:["Communicators must be annotated with the ",(0,n.jsx)(t.a,{href:"../reference/decorators#communicator",children:(0,n.jsx)(t.code,{children:"@Communicator"})})," decorator and must have a ",(0,n.jsx)(t.a,{href:"../reference/contexts#communicatorcontext",children:(0,n.jsx)(t.code,{children:"CommunicatorContext"})})," as their first argument.\nAs with other DBOS functions, communicator inputs and outputs must be serializable to JSON.\nHere's a simple example using ",(0,n.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",children:(0,n.jsx)(t.code,{children:"fetch()"})})," to retrieve the contents of ",(0,n.jsx)(t.code,{children:"https://example.com"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'  @Communicator()\n  static async exampleCommunicator(ctxt: CommunicatorContext) {\n    return await fetch("https://example.com").then(r => r.text());\n  }\n'})}),"\n",(0,n.jsx)(t.h3,{id:"configurable-retries",children:"Configurable Retries"}),"\n",(0,n.jsxs)(t.p,{children:["DBOS automatically retries any communicator function that throws an exception.\nIt retries communicator functions a set number of times with exponential backoff, throwing an exception if the maximum number of retries is exceed.\nYou can configure the retry policy by passing a ",(0,n.jsx)(t.code,{children:"CommunicatorConfig"})," to your ",(0,n.jsx)(t.a,{href:"/typescript/reference/decorators#communicator",children:(0,n.jsx)(t.code,{children:"@Communicator"})})," decorator:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"export interface CommunicatorConfig {\n  retriesAllowed?: boolean; // Should failures be retried? (default true)\n  intervalSeconds?: number; // Seconds to wait before the first retry attempt (default 1).\n  maxAttempts?: number;     // Maximum number of retry attempts (default 3). If errors occur more times than this, throw an exception.\n  backoffRate?: number;     // Multiplier by which the retry interval increases after a retry attempt (default 2).\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"For example, to set the maximum number of retries to 10:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-javascript",children:'  @Communicator({maxAttempts: 10})\n  static async exampleCommunicator(ctxt: CommunicatorContext) {\n    return await fetch("https://example.com").then(r => r.text());\n  }\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>c});var n=r(6540);const o={},i=n.createContext(o);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);