"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6571],{2560:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"typescript/reference/client","title":"DBOS Client","description":"DBOSClient provides a programmatic way to interact with your DBOS application from external code.","source":"@site/docs/typescript/reference/client.md","sourceDirName":"typescript/reference","slug":"/typescript/reference/client","permalink":"/typescript/reference/client","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":50,"frontMatter":{"sidebar_position":50,"title":"DBOS Client"},"sidebar":"tutorialSidebar","previous":{"title":"Transactions & Datasources","permalink":"/typescript/reference/datasource"},"next":{"title":"Configuration","permalink":"/typescript/reference/configuration"}}');var t=o(4848),i=o(8453);const s={sidebar_position:50,title:"DBOS Client"},l=void 0,c={},d=[{value:"class DBOSClient",id:"class-dbosclient",level:3},{value:"<code>create</code>",id:"create",level:4},{value:"<code>destroy</code>",id:"destroy",level:4},{value:"Workflow Interaction",id:"workflow-interaction",level:3},{value:"<code>enqueue</code>",id:"enqueue",level:4},{value:"<code>send</code>",id:"send",level:4},{value:"<code>getEvent</code>",id:"getevent",level:4},{value:"<code>retrieveWorkflow</code>",id:"retrieveworkflow",level:4},{value:"<code>readStream</code>",id:"readstream",level:4},{value:"Workflow Inspection",id:"workflow-inspection",level:3},{value:"<code>getWorkflow</code>",id:"getworkflow",level:4},{value:"<code>listWorkflows</code>",id:"listworkflows",level:4},{value:"<code>listQueuedWorkflows</code>",id:"listqueuedworkflows",level:4},{value:"<code>listWorkflowSteps</code>",id:"listworkflowsteps",level:4},{value:"Workflow Management",id:"workflow-management",level:3},{value:"<code>cancelWorkflow</code>",id:"cancelworkflow",level:4},{value:"<code>resumeWorkflow</code>",id:"resumeworkflow",level:4},{value:"<code>forkWorkflow</code>",id:"forkworkflow",level:4},{value:"Debouncing",id:"debouncing",level:2},{value:"DebouncerClient",id:"debouncerclient",level:3},{value:"debouncerClient.debounce",id:"debouncerclientdebounce",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DBOSClient"})," provides a programmatic way to interact with your DBOS application from external code.\n",(0,t.jsx)(n.code,{children:"DBOSClient"})," includes methods similar to ",(0,t.jsx)(n.code,{children:"DBOS"}),".\nthat make sense to be used outside of a DBOS workflow or step, such as ",(0,t.jsx)(n.code,{children:"enqueueWorkflow"})," or ",(0,t.jsx)(n.code,{children:"getEvent"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DBOSClient"})," is included in the ",(0,t.jsx)(n.code,{children:"@dbos-inc/dbos-sdk"})," package, the same package that used by DBOS applications.\nWhere DBOS applications use the static ",(0,t.jsx)(n.code,{children:"DBOS"})," class,\nexternal applications use the ",(0,t.jsx)(n.code,{children:"DBOSClient"})," class instead."]})]}),"\n",(0,t.jsx)(n.h3,{id:"class-dbosclient",children:"class DBOSClient"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface EnqueueOptions {\n    workflowName: string;\n    workflowClassName: string;\n    queueName: string;\n    workflowID?: string;\n    appVersion?: string;\n    workflowTimeoutMS?: number;\n    deduplicationID?: string;\n    priority?: number;\n}\n\nclass DBOSClient {\n    static create({systemDatabaseUrl}: {systemDatabaseUrl?: string}): Promise<DBOSClient>\n    destroy(): Promise<void>;\n\n    enqueue<T extends (...args: any[]) => Promise<any>>(\n        options: ClientEnqueueOptions,\n        ...args: Parameters<T>\n    ): Promise<WorkflowHandle<Awaited<ReturnType<T>>>>;\n    send<T>(destinationID: string, message: T, topic?: string, idempotencyKey?: string): Promise<void>;\n    getEvent<T>(workflowID: string, key: string, timeoutSeconds?: number): Promise<T | null>;\n    retrieveWorkflow<T = unknown>(workflowID: string): WorkflowHandle<Awaited<T>>;\n    readStream<T>(workflowID: string, key: string): AsyncGenerator<T, void, unknown>;\n\n    getWorkflow(workflowID: string): Promise<WorkflowStatus | undefined>;\n    listWorkflows(input: GetWorkflowsInput): Promise<WorkflowStatus[]>;\n    listQueuedWorkflows(input: GetQueuedWorkflowsInput): Promise<WorkflowStatus[]>;\n    listWorkflowSteps(workflowID: string): Promise<StepInfo[] | undefined>;\n\n    cancelWorkflow(workflowID: string): Promise<void>;\n    resumeWorkflow(workflowID: string): Promise<void>;\n    forkWorkflow(workflowID: string, startStep: number,\n        options?: { newWorkflowID?: string; applicationVersion?: string }): Promise<string>;\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"create",children:(0,t.jsx)(n.code,{children:"create"})}),"\n",(0,t.jsxs)(n.p,{children:["You construct a ",(0,t.jsx)(n.code,{children:"DBOSClient"})," with the static ",(0,t.jsx)(n.code,{children:"create"})," function."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"systemDatabaseUrl"})," parameter is a connection string to your Postgres database. See the ",(0,t.jsx)(n.a,{href:"/typescript/reference/configuration",children:"configuration docs"})," for more detail."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { DBOSClient } from "@dbos-inc/dbos-sdk";\n\nconst client = await DBOSClient.create({systemDatabaseUrl: process.env.DBOS_SYSTEM_DATABASE_URL});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"destroy",children:(0,t.jsx)(n.code,{children:"destroy"})}),"\n",(0,t.jsxs)(n.p,{children:["Asynchronously destroys a ",(0,t.jsx)(n.code,{children:"DBOSClient"})," instance."]}),"\n",(0,t.jsx)(n.h3,{id:"workflow-interaction",children:"Workflow Interaction"}),"\n",(0,t.jsx)(n.h4,{id:"enqueue",children:(0,t.jsx)(n.code,{children:"enqueue"})}),"\n",(0,t.jsxs)(n.p,{children:["Enqueues a workflow, similar to passing a queue name to ",(0,t.jsx)(n.code,{children:"DBOS.startWorkflow"}),".\nLike ",(0,t.jsx)(n.code,{children:"startWorkflow"}),", the ",(0,t.jsx)(n.code,{children:"enqueue"})," method returns a ",(0,t.jsx)(n.code,{children:"WorkflowHandle"})," that you can use to retrieve the workflow results\nasynchronously from an external application."]}),"\n",(0,t.jsxs)(n.p,{children:["When enqueuing a workflow from within a DBOS application, the workflow and queue metadata can be retrieved automatically.\nHowever, since ",(0,t.jsx)(n.code,{children:"DBOSClient"})," runs outside the DBOS application, the metadata must be specified explicitly."]}),"\n",(0,t.jsx)(n.p,{children:"Required metadata includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"workflowName"}),": The name of the workflow method being enqueued."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"queueName"}),": The name of the queue to enqueue the workflow on."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Additional but optional metadata includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"workflowClassName"}),": The name of the class the workflow method is a member of, if any.\n*",(0,t.jsx)(n.strong,{children:"`workflowID"}),": The unique ID for the enqueued workflow.\nIf left undefined, DBOS Client will generate a ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Universally_unique_identifier",children:"UUID"}),".\nPlease see ",(0,t.jsx)(n.a,{href:"../tutorials/workflow-tutorial#workflow-ids-and-idempotency",children:"Workflow IDs and Idempotency"})," for more information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"appVersion"}),": The version of your application that should process this workflow.\nIf left undefined, it will be updated to the current version when the workflow is first dequeued.\nPlease see ",(0,t.jsx)(n.a,{href:"../../production/self-hosting/workflow-recovery#managing-application-versions",children:"Managing Application Versions"})," for more information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"workflowTimeoutMS"}),": The timeout of this workflow in milliseconds."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"deduplicationID"}),": Optionally specified when enqueueing a workflow. At any given time, only one workflow with a specific deduplication ID can be enqueued in the specified queue. If a workflow with a deduplication ID is currently enqueued or actively executing (status ",(0,t.jsx)(n.code,{children:"ENQUEUED"})," or ",(0,t.jsx)(n.code,{children:"PENDING"}),"), subsequent workflow enqueue attempt with the same deduplication ID in the same queue will raise a ",(0,t.jsx)(n.code,{children:"DBOSQueueDuplicatedError"})," exception."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"priority"}),": Optionally specified when enqueueing a workflow. The priority of the enqueued workflow in the specified queue. Workflows with the same priority are dequeued in ",(0,t.jsx)(n.strong,{children:"FIFO (first in, first out)"})," order. Priority values can range from ",(0,t.jsx)(n.code,{children:"1"})," to ",(0,t.jsx)(n.code,{children:"2,147,483,647"}),", where ",(0,t.jsx)(n.strong,{children:"a low number indicates a higher priority"}),". Workflows without assigned priorities have the highest priority and are dequeued before workflows with assigned priorities."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In addition to the ",(0,t.jsx)(n.code,{children:"EnqueueOptions"})," described above, you must also provide the workflow arguments to ",(0,t.jsx)(n.code,{children:"enqueue"}),".\nThese are passed to ",(0,t.jsx)(n.code,{children:"enqueue"})," after the initial ",(0,t.jsx)(n.code,{children:"EnqueueOptions"})," parameter."]}),"\n",(0,t.jsxs)(n.p,{children:["Since DBOS Client works independently of your DBOS application code, ",(0,t.jsx)(n.code,{children:"enqueue"})," accepts whatever arguments you provide it without verifying if they match the workflow's expected argument types.\nHowever, you can get type safety by providing a function declaration type parameter to ",(0,t.jsx)(n.code,{children:"enqueue"}),".\nThis enables TypeScript to verify that the provided arguments match the provided declaration and to infer the returned ",(0,t.jsx)(n.code,{children:"WorkflowHandle"})," result type."]}),"\n",(0,t.jsx)(n.p,{children:"Untyped Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Because we did not provide a function type declaration to enqueue,\n// there is no way to verify the workflow arguments are of the correct type. \nconst handle = await client.enqueue(\n    {\n        workflowName: 'indexDocument',\n        workflowClassName: 'DocumentDetective',\n        queueName: 'indexingQueue',\n    }, \n    \"https://arxiv.org/pdf/2208.13068\");\n\n// Explicitly specify the result type since we did not provide a \n// function type declaration to enqueue.\nconst result: number = await handle.getResult();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Typed Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// TypeScript type declaration for our sample app workflow\ndeclare class DocumentDetective {\n    static indexDocument(url: string): Promise<number>\n}\n\n// Because we provided the function type declaration to enqueue, TypeScript\n// can validate the workflow parameters and infer the workflow return type.\nconst handle = await client.enqueue<typeof DocumentDetective.indexDocument>(\n    {\n        workflowName: 'indexDocument',\n        workflowClassName: 'DocumentDetective',\n        queueName: 'indexingQueue',\n    }, \n    \"https://arxiv.org/pdf/2208.13068\");\n\n// TypeScript can also infer the result type because \n// we provided the function type declaration to enqueue\nconst result = await handle.getResult();\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["TypeScript automatically generates type declarations during compilation of your DBOS application.\nYou can copy or import the function type declaration from your application's\n",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html",children:"generated declaration file (aka.d.ts file)"}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"send",children:(0,t.jsx)(n.code,{children:"send"})}),"\n",(0,t.jsxs)(n.p,{children:["Sends a message to a specified workflow. Identical to ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dbossend",children:(0,t.jsx)(n.code,{children:"DBOS.send"})}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Since DBOS Client is running outside of a DBOS application,\nit is highly recommended that you use the ",(0,t.jsx)(n.code,{children:"idempotencyKey"})," parameter in order to get exactly-once behavior."]})}),"\n",(0,t.jsx)(n.h4,{id:"getevent",children:(0,t.jsx)(n.code,{children:"getEvent"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves an event published by workflowID for a given key.\nIdentical to ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dbosgetevent",children:"DBOS.getEvent"})]}),"\n",(0,t.jsx)(n.h4,{id:"retrieveworkflow",children:(0,t.jsx)(n.code,{children:"retrieveWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves a workflow by ID, similar to ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dbosretrieveworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.retrieveWorkflow"})}),".\nReturns a ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#workflow-handles",children:"WorkflowHandle"})," that can be used to retrieve information about the workflow,\nincluding its current state and its eventual result."]}),"\n",(0,t.jsxs)(n.p,{children:["Similar to enqueue, ",(0,t.jsx)(n.code,{children:"retrieveWorkflow"})," can be made type safe by use of a class declaration\nand the ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype",children:"ReturnType Utility Class"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const handle = client.retrieveWorkflow<ReturnType<IndexDocument>>(documentWFID);\nconst pageCount = await handle.getResult();\n"})}),"\n",(0,t.jsx)(n.h4,{id:"readstream",children:(0,t.jsx)(n.code,{children:"readStream"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"readStream<T>(workflowID: string, key: string): AsyncGenerator<T, void, unknown>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Read values from a stream as an async generator from outside the DBOS application.\nThis function reads values from a stream identified by the workflowID and key,\nyielding each value in order until the stream is closed or the workflow terminates.\nSimilar to ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dbosreadstream",children:(0,t.jsx)(n.code,{children:"DBOS.readStream"})}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"workflowID"}),": The workflow instance ID that owns the stream."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"key"}),": The stream key/name within the workflow."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An async generator that yields each value in the stream until the stream is closed."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'for await (const value of client.readStream(workflowID, "example_key")) {\n  console.log(`Received: ${JSON.stringify(value)}`);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"workflow-inspection",children:"Workflow Inspection"}),"\n",(0,t.jsx)(n.h4,{id:"getworkflow",children:(0,t.jsx)(n.code,{children:"getWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves the status of a single workflow, given its workflow ID.\nIf the specified workflow ID does not exist, getWorkflow returns undefined.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#handlegetstatus",children:(0,t.jsx)(n.code,{children:"DBOS.getWorkflowStatus"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"listworkflows",children:(0,t.jsx)(n.code,{children:"listWorkflows"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves information about workflow execution history.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dboslistworkflows",children:(0,t.jsx)(n.code,{children:"DBOS.listWorkflows"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"listqueuedworkflows",children:(0,t.jsx)(n.code,{children:"listQueuedWorkflows"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves information about workflow execution history for a given workflow queue.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dboslistqueuedworkflows",children:(0,t.jsx)(n.code,{children:"DBOS.listQueuedWorkflows"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"listworkflowsteps",children:(0,t.jsx)(n.code,{children:"listWorkflowSteps"})}),"\n",(0,t.jsxs)(n.p,{children:["Retrieves information about the steps executed in a specified workflow.\nIf the specified workflow is not found, ",(0,t.jsx)(n.code,{children:"listWorkflowSteps"})," returns undefined\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dboslistworkflowsteps",children:(0,t.jsx)(n.code,{children:"DBOS.listWorkflowSteps"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h3,{id:"workflow-management",children:"Workflow Management"}),"\n",(0,t.jsx)(n.h4,{id:"cancelworkflow",children:(0,t.jsx)(n.code,{children:"cancelWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Cancels a workflow. If the workflow is currently running, ",(0,t.jsx)(n.code,{children:"DBOSWorkflowCancelledError"})," will be thrown from its next DBOS call.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dboscancelworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.cancelWorkflow"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"resumeworkflow",children:(0,t.jsx)(n.code,{children:"resumeWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Resumes a workflow that had stopped during execution (due to cancellation or error).\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dbosresumeworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.resumeWorkflow"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h4,{id:"forkworkflow",children:(0,t.jsx)(n.code,{children:"forkWorkflow"})}),"\n",(0,t.jsxs)(n.p,{children:["Start a new execution of a workflow from a specific step.\nPlease see ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dbosforkworkflow",children:(0,t.jsx)(n.code,{children:"DBOS.forkWorkflow"})})," for more for more information."]}),"\n",(0,t.jsx)(n.h2,{id:"debouncing",children:"Debouncing"}),"\n",(0,t.jsx)(n.p,{children:"Workflows can be debounced with the DBOSClient."}),"\n",(0,t.jsx)(n.h3,{id:"debouncerclient",children:"DebouncerClient"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"new DebouncerClient(\n  client: DBOSClient,\n  params: DebouncerClientConfig\n)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface DebouncerClientConfig {\n  workflowName: string;\n  workflowClassName?: string;\n  startWorkflowParams?: StartWorkflowParams;\n  debounceTimeoutMs?: number;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Similar to ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#debouncer",children:(0,t.jsx)(n.code,{children:"Debouncer"})})," but takes in a DBOSClient and workflow metadata instead of a workflow function."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"client"}),": The DBOSClient instance to use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"params"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"workflowName"}),": The name of the workflow method to debounce."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"workflowClassName"}),": The name of the class the workflow method is a member of, if any."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"startWorkflowParams"}),": Optional workflow parameters, as in ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#dbosstartworkflow",children:(0,t.jsx)(n.code,{children:"startWorkflow"})}),". Applied to all workflows started from this debouncer."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"debounceTimeoutMs"}),": After this time elapses since the first time a workflow is submitted from this debouncer, the workflow is started regardless of the debounce period."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debouncerclientdebounce",children:"debouncerClient.debounce"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"debouncerClient.debounce(\n  debounceKey: string,\n  debouncePeriodMs: number,\n  ...args: unknown[]\n): Promise<WorkflowHandle<unknown>>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Similar to ",(0,t.jsx)(n.a,{href:"/typescript/reference/methods#debouncerdebounce",children:(0,t.jsx)(n.code,{children:"Debouncer.debounce"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example Syntax"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { DBOSClient, DebouncerClient } from "@dbos-inc/dbos-sdk";\n\nconst client = await DBOSClient.create({\n  systemDatabaseUrl: process.env.DBOS_SYSTEM_DATABASE_URL\n});\n\nconst debouncer = new DebouncerClient(client, {\n  workflowName: "processInput",\n  debounceTimeoutMs: 120000, // 2 minutes\n});\n\n// Each time a user submits a new input, debounce the processInput workflow.\n// The workflow will wait until 60 seconds after the user stops submitting new inputs,\n// then process the last input submitted.\nasync function onUserInputSubmit(userId: string, userInput: string) {\n  const debounceKey = userId;\n  const debouncePeriodMs = 60000; // 60 seconds\n  await debouncer.debounce(debounceKey, debouncePeriodMs, userInput);\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var r=o(6540);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);