"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[7340],{6602:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var t=i(5893),s=i(1151);const r={sidebar_position:12,title:"Using Prisma",description:"Learn how to use Prisma with DBOS"},a=void 0,o={id:"tutorials/using-prisma",title:"Using Prisma",description:"Learn how to use Prisma with DBOS",source:"@site/docs/tutorials/using-prisma.md",sourceDirName:"tutorials",slug:"/tutorials/using-prisma",permalink:"/tutorials/using-prisma",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,title:"Using Prisma",description:"Learn how to use Prisma with DBOS"},sidebar:"tutorialSidebar",previous:{title:"Using TypeORM",permalink:"/tutorials/using-typeorm"},next:{title:"Integrating with Kafka",permalink:"/tutorials/kafka-integration"}},c={},l=[{value:"Getting Started",id:"getting-started",level:3},{value:"Setting Up Prisma Schema",id:"setting-up-prisma-schema",level:3},{value:"Schema Management",id:"schema-management",level:3},{value:"Using Prisma",id:"using-prisma",level:3},{value:"Configuring Prisma",id:"configuring-prisma",level:3},{value:"Known Issues",id:"known-issues",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.prisma.io/",children:"Prisma"})," is a popular open-source TypeScript ORM.\nThe main idea is to define your application data models (entities) in the ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-schema/overview",children:"Prisma Schema"}),", and then use Prisma to automatically generate ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-migrate/getting-started",children:"schema migrations"})," as well as the corresponding ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/introduction",children:"Prisma Client"})," for you to manage your data.\nDBOS supports Prisma as an alternative to ",(0,t.jsx)(n.a,{href:"https://knexjs.org/",children:"Knex"})," and ",(0,t.jsx)(n.a,{href:"https://typeorm.io",children:"TypeORM"})," for transactional data management."]}),"\n",(0,t.jsx)(n.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsxs)(n.p,{children:["An easy way to get started with Prisma is to bootstrap your application with our Prisma template.\nThis is similar to the template used in the ",(0,t.jsx)(n.a,{href:"/getting-started/quickstart",children:"quickstart"}),", but built with Prisma instead of Knex.\nTo download it, run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx -y @dbos-inc/create@latest -t hello-prisma -n <app-name>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then, build it, run schema migrations, and start the Prisma sample app:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm run build\nnpx dbos migrate\nnpx dbos start\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To see that it's working, visit this URL in your browser: ",(0,t.jsx)(n.a,{href:"http://localhost:3000/greeting/dbos",children:"http://localhost:3000/greeting/dbos"}),".  You should get this message: ",(0,t.jsx)(n.code,{children:"Greeting 1: Hello, dbos!"})," Each time you refresh the page, the counter should go up by one."]}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-prisma-schema",children:"Setting Up Prisma Schema"}),"\n",(0,t.jsxs)(n.p,{children:["In DBOS, the Prisma Schema is defined in ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-schema/overview",children:"the same way as any other Prisma project"}),".\nIn this tutorial we assume it is located at the default path (",(0,t.jsx)(n.code,{children:"prisma/schema.prisma"}),"), for example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="prisma/schema.prisma"',children:'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nmodel DbosHello {\n  @@map("dbos_hello")\n  greeting_id Int @id @default(autoincrement())\n  greeting String\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note that the schema file requires a ",(0,t.jsx)(n.code,{children:"$DATABASE_URL"})," environment variable to connect to a database. To make it easy, we include in our template ",(0,t.jsx)(n.a,{href:"#configuring-prisma",children:"a script"})," to automatically generate a ",(0,t.jsx)(n.code,{children:"prisma/.env"})," file with the correct database URL constructed from your ",(0,t.jsx)(n.code,{children:"dbos-config.yaml"})," file."]}),"\n",(0,t.jsx)(n.h3,{id:"schema-management",children:"Schema Management"}),"\n",(0,t.jsxs)(n.p,{children:["In production scenarios or when using DBOS Cloud, we strongly recommend you manage your database schema using ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-migrate/getting-started",children:"Prisma Migrate"}),".\nTo update your database schema, you first need to edit your Prisma schema file, and then ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-dev",children:"create a new migration"})," by running:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx prisma migrate dev --name <migration_name>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This automatically generates a new migration (under ",(0,t.jsx)(n.code,{children:"prisma/migrations/"}),") containing SQL commands to transition your database from its current schema to the schema defined in your latest Prisma schema."]}),"\n",(0,t.jsx)(n.h3,{id:"using-prisma",children:"Using Prisma"}),"\n",(0,t.jsxs)(n.p,{children:["When using DBOS, database operations are performed in ",(0,t.jsx)(n.a,{href:"./transaction-tutorial",children:"transaction functions"}),". Transaction functions must be annotated with the ",(0,t.jsx)(n.a,{href:"../api-reference/decorators#transaction",children:(0,t.jsx)(n.code,{children:"@Transaction"})})," decorator and must have a ",(0,t.jsx)(n.a,{href:"../api-reference/contexts#transactioncontextt",children:(0,t.jsx)(n.code,{children:"TransactionContext<PrismaClient>"})})," as their first argument.\nNote that we specify ",(0,t.jsx)(n.code,{children:"PrismaClient"})," in angle brackets."]}),"\n",(0,t.jsxs)(n.p,{children:["Within the transaction function, access your Prisma client from the ",(0,t.jsx)(n.code,{children:".client"})," field of your transaction context.\nFor example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { PrismaClient } from "@prisma/client";\n\nexport class Hello {\n  @Transaction()\n  static async helloTransaction(txnCtxt: TransactionContext<PrismaClient>, name: string)  {\n    const greeting = `Hello, ${name}!`;\n    const res = await txnCtxt.client.dbosHello.create({\n      data: {\n        greeting: greeting,\n      },\n    });\n    return `Greeting ${res.greeting_id}: ${greeting}`;\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"configuring-prisma",children:"Configuring Prisma"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["If you are using the ",(0,t.jsx)(n.a,{href:"#getting-started",children:"Prisma template"}),", this is done for you."]})}),"\n",(0,t.jsxs)(n.p,{children:["To enable Prisma, you must set the ",(0,t.jsx)(n.code,{children:"app_db_client"})," field in the ",(0,t.jsx)(n.a,{href:"/api-reference/configuration",children:"DBOS configuration file"})," to ",(0,t.jsx)(n.code,{children:"prisma"}),".\nYou should also configure Prisma migration commands.\nHere is an example of a configuration file set up for Prisma:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"database:\n  hostname: 'localhost'\n  port: 5432\n  username: 'postgres'\n  app_db_name: 'hello_prisma'\n  password: ${PGPASSWORD}\n  connectionTimeoutMillis: 3000\n  app_db_client: prisma\n  migrate:\n    - npx prisma migrate deploy\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Prisma doesn't ",(0,t.jsx)(n.a,{href:"https://github.com/prisma/prisma/discussions/4617",children:"support schema migration rollback"})," for successfully applied migrations like other ORMs.\nTherefore, we omit the ",(0,t.jsx)(n.code,{children:"rollback"})," configuration here.\nSee the ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-migrate/workflows/generating-down-migrations",children:"Prisma documentation"})," on rolling back schema changes."]})}),"\n",(0,t.jsxs)(n.p,{children:["Many Prisma commands, such as those for ",(0,t.jsx)(n.a,{href:"#schema-management",children:"schema migrations"}),", require a ",(0,t.jsx)(n.code,{children:"DATABASE_URL"})," environment variable to be correctly set.\nTo avoid managing your configuration in two places, we recommend using this script to automatically generate a ",(0,t.jsx)(n.code,{children:"prisma/.env"})," file with the correct ",(0,t.jsx)(n.code,{children:"DATABASE_URL"})," string constructed from your DBOS config:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",metastring:'title="generate_env.js"',children:"const { parseConfigFile } = require('@dbos-inc/dbos-sdk/dist/src/dbos-runtime/config');\nconst fs = require('node:fs');\nconst path = require('node:path');\n\n// Load the configuration file\nconst [dbosConfig, ] = parseConfigFile();\n\n// Write out the .env file\nconst databaseURL = `postgresql://${dbosConfig.poolConfig.user}:${dbosConfig.poolConfig.password}@${dbosConfig.poolConfig.host}:${dbosConfig.poolConfig.port}/${dbosConfig.poolConfig.database}`;\n\ntry {\n  fs.writeFileSync(path.join(process.cwd(), 'prisma', '.env'), `DATABASE_URL=\"${databaseURL}\"`);\n  console.log(\"Wrote database URL to the prisma/.env file.\");\n} catch (error) {\n  console.error(\"Error writing prisma/.env file:\", error.message);\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You also need to generate a ",(0,t.jsx)(n.a,{href:"https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/introduction",children:"Prisma Client"})," from your Prisma schema before compiling your application.\nTherefore, we recommend that you set the build script in your ",(0,t.jsx)(n.code,{children:"package.json"})," file as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="package.json"',children:'{\n  "scripts": {\n    "build": "node generate_env.js && npx prisma generate && tsc"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"known-issues",children:"Known Issues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Currently we do not support ",(0,t.jsx)(n.a,{href:"/cloud-tutorials/timetravel-debugging",children:"time travel debugging"})," for cloud deployed Prisma applications. However, you can still perform ",(0,t.jsx)(n.a,{href:"/cloud-tutorials/interactive-timetravel",children:"interactive time travel queries"}),"."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>a});var t=i(7294);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);