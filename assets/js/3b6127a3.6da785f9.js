"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[5274],{7362:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(4848),i=n(8453);const s={sidebar_position:10,title:"Authentication and Authorization",description:"Use declarative security and authentication middleware in DBOS"},o=void 0,a={id:"python/tutorials/authentication-authorization",title:"Authentication and Authorization",description:"Use declarative security and authentication middleware in DBOS",source:"@site/docs/python/tutorials/authentication-authorization.md",sourceDirName:"python/tutorials",slug:"/python/tutorials/authentication-authorization",permalink:"/python/tutorials/authentication-authorization",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Authentication and Authorization",description:"Use declarative security and authentication middleware in DBOS"},sidebar:"tutorialSidebar",previous:{title:"Integrating with Kafka",permalink:"/python/tutorials/kafka-integration"},next:{title:"DBOS Class",permalink:"/python/reference/dbos-class"}},d={},l=[{value:"Authentication Middleware",id:"authentication-middleware",level:2},{value:"Authorization Decorators",id:"authorization-decorators",level:2},{value:"Example",id:"example",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["DBOS Python supports modular, declarative security.  This is a cooperative effort between the request framework (such as FastAPI) and DBOS Transact; the server framework performs authentication and forwards the authenticated user and roles on to DBOS functions, which then check for authorization.  Authentication information is forwarded via the ",(0,r.jsx)(t.a,{href:"/python/reference/contexts#set_authentication",children:"DBOS context"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The following tutorial shows use of FastAPI middleware to collect and authenticate user information, and shows how to set function- and class-level authorization in DBOS."}),"\n",(0,r.jsx)(t.h2,{id:"authentication-middleware",children:"Authentication Middleware"}),"\n",(0,r.jsx)(t.p,{children:'Authentication information may arrive in various ways, depending on the approach, protocol, and framework used.  It is common to use some sort of "middleware" that sits between the request handler and the application code that processes the authentication information in each request.'}),"\n",(0,r.jsx)(t.p,{children:"A simple middleware for FastAPI may pass authentication information to DBOS in a manner similar to this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'    @app.middleware("http")\n    async def authMiddleware(\n        request: Request, call_next: Callable[[Request], Awaitable[Response]]\n    ) -> Response:\n        with DBOSContextSetAuth("user1", ["user", "engineer"]):\n            response = await call_next(request)\n            return response\n'})}),"\n",(0,r.jsx)(t.p,{children:"There are several things happening in this code snippet."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"authMiddleware"})," - The middleware function responsible for taking information from the ",(0,r.jsx)(t.code,{children:"Request"})," and providing it to DBOS via the context"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:'@app.middleware("http")'})," - Registers the middleware function with ",(0,r.jsx)(t.code,{children:"app"}),", which is a FastAPI instance, so that the function is called on inbound requests"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"with DBOSContextEnsure():"})," - Ensures that a DBOS context is associated with the request, creating one if none exists"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"DBOS.set_authentication"})," - Sets the authenticated user and roles into the DBOS context, for use in authorization determinations"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"response = await call_next(request)"})," - Proceeds down the handler call chain, with the authentication information in place"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"authorization-decorators",children:"Authorization Decorators"}),"\n",(0,r.jsxs)(t.p,{children:["DBOS Python uses ",(0,r.jsx)(t.a,{href:"/python/reference/decorators",children:"decorators"})," to declare the roles required to authorize access to functions and methods."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/python/reference/decorators#required_roles",children:(0,r.jsx)(t.code,{children:"required_roles"})})," is used at the function/method level to list roles required for function access.  Users who were authenticated with any role on the list are allowed to access the function."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"/python/reference/decorators#default_required_roles",children:(0,r.jsx)(t.code,{children:"default_required_roles"})})," can be used to set a list of roles that applies to each method in class, as a default.  Any methods decorated with ",(0,r.jsx)(t.code,{children:"required_roles"})," will use the list provided by ",(0,r.jsx)(t.code,{children:"required_roles"})," instead of the default list provided to ",(0,r.jsx)(t.code,{children:"default_required_roles"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:'For example, most methods in a class may require "user" access, with a few exceptions, such as "login", which requires no authentication/authorization, or a few administrative functions that require the "admin" role:'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'    @DBOS.default_required_roles(["user"])\n    class DBOSTestClass:\n        @staticmethod\n        @DBOS.workflow()\n        def user_function(var: str) -> str:\n            # "user" role required due to default_required_roles\n            return var\n\n        @staticmethod\n        @DBOS.workflow()\n        @DBOS.required_roles(["admin"])\n        def admin_function(var: str) -> str:\n            # "admin" role required due to method-level override\n            return var\n\n        @staticmethod\n        @DBOS.required_roles([])\n        @DBOS.workflow()\n        def login_function(var: str) -> str:\n            # No role, or any authentication, required due to method-level override\n            return var\n'})}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"In this example, we demonstrate how to use JWT tokens with DBOS declarative security.  Here, the JWT tokens may be generated by a different part of the stack, separating out the concern of robust user management and authentication credentials, which can then be handled in specialized libraries or services."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'    @app.middleware("http")\n    async def jwtAuthMiddleware(\n        request: Request, call_next: Callable[[Request], Awaitable[Response]]\n    ) -> Response:\n        user: Optional[str] = None\n        roles: Optional[List[str]] = None\n        try:\n            token = await oauth2_scheme(request)\n            if token is not None:\n                tdata = decode_jwt(token)\n                user = tdata.username\n                roles = tdata.roles\n        except Exception as e:\n            pass\n\n        with DBOSContextSetAuth(user, roles):\n            response = await call_next(request)\n            return response\n'})}),"\n",(0,r.jsxs)(t.p,{children:["As with the simpler example in ",(0,r.jsx)(t.a,{href:"#authorization-decorators",children:"Authorization Decorators"})," above, ",(0,r.jsx)(t.code,{children:'@app.middleware("http")'})," is used to insert the ",(0,r.jsx)(t.code,{children:"jwtAuthMiddleware"})," function between the FastAPI ",(0,r.jsx)(t.code,{children:"app"})," and DBOS.  Use of ",(0,r.jsx)(t.code,{children:"DBOSContextEnsure"}),", ",(0,r.jsx)(t.code,{children:"DBOS.set_authentication"}),", and ",(0,r.jsx)(t.code,{children:"call_next"})," is also the same."]}),"\n",(0,r.jsxs)(t.p,{children:["What is different is that ",(0,r.jsx)(t.code,{children:"oauth2_scheme"})," and ",(0,r.jsx)(t.code,{children:"decode_jwt"})," are used to extract token contents.  The resulting information is used to set the DBOS user and roles.  If the user / roles are stored in different fields in the token, adjust the access to ",(0,r.jsx)(t.code,{children:"tdata"})," accordingly."]}),"\n",(0,r.jsx)(t.p,{children:"The user and roles can then be used in decorated DBOS workflow, transaction, and step functions."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'    @app.get("/open/{var1}")\n    @DBOS.required_roles([])\n    @DBOS.workflow()\n    def test_open_endpoint(var1: str) -> str:\n        # This function can be called with any user/role, or none at all\n        #   This is true because:\n        #     The `required_roles` list is empty\n        #     The middleware above allows the request to be processed even if no token is present\n        pass\n\n    @app.get("/user/{var1}")\n    @DBOS.required_roles(["user"])\n    @DBOS.workflow()\n    def test_user_endpoint(var1: str) -> str:\n        # This function can be called only by a user with "user" role\n        #   The `required_roles` list contains "user"\n        #   Even though the middleware above allows the request to be processed\n        #     even if no token is present, DBOS will block the call because the\n        #     roles are not set.\n        pass\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);