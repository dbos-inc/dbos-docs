"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[944],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>w});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,w=p["".concat(s,".").concat(m)]||p[m]||f[m]||a;return n?o.createElement(w,i(i({ref:t},c),{},{components:n})):o.createElement(w,i({ref:t},c))}));function w(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:4,title:"Workflows",description:"Learn how to make applications reliable using workflows."},i=void 0,l={unversionedId:"tutorials/workflow-tutorial",id:"tutorials/workflow-tutorial",title:"Workflows",description:"Learn how to make applications reliable using workflows.",source:"@site/docs/tutorials/workflow-tutorial.md",sourceDirName:"tutorials",slug:"/tutorials/workflow-tutorial",permalink:"/operon-docs/tutorials/workflow-tutorial",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Workflows",description:"Learn how to make applications reliable using workflows."},sidebar:"tutorialSidebar",previous:{title:"Communicators",permalink:"/operon-docs/tutorials/communicator-tutorial"},next:{title:"Idempotency",permalink:"/operon-docs/tutorials/idempotency-tutorial"}},s={},u=[{value:"Invoking Functions from Workflows",id:"invoking-functions-from-workflows",level:3},{value:"Reliability Guarantees",id:"reliability-guarantees",level:3},{value:"Determinism",id:"determinism",level:3},{value:"Workflow Identity",id:"workflow-identity",level:3},{value:"Asynchronous Workflows",id:"asynchronous-workflows",level:3},{value:"Further Reading",id:"further-reading",level:3}],c={toc:u},p="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this guide, you'll learn how to make your applications reliable using workflows."),(0,r.kt)("p",null,"Workflows orchestrate the execution of other functions, like transactions and communicators.\nThey're useful because they're ",(0,r.kt)("em",{parentName:"p"},"reliable"),": if a server crashes and is restarted, it automatically resumes all incomplete workflows and runs them to completion without re-executing any operation that already completed.\nYou can use workflows when you need to coordinate multiple operations that all need to complete for a program to be correct.\nFor example, in our ",(0,r.kt)("a",{parentName:"p",href:".."},"shop demo"),", we use a workflow to do payment processing.\nWorkflow reliability guarantees are especially valuable when some operations are long-running, like waiting for user inputs."),(0,r.kt)("p",null,"Workflows must be annotated with the ",(0,r.kt)("a",{parentName:"p",href:"../api-reference/decorators#operonworkflow"},(0,r.kt)("inlineCode",{parentName:"a"},"@OperonWorkflow"))," decorator and must have a ",(0,r.kt)("a",{parentName:"p",href:".."},(0,r.kt)("inlineCode",{parentName:"a"},"WorkflowContext"))," as their first argument.\nLike for other Operon functions, inputs and outputs must be serializable to JSON.\nAdditionally, workflows must be ",(0,r.kt)("a",{parentName:"p",href:"#determinism"},"deterministic"),"."),(0,r.kt)("p",null,"Here's an example workflow from our ",(0,r.kt)("a",{parentName:"p",href:"../getting-started/quickstart-programming-2"},"programing quickstart"),".\nIt increments a counter in the database, then sends an HTTP request.\nIf the request fails, it rolls back the increment.\nBy making this a workflow, we guarantee that the rollback always happens if the request fails, even if the server crashes and is restarted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class Hello {\n\n  ... // Other function implementations\n\n  @GetApi('/greeting/:name')\n  @OperonWorkflow()\n  static async helloWorkflow(wfCtxt: WorkflowContext, name: string) {\n    const greeting = await wfCtxt.invoke(Hello).helloTransaction(name);\n    try {\n      await wfCtxt.invoke(Hello).postmanFunction(greeting);\n      return greeting;\n    } catch (e) {\n      console.warn(\"Error sending request:\", e);\n      await wfCtxt.invoke(Hello).rollbackHelloTransaction(name);\n      return `Greeting failed for ${name}\\n`\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"invoking-functions-from-workflows"},"Invoking Functions from Workflows"),(0,r.kt)("p",null,"Workflows can invoke transactions and communicators using their ",(0,r.kt)("inlineCode",{parentName:"p"},"context.invoke")," method.\nFor example, this line from our above example invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"helloTransaction"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const greeting = await wfCtxt.invoke(Hello).helloTransaction(name);\n")),(0,r.kt)("p",null,"The syntax for invoking function ",(0,r.kt)("inlineCode",{parentName:"p"},"foo(args)")," in class ",(0,r.kt)("inlineCode",{parentName:"p"},"Bar")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"context.invoke(Bar).foo(args)"),"."),(0,r.kt)("p",null,"You can also invoke other workflows using the ",(0,r.kt)("a",{parentName:"p",href:".."},"context.childWorkflow")," method."),(0,r.kt)("h3",{id:"reliability-guarantees"},"Reliability Guarantees"),(0,r.kt)("p",null,"Workflows provide the following reliability guaranteees:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"They always run to completion.  If a server executing a workflow fails and is restarted, it resumes all incomplete workflows from where they left off."),(0,r.kt)("li",{parentName:"ol"},"Transactions execute ",(0,r.kt)("em",{parentName:"li"},"exactly once"),".  Regardless of what failures occur during a workflow's execution, it executes each of its transactions once and only once."),(0,r.kt)("li",{parentName:"ol"},"Communicators execute ",(0,r.kt)("em",{parentName:"li"},"at least once")," but are never re-executed after they successfully complete.  If a failure occurs inside a communicator, the communicator may be retried, but once a communicator has completed execution, Operon guarantees it will never be re-executed regardless of what failures happen afterwards.")),(0,r.kt)("h3",{id:"determinism"},"Determinism"),(0,r.kt)("p",null,"For workflows to provide these guarantees, they must be deterministic.\nIn other words, a workflow function must always do the same thing given the same inputs.\nIf you need to perform a non-deterministic operation like accessing the database, calling a third-party API, generating a random number, or getting the local time, you shouldn't do it directly in a workflow function.\nInstead, you should do all database operations in ",(0,r.kt)("a",{parentName:"p",href:"./transaction-tutorial"},"transactions")," and all other non-deterministic operations in ",(0,r.kt)("a",{parentName:"p",href:"./communicator-tutorial"},"communicators"),"."),(0,r.kt)("h3",{id:"workflow-identity"},"Workflow Identity"),(0,r.kt)("p",null,"Every time you execute a workflow, that execution is assigned a unique identity, represented as a 128-bit ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Universally_unique_identifier"},"UUID"),".\nYou can access this UUID through the ",(0,r.kt)("inlineCode",{parentName:"p"},"context.workflowUUID")," field.\nWorkflow identities are important for communicating with workflows and developing interactive workflows.\nFor more information on workflow communication, see ",(0,r.kt)("a",{parentName:"p",href:"/operon-docs/tutorials/workflow-communication-tutorial"},"our guide"),"."),(0,r.kt)("h3",{id:"asynchronous-workflows"},"Asynchronous Workflows"),(0,r.kt)("p",null,"Because workflows are often long-running, Operon supports invoking workflows asynchronously.\nWhen you invoke a workflow from a handler or from another workflow, the invocation returns a ",(0,r.kt)("a",{parentName:"p",href:".."},"workflow handle"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  @GetApi(...)\n  static async exampleHandler(handlerCtxt: HandlerContext, ...) {\n    const workflowHandle = await handlerCtxt.invoke(Class).workflow(...);\n  }\n")),(0,r.kt)("p",null,"You can also retrieve another workflow's handle if you know its identity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"  @GetApi(...)\n  static async exampleHandler(handlerCtxt: HandlerContext, workflowIdentity: string, ...) {\n    const workflowHandle = await handlerCtxt.retrieveWorkflow(workflowIdentity);\n  }\n")),(0,r.kt)("p",null,"For more information on workflow handles, see ",(0,r.kt)("a",{parentName:"p",href:"../api-reference/workflow-handles"},"their reference page"),"."),(0,r.kt)("p",null,"To wait for a workflow to complete and retrieve its result, await ",(0,r.kt)("inlineCode",{parentName:"p"},"handle.getResult()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const workflowHandle = await handlerCtxt.invoke(Class).workflow(...);\nconst result = await workflowHandle.getResult();\n")),(0,r.kt)("p",null,"Or, more concisely:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const result = await handlerCtxt.invoke(Class).workflow(name).then(h => h.getResult());\n")),(0,r.kt)("h3",{id:"further-reading"},"Further Reading"),(0,r.kt)("p",null,"To learn how to make workflows (or other functions) idempotent, see ",(0,r.kt)("a",{parentName:"p",href:"./idempotency-tutorial"},"our idempotency guide"),"."),(0,r.kt)("p",null,"To learn how to make workflows interactive (for example, to handle user input), see our ",(0,r.kt)("a",{parentName:"p",href:"./workflow-communication-tutorial"},"workflow communication guide"),"."))}f.isMDXComponent=!0}}]);