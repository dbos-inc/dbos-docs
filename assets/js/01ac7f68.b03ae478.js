"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6523],{9449:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"typescript/tutorials/testing","title":"Testing & Mocking","description":"You can test DBOS workflows and steps using any JavaScript or TypeScript testing framework, like Jest or Vitest.","source":"@site/docs/typescript/tutorials/testing.md","sourceDirName":"typescript/tutorials","slug":"/typescript/tutorials/testing","permalink":"/typescript/tutorials/testing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":104,"frontMatter":{"sidebar_position":104,"title":"Testing & Mocking"},"sidebar":"tutorialSidebar","previous":{"title":"Using Typescript Objects","permalink":"/typescript/tutorials/instantiated-objects"},"next":{"title":"Debugging","permalink":"/typescript/tutorials/debugging"}}');var r=n(4848),o=n(8453);const a={sidebar_position:104,title:"Testing & Mocking"},i=void 0,c={},l=[{value:"Unit Testing",id:"unit-testing",level:2},{value:"Integration Testing",id:"integration-testing",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["You can test DBOS workflows and steps using any JavaScript or TypeScript testing framework, like ",(0,r.jsx)(t.a,{href:"https://jestjs.io/",children:"Jest"})," or ",(0,r.jsx)(t.a,{href:"https://vitest.dev/",children:"Vitest"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Steps are ordinary functions that can be tested without any DBOS-specific infrastructure.\nThus, this guide will focus on testing workflows.\nThere are two basic approaches to testing workflows:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Unit testing."})," Test the correctness of workflow logic in isolation, mocking DBOS interface calls. As the DBOS interface is mocked, this does not require Postgres."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Integration testing."})," Test the interactions of workflows with steps and other system components. DBOS interfaces are not mocked, so a Postgres test database is required."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,r.jsxs)(t.p,{children:["You can unit test workflows in isolation by mocking the DBOS interface.\nThis can be done with popular tools such as ",(0,r.jsx)(t.code,{children:"jest.mock"}),".\nFor example, say we want to test the checkout workflow from the ",(0,r.jsx)(t.a,{href:"/typescript/examples/checkout-tutorial",children:"Fault-Tolerant Checkout example"}),":"]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("strong",{children:"Checkout Workflow"})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"export const checkoutWorkflow = DBOS.registerWorkflow(\n  async () => {\n    // Attempt to reserve inventory, failing if no inventory remains\n    try {\n      await subtractInventory();\n    } catch (error) {\n      console.error(`Failed to update inventory: ${(error as Error).message}`);\n      await DBOS.setEvent(PAYMENT_ID_EVENT, null);\n      return;\n    }\n\n    // Create a new order\n    const orderID = await createOrder();\n\n    // Send a unique payment ID to the checkout endpoint so it can\n    // redirect the customer to the payments page\n    await DBOS.setEvent(PAYMENT_ID_EVENT, DBOS.workflowID);\n    const notification = await DBOS.recv<string>(PAYMENT_TOPIC, 120);\n\n    // If payment succeeded, mark the order as paid and start the order dispatch workflow.\n    // Otherwise, return reserved inventory and cancel the order.\n    if (notification && notification === 'paid') {\n      console.info(`Payment successful!`);\n      await markOrderPaid(orderID);\n      await DBOS.startWorkflow(dispatchOrder)(orderID);\n    } else {\n      console.warn(`Payment failed...`);\n      await errorOrder(orderID);\n      await undoSubtractInventory();\n    }\n\n    // Finally, send the order ID to the payment endpoint so it can redirect\n    // the customer to the order status page.\n    await DBOS.setEvent(ORDER_ID_EVENT, orderID);\n  },\n  { name: 'checkoutWorkflow' },\n);\n"})})]}),"\n",(0,r.jsx)(t.p,{children:"This workflow calls several steps as well as several DBOS interface methods.\nWe'll mock them:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"// Mock steps in the shop module\njest.mock('../src/shop', () => ({\n  subtractInventory: jest.fn(),\n  createOrder: jest.fn(),\n  markOrderPaid: jest.fn(),\n  dispatchOrder: jest.fn(),\n  errorOrder: jest.fn(),\n  undoSubtractInventory: jest.fn(),\n}));\n\n// Mock DBOS\njest.mock('@dbos-inc/dbos-sdk', () => ({\n  DBOS: {\n    // IMPORTANT: Mock DBOS.registerWorkflow to return the workflow function\n    registerWorkflow: jest.fn((fn) => fn),\n    setEvent: jest.fn(),\n    recv: jest.fn(),\n    startWorkflow: jest.fn(),\n    workflowID: 'test-workflow-id-123',\n  },\n}));\n"})}),"\n",(0,r.jsxs)(t.p,{children:["It's important to mock ",(0,r.jsx)(t.code,{children:"DBOS.registerWorkflow"})," to directly return the workflow function instead of wrapping it with durable workflow code."]}),"\n",(0,r.jsx)(t.p,{children:"Then we can unit test the workflow code:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"describe('checkout workflow unit tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('successful checkout flow', () => {\n    it('should complete checkout when inventory is available and payment succeeds', async () => {\n      const mockOrderID = 456;\n\n      // Mock successful inventory subtraction\n      jest.mocked(subtractInventory).mockResolvedValue(undefined);\n\n      // Mock order creation\n      jest.mocked(createOrder).mockResolvedValue(mockOrderID);\n\n      // Mock payment notification as successful\n      jest.mocked(DBOS.recv).mockResolvedValue('paid');\n\n      // Mock marking order as paid\n      jest.mocked(markOrderPaid).mockResolvedValue(undefined);\n\n      // Mock startWorkflow to return a function\n      const mockWorkflowFunction = jest.fn().mockResolvedValue(undefined);\n      jest.mocked(DBOS.startWorkflow).mockReturnValue(mockWorkflowFunction);\n\n      // Mock setEvent\n      jest.mocked(DBOS.setEvent).mockResolvedValue(undefined);\n\n      // Execute the workflow\n      await checkoutWorkflow();\n\n      // Verify inventory was subtracted\n      expect(subtractInventory).toHaveBeenCalledTimes(1);\n\n      // Verify order was created\n      expect(createOrder).toHaveBeenCalledTimes(1);\n\n      // Verify payment ID event was set with workflow ID\n      expect(DBOS.setEvent).toHaveBeenCalledWith(PAYMENT_ID_EVENT, 'test-workflow-id-123');\n\n      // Verify it waited for payment notification\n      expect(DBOS.recv).toHaveBeenCalledWith(PAYMENT_TOPIC, 120);\n\n      // Verify order was marked as paid\n      expect(markOrderPaid).toHaveBeenCalledWith(mockOrderID);\n\n      // Verify dispatch workflow was started\n      expect(DBOS.startWorkflow).toHaveBeenCalledWith(dispatchOrder);\n      expect(mockWorkflowFunction).toHaveBeenCalledWith(mockOrderID);\n\n      // Verify order ID event was set\n      expect(DBOS.setEvent).toHaveBeenCalledWith(ORDER_ID_EVENT, mockOrderID);\n\n      // Verify no error handling was triggered\n      expect(errorOrder).not.toHaveBeenCalled();\n      expect(undoSubtractInventory).not.toHaveBeenCalled();\n    });\n  });\n});\n"})}),"\n",(0,r.jsxs)(t.p,{children:["You can find a complete unit test example on GitHub ",(0,r.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/blob/main/typescript/widget-store/tests/shop-unit.test.ts",children:"here"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,r.jsx)(t.p,{children:"You can also write integration tests for workflows, testing interactions with DBOS.\nThis requires a Postgres database."}),"\n",(0,r.jsx)(t.p,{children:"When writing integration tests, you likely want to reset DBOS and its system database between tests.\nHere is some example code for this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"export async function resetDatabase(databaseUrl: string) {\n  const dbName = new URL(databaseUrl).pathname.slice(1);\n  const postgresDatabaseUrl = new URL(databaseUrl);\n  postgresDatabaseUrl.pathname = '/postgres';\n\n  const client = new Client({ connectionString: postgresDatabaseUrl.toString() });\n  await client.connect();\n  try {\n    await client.query(`DROP DATABASE IF EXISTS ${dbName} WITH (FORCE)`);\n    await client.query(`CREATE DATABASE ${dbName}`);\n  } finally {\n    await client.end();\n  }\n}\n\ndescribe('example integration tests', () => {\n  beforeEach(async () => {\n    // An integration test requires a Postgres connection\n    const databaseUrl = process.env.DBOS_TEST_DATABASE_URL;\n    if (!databaseUrl) {\n      throw Error(\"DBOS_TEST_DATABASE_URL must be set to run this test\")\n    }\n\n    // Shut down DBOS (in case a previous test launched it) and reset the database.\n    await DBOS.shutdown();\n    await resetDatabase(databaseUrl);\n\n    // Configure and launch DBOS\n    const dbosTestConfig: DBOSConfig = {\n      name: \"my-integration-test\",\n      systemDatabaseUrl: databaseUrl,\n    };\n    DBOS.setConfig(dbosTestConfig);\n    await DBOS.launch();\n  }, 10000);\n\n  afterEach(async () => {\n    await DBOS.shutdown();\n  });\n\n  it('my integration test', async () => {\n    // test goes here\n  });\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"With the DBOS environment correctly configured between tests, you can freely call your workflows, steps, and DBOS interface methods and test them any way you need."}),"\n",(0,r.jsxs)(t.p,{children:["You can find a complete integration test example on GitHub ",(0,r.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/blob/main/typescript/widget-store/tests/shop-integration.test.ts",children:"here"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);