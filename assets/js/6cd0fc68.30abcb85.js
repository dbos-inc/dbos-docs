"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[3543],{7540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=t(5893),a=t(1151),i=t(4866),s=t(5162);const o={sidebar_position:2,title:"Transactions",description:"Learn how to perform database operations"},c=void 0,l={id:"tutorials/transaction-tutorial",title:"Transactions",description:"Learn how to perform database operations",source:"@site/docs/tutorials/transaction-tutorial.md",sourceDirName:"tutorials",slug:"/tutorials/transaction-tutorial",permalink:"/tutorials/transaction-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Transactions",description:"Learn how to perform database operations"},sidebar:"tutorialSidebar",previous:{title:"HTTP Serving",permalink:"/tutorials/http-serving-tutorial"},next:{title:"Communicators",permalink:"/tutorials/communicator-tutorial"}},u={},d=[{value:"Schema Management",id:"schema-management",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.em,{children:"transaction functions"})," to read and write from your database. A transaction function may contain multiple queries as well as TypeScript business logic and executes as a single ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_transaction",children:"database transaction"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Transaction functions must be annotated with the ",(0,r.jsx)(n.a,{href:"../api-reference/decorators#transaction",children:(0,r.jsx)(n.code,{children:"@Transaction"})})," decorator and must have a ",(0,r.jsx)(n.a,{href:"../api-reference/contexts#transactioncontextt",children:(0,r.jsx)(n.code,{children:"TransactionContext"})})," as their first argument.\nAs with other DBOS functions, inputs and outputs must be serializable to JSON."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"../api-reference/contexts#transactioncontextt",children:(0,r.jsx)(n.code,{children:"TransactionContext"})})," provides a ",(0,r.jsx)(n.code,{children:".client"})," field you can use to interact with the database, so you don't need to worry about managing connections.\nDBOS supports ",(0,r.jsx)(n.a,{href:"/tutorials/using-knex",children:"Knex.js"}),", ",(0,r.jsx)(n.a,{href:"/tutorials/using-drizzle",children:"Drizzle"}),", ",(0,r.jsx)(n.a,{href:"/tutorials/using-typeorm",children:"TypeORM"}),", and ",(0,r.jsx)(n.a,{href:"/tutorials/using-prisma",children:"Prisma"})," clients as well as raw SQL.\nYou can configure which client to use in your ",(0,r.jsx)(n.a,{href:"/api-reference/configuration",children:(0,r.jsx)(n.code,{children:"dbos-config.yaml"})})," file.\nKnex is the default and we recommend using ",(0,r.jsx)(n.code,{children:"Knex.raw()"})," for raw SQL."]}),"\n",(0,r.jsx)(n.p,{children:"Here are examples of a write and a read transaction function using each client."}),"\n",(0,r.jsxs)(i.Z,{groupId:"database-clients",children:[(0,r.jsxs)(s.Z,{value:"knex",label:"Knex",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"interface GreetingRecord {\n  name: string;\n  note: string;\n}\n\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<Knex>, gr: GreetingRecord) {\n    await ctxt.client('greetings').insert(gr);\n  }\n\n  @Transaction({readOnly: true})\n  static async getGreetings(ctxt: TransactionContext<Knex>): Promise<GreetingRecord[]>  {\n    return await ctxt.client<GreetingRecord>('greetings').select('*');\n  }\n}\n"})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/tutorials/using-knex",children:"Knex guide"})," for more information."]})]}),(0,r.jsxs)(s.Z,{value:"drizzle",label:"Drizzle",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export const GreetingRecord = pgTable('greetings', {\n  name: text('name'),\n  note: text('note'),\n});\n\nexport class Greetings {\n  //..\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<NodePgDatabase>, name: string, note: string) {\n    await ctxt.client.insert(GreetingRecord).values({name: name, note: note});\n  }\n\n  @Transaction({ readOnly:true })\n  static async getGreetings(ctxt: TransactionContext<NodePgDatabase>): Promise<{name: string | null, note: string | null}[]> {\n    return await ctxt.client.select().from(GreetingRecord);\n  }\n}\n"})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/tutorials/using-drizzle",children:"Drizzle guide"})," for more information."]})]}),(0,r.jsxs)(s.Z,{value:"typeorm",label:"TypeORM",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"@Entity('greetings') //set the name of the table to 'greetings'\nexport class GreetingRecord {\n    @PrimaryGeneratedColumn() //note: TypeORM requires at least one primary key\n    id!: number;\n\n    @Column()\n    name!: string;\n\n    @Column()\n    note!: string;\n}\n\n@OrmEntities([GreetingRecord])\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<EntityManager>, name: string, note: string) {\n    const greeting = new GreetingRecord();\n    greeting.name = name;\n    greeting.note = note;\n    await ctxt.client.save(greeting);\n  }\n\n  @Transaction({ readOnly:true })\n  static async getGreetings(ctxt: TransactionContext<EntityManager>): Promise<GreetingRecord[]> {\n    return await ctxt.client.getRepository(GreetingRecord).find();\n  }  \n}\n"})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/tutorials/using-typeorm",children:"TypeORM guide"})," for more information."]})]}),(0,r.jsxs)(s.Z,{value:"prisma",label:"Prisma",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'//Model specified in prisma/schema.prisma:\n//\n//model GreetingRecord {\n//  @@map("greetings") \n//  greeting_id Int @id @default(autoincrement()) //Note: Prisma requires at least one primary key\n//  name String\n//  note String\n//}\n\n// Use the generated Prisma client and GreetingRecord class\nimport { PrismaClient, GreetingRecord } from "@prisma/client";\n\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<PrismaClient>, name: string, note: string) {\n    await ctxt.client.greetingRecord.create({\n      data: {\n        name: name,\n        note: note\n      },\n    });\n  }\n\n  @Transaction({ readOnly:true })\n  static async getGreetings(ctxt: TransactionContext<PrismaClient>): Promise<GreetingRecord[]> {\n    return await ctxt.client.greetingRecord.findMany();\n  }\n}\n'})}),(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/tutorials/using-prisma",children:"Prisma guide"})," for more information."]})]}),(0,r.jsx)(s.Z,{value:"raw",label:"Raw SQL",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"interface GreetingRecord {\n  name: string;\n  note: string;\n}\n\nexport class Greetings {\n  //...\n  @Transaction()\n  static async insertGreeting(ctxt: TransactionContext<Knex>, gr: GreetingRecord) {\n    await ctxt.client.raw('INSERT INTO greetings (name, note) VALUES (?, ?)', [gr.name, gr.note]);\n  }\n\n  @Transaction({readOnly: true})\n  static async getGreetings(ctxt: TransactionContext<Knex>): Promise<GreetingRecord[]> {\n    const result = await ctxt.client.raw('SELECT name, note FROM greetings') as { rows: GreetingRecord[] };\n    return result.rows;\n  }\n}\n"})})})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["As shown above, we suggest decorating read transactions as ",(0,r.jsx)(n.code,{children:"@Transaction({readOnly: true})"})," for faster performance."]})}),"\n",(0,r.jsx)(n.h2,{id:"schema-management",children:"Schema Management"}),"\n",(0,r.jsx)(n.p,{children:"We strongly recommend you manage your database schema using migrations.\nKnex, TypeORM, and Prisma all provide rich support for schema management through migrations.\nPlease see their guides for more detail:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/tutorials/using-knex#schema-management",children:"Knex schema management guide."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/tutorials/using-drizzle#schema-management",children:"Drizzle schema management guide."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/tutorials/using-typeorm#schema-management",children:"TypeORM schema management guide."})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/tutorials/using-prisma#schema-management",children:"Prisma schema management guide."})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If you are not using database transactions, you may wish to disable database migrations.\nIn ",(0,r.jsx)(n.a,{href:"/api-reference/configuration",children:(0,r.jsx)(n.code,{children:"dbos-config.yaml"})}),", set your ",(0,r.jsx)(n.code,{children:"migrate:"})," section as below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"migrate:\n    - echo 'No migrations'  \n"})})]})}function g(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>s});t(7294);var r=t(6905);const a={tabItem:"tabItem_Ymn6"};var i=t(5893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(7294),a=t(6905),i=t(2466),s=t(6550),o=t(469),c=t(1980),l=t(7392),u=t(812);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,l.lx)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function g(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[s,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!g({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[l,d]=h({queryString:t,groupId:a}),[p,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,u.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),f=(()=>{const e=l??p;return g({value:e,tabValues:i})?e:null})();(0,o.Z)((()=>{f&&c(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),x(e)}),[d,x,i]),tabValues:i}}var x=t(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(5893);function j(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.o5)(),u=e=>{const n=e.currentTarget,t=c.indexOf(n),a=o[t].value;a!==r&&(l(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>c.push(e),onKeyDown:d,onClick:u,...i,className:(0,a.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:i}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=p(e);return(0,b.jsxs)("div",{className:(0,a.Z)("tabs-container",f.tabList),children:[(0,b.jsx)(j,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function w(e){const n=(0,x.Z)();return(0,b.jsx)(v,{...e,children:d(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var r=t(7294);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);