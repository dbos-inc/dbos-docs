"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[5561],{6652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(4848),i=n(8453);const r={sidebar_position:8,title:"Testing and Debugging",description:"Learn how to use the testing runtime for unit tests."},o=void 0,a={id:"typescript/tutorials/testing-tutorial",title:"Testing and Debugging",description:"Learn how to use the testing runtime for unit tests.",source:"@site/docs/typescript/tutorials/testing-tutorial.md",sourceDirName:"typescript/tutorials",slug:"/typescript/tutorials/testing-tutorial",permalink:"/typescript/tutorials/testing-tutorial",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Testing and Debugging",description:"Learn how to use the testing runtime for unit tests."},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/typescript/tutorials/logging"},next:{title:"Authentication and Authorization",permalink:"/typescript/tutorials/authentication-authorization"}},c={},l=[{value:"Creating Testing Runtime",id:"creating-testing-runtime",level:3},{value:"Testing Functions",id:"testing-functions",level:3},{value:"Testing HTTP Endpoints",id:"testing-http-endpoints",level:3},{value:"Cleaning Up",id:"cleaning-up",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Further Reading",id:"further-reading",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"In this guide, you'll learn how to test your DBOS applications."}),"\n",(0,s.jsxs)(t.p,{children:["DBOS provides a ",(0,s.jsx)(t.a,{href:"/typescript/reference/testing-runtime",children:"testing runtime"})," to make it easier to write unit tests for DBOS applications.\nUsing the runtime, you can invoke and test your application's functions individually."]}),"\n",(0,s.jsxs)(t.p,{children:["We'll show you how to write unit tests for the ",(0,s.jsx)(t.code,{children:"Hello"})," example class shipped by ",(0,s.jsx)(t.a,{href:"/typescript/reference/cli#npx-dbos-inccreate",children:(0,s.jsx)(t.code,{children:"npx @dbos-inc/create"})}),".\nWe use ",(0,s.jsx)(t.a,{href:"https://jestjs.io/",children:"Jest"})," in this example, but the testing runtime works with any testing framework."]}),"\n",(0,s.jsx)(t.h3,{id:"creating-testing-runtime",children:"Creating Testing Runtime"}),"\n",(0,s.jsxs)(t.p,{children:["First, let's create a ",(0,s.jsx)(t.code,{children:"TestingRuntime"})," object:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"testRuntime = await createTestingRuntime();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This function optionally takes in a list of classes you want to test. Here, we want to test the methods of the ",(0,s.jsx)(t.code,{children:"Hello"})," class, so we could have specified:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"testRuntime = await createTestingRuntime([Hello]);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can also optionally provide a path to a ",(0,s.jsx)(t.a,{href:"/typescript/reference/configuration",children:"configuration file"}),".\nIf no path is provided, the runtime loads a configuration file from the default location (",(0,s.jsx)(t.code,{children:"dbos-config.yaml"})," in the package root)."]}),"\n",(0,s.jsx)(t.h3,{id:"testing-functions",children:"Testing Functions"}),"\n",(0,s.jsxs)(t.p,{children:["A testing runtime object can invoke workflows, transactions, and communicators using the ",(0,s.jsx)(t.code,{children:"invoke"})," method.\nThe syntax for invoking function ",(0,s.jsx)(t.code,{children:"foo(ctxt, args)"})," in class ",(0,s.jsx)(t.code,{children:"Bar"})," is ",(0,s.jsx)(t.code,{children:"testRuntime.invoke(Bar).foo(args)"}),".\nYou don't need to supply the context to an invoked function\u2014the testing runtime does this for you.\nFor example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'const res = await testRuntime.invoke(Hello).helloTransaction("dbos");\nexpect(res).toMatch("Hello, dbos! You have been greeted");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this code, we invoke ",(0,s.jsx)(t.code,{children:"helloTransaction"})," with the input string ",(0,s.jsx)(t.code,{children:'"dbos"'}),", and verify its output is as expected."]}),"\n",(0,s.jsx)(t.h3,{id:"testing-http-endpoints",children:"Testing HTTP Endpoints"}),"\n",(0,s.jsxs)(t.p,{children:["The testing runtime provides a ",(0,s.jsx)(t.code,{children:"getHandlersCallback()"})," function, which  returns a callback function for node's native ",(0,s.jsx)(t.code,{children:"http/http2"})," server. This allows you to test HTTP handlers, for example, with ",(0,s.jsx)(t.a,{href:"https://www.npmjs.com/package/supertest",children:"supertest"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import request from "supertest";\n\nconst res = await request(testRuntime.getHandlersCallback()).get(\n  "/greeting/dbos"\n);\nexpect(res.statusCode).toBe(200);\nexpect(res.text).toMatch("Hello, dbos! You have been greeted");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this code, we send a ",(0,s.jsx)(t.code,{children:"GET"})," request to our ",(0,s.jsx)(t.code,{children:"/greeting/dbos"})," URL and verify its response."]}),"\n",(0,s.jsx)(t.h3,{id:"cleaning-up",children:"Cleaning Up"}),"\n",(0,s.jsx)(t.p,{children:"Finally, after your tests, you can clean up the testing runtime and release its resources:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"await testRuntime.destroy();\n"})}),"\n",(0,s.jsx)(t.h3,{id:"run-tests",children:"Run Tests"}),"\n",(0,s.jsx)(t.p,{children:"Now let's run the tests!"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"npm run test\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"You are responsible for setting and cleaning up database tables before and after tests.\nIn our example, we run Knex migrations as part of our testing script."})}),"\n",(0,s.jsx)(t.p,{children:"You should see the test results similar to the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:" PASS  src/operations.test.ts\n  operations-test\n    \u2713 test-transaction (21 ms)\n    \u2713 test-endpoint (17 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        1.247 s, estimated 2 s\n"})}),"\n",(0,s.jsx)(t.h3,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(t.p,{children:["To learn the full testing runtime interface, please see ",(0,s.jsx)(t.a,{href:"/typescript/reference/testing-runtime",children:"our testing runtime references"}),".\nYou can find the source code for this tutorial in ",(0,s.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-ts/blob/main/examples/hello/src/operations.test.ts",children:"operations.test.ts"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);