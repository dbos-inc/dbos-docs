"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[6847],{2670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"python/examples/widget-store","title":"Widget Store","description":"In this example, we use DBOS and FastAPI to deploy an online storefront that\'s resilient to any failure.","source":"@site/docs/python/examples/widget-store.md","sourceDirName":"python/examples","slug":"/python/examples/widget-store","permalink":"/python/examples/widget-store","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":1,"title":"Widget Store"},"sidebar":"examplesSidebar","previous":{"title":"Overview","permalink":"/examples/"},"next":{"title":"OpenAI Quickstart","permalink":"/python/examples/ai-starter"}}');var s=n(4848),o=n(8453);const i={displayed_sidebar:"examplesSidebar",sidebar_position:1,title:"Widget Store"},a=void 0,d={},l=[{value:"Import and Initialize the App",id:"import-and-initialize-the-app",level:2},{value:"The Checkout Workflow",id:"the-checkout-workflow",level:2},{value:"The Checkout and Payment Endpoints",id:"the-checkout-and-payment-endpoints",level:2},{value:"Database Operations",id:"database-operations",level:2},{value:"Finishing Up",id:"finishing-up",level:2},{value:"Try it Yourself!",id:"try-it-yourself",level:2},{value:"Deploying to the Cloud",id:"deploying-to-the-cloud",level:3},{value:"Running Locally",id:"running-locally",level:3}];function p(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"In this example, we use DBOS and FastAPI to deploy an online storefront that's resilient to any failure."}),"\n",(0,s.jsxs)(t.p,{children:["You can see the application live ",(0,s.jsx)(t.a,{href:"https://demo-widget-store.cloud.dbos.dev/",children:"here"}),".\nTry playing with it and pressing the crash button as often as you want.\nWithin a few seconds, the app will recover and resume as if nothing happened."]}),"\n",(0,s.jsxs)(t.p,{children:["All source code is ",(0,s.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/widget-store",children:"available on GitHub"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Widget store UI",src:n(8662).A+"",width:"2818",height:"1200"})}),"\n",(0,s.jsx)(t.h2,{id:"import-and-initialize-the-app",children:"Import and Initialize the App"}),"\n",(0,s.jsx)(t.p,{children:"Let's start off with imports and initializing the DBOS and FastAPI apps.\nWe'll also define a few constants for later."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'import os\n\nfrom dbos import DBOS, SetWorkflowID\nfrom fastapi import FastAPI, HTTPException, Response\nfrom fastapi.responses import HTMLResponse\n\nfrom .schema import OrderStatus, orders, products\n\napp = FastAPI()\n\nDBOS(fastapi=app)\n\nWIDGET_ID = 1\nPAYMENT_STATUS = "payment_status"\nPAYMENT_ID = "payment_id"\nORDER_ID = "order_id"\n'})}),"\n",(0,s.jsx)(t.h2,{id:"the-checkout-workflow",children:"The Checkout Workflow"}),"\n",(0,s.jsx)(t.p,{children:"Next, let's write the checkout workflow.\nThis workflow is triggered whenever a customer buys a widget.\nIt creates a new order, then reserves inventory, then processes payment, then marks the order as paid and dispatches the order for fulfillment.\nIf any step fails, it backs out, returning reserved inventory and marking the order as cancelled."}),"\n",(0,s.jsxs)(t.p,{children:["DBOS ",(0,s.jsx)(t.em,{children:"durably executes"})," this workflow: each of its steps executes exactly-once and if it's ever interrupted, it automatically resumes from where it left off.\nYou can try this yourself!\nOn the ",(0,s.jsx)(t.a,{href:"https://demo-widget-store.cloud.dbos.dev/",children:"live application"}),", start an order and press the crash button at any time.\nWithin seconds, your app will recover to exactly the state it was in before the crash and continue as if nothing happened."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@DBOS.workflow()\ndef checkout_workflow():\n    # Create a new order\n    order_id = create_order()\n\n    # Attempt to reserve inventory, cancelling the order if no inventory remains.\n    inventory_reserved = reserve_inventory()\n    if not inventory_reserved:\n        DBOS.logger.error(f"Failed to reserve inventory for order {order_id}")\n        update_order_status(order_id=order_id, status=OrderStatus.CANCELLED.value)\n        DBOS.set_event(PAYMENT_ID, None)\n        return\n\n    # Send a unique payment ID to the checkout endpoint so it\n    # can redirect the customer to the payments page.\n    DBOS.set_event(PAYMENT_ID, DBOS.workflow_id)\n\n    # Wait for a message that the customer has completed payment.\n    payment_status = DBOS.recv(PAYMENT_STATUS)\n\n    # If payment succeeded, mark the order as paid and start the order dispatch workflow.\n    # Otherwise, return reserved inventory and cancel the order.\n    if payment_status == "paid":\n        DBOS.logger.info(f"Payment successful for order {order_id}")\n        update_order_status(order_id=order_id, status=OrderStatus.PAID.value)\n        DBOS.start_workflow(dispatch_order_workflow, order_id)\n    else:\n        DBOS.logger.warn(f"Payment failed for order {order_id}")\n        undo_reserve_inventory()\n        update_order_status(order_id=order_id, status=OrderStatus.CANCELLED.value)\n\n    # Finally, send the order ID to the payment endpoint so it\n    # can redirect the customer to the order status page.\n    DBOS.set_event(ORDER_ID, str(order_id))\n'})}),"\n",(0,s.jsx)(t.h2,{id:"the-checkout-and-payment-endpoints",children:"The Checkout and Payment Endpoints"}),"\n",(0,s.jsx)(t.p,{children:"Now, let's use FastAPI to write the HTTP endpoint for checkout."}),"\n",(0,s.jsx)(t.p,{children:'This endpoint receives a request when a customer presses the "Buy Now" button.\nIt starts the checkout workflow in the background, then waits for the workflow to generate and send it a unique payment ID.\nIt then returns the payment ID so the browser can redirect the user to the payments page.'}),"\n",(0,s.jsxs)(t.p,{children:["The endpoint accepts an ",(0,s.jsx)(t.a,{href:"/python/tutorials/idempotency-tutorial",children:"idempotency key"}),' so that even if the customer presses "buy now" multiple times, only one checkout workflow is started.']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@app.post("/checkout/{idempotency_key}")\ndef checkout_endpoint(idempotency_key: str) -> Response:\n    # Idempotently start the checkout workflow in the background.\n    with SetWorkflowID(idempotency_key):\n        handle = DBOS.start_workflow(checkout_workflow)\n    # Wait for the checkout workflow to send a payment ID, then return it.\n    payment_id = DBOS.get_event(handle.workflow_id, PAYMENT_ID)\n    if payment_id is None:\n        raise HTTPException(status_code=404, detail="Checkout failed to start")\n    return Response(payment_id)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Let's also write the HTTP endpoint for payments.\nIt uses the payment ID to signal the checkout workflow whether the payment succeeded or failed.\nIt then retrieves the order ID from the checkout workflow so the browser can redirect the customer to the order status page."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@app.post("/payment_webhook/{payment_id}/{payment_status}")\ndef payment_endpoint(payment_id: str, payment_status: str) -> Response:\n    # Send the payment status to the checkout workflow.\n    DBOS.send(payment_id, payment_status, PAYMENT_STATUS)\n    # Wait for the checkout workflow to send an order ID, then return it.\n    order_url = DBOS.get_event(payment_id, ORDER_ID)\n    if order_url is None:\n        raise HTTPException(status_code=404, detail="Payment failed to process")\n    return Response(order_url)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"database-operations",children:"Database Operations"}),"\n",(0,s.jsxs)(t.p,{children:["Next, let's write some database operations.\nEach of these functions performs a simple CRUD operation, like retrieving product information or updating inventory.\nWe apply the ",(0,s.jsx)(t.a,{href:"/python/tutorials/transaction-tutorial",children:(0,s.jsx)(t.code,{children:"@DBOS.transaction"})})," to each of them to give them access to a pre-configured database connection.\nWe also make some of these functions HTTP endpoints with FastAPI so the frontend can access them, for example to display order status."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@DBOS.transaction()\ndef reserve_inventory() -> bool:\n    rows_affected = DBOS.sql_session.execute(\n        products.update()\n        .where(products.c.product_id == WIDGET_ID)\n        .where(products.c.inventory > 0)\n        .values(inventory=products.c.inventory - 1)\n    ).rowcount\n    return rows_affected > 0\n\n\n@DBOS.transaction()\ndef undo_reserve_inventory() -> None:\n    DBOS.sql_session.execute(\n        products.update()\n        .where(products.c.product_id == WIDGET_ID)\n        .values(inventory=products.c.inventory + 1)\n    )\n\n\n@DBOS.transaction()\ndef create_order() -> int:\n    result = DBOS.sql_session.execute(\n        orders.insert().values(order_status=OrderStatus.PENDING.value)\n    )\n    return result.inserted_primary_key[0]\n\n\n@app.get("/order/{order_id}")\n@DBOS.transaction()\ndef get_order(order_id: int):\n    return (\n        DBOS.sql_session.execute(orders.select().where(orders.c.order_id == order_id))\n        .mappings()\n        .first()\n    )\n\n\n@DBOS.transaction()\ndef update_order_status(order_id: int, status: int) -> None:\n    DBOS.sql_session.execute(\n        orders.update().where(orders.c.order_id == order_id).values(order_status=status)\n    )\n\n\n@app.get("/product")\n@DBOS.transaction()\ndef get_product():\n    return DBOS.sql_session.execute(products.select()).mappings().first()\n\n\n@app.get("/orders")\n@DBOS.transaction()\ndef get_orders():\n    rows = DBOS.sql_session.execute(orders.select())\n    return [dict(row) for row in rows.mappings()]\n\n\n@app.post("/restock")\n@DBOS.transaction()\ndef restock():\n    DBOS.sql_session.execute(products.update().values(inventory=100))\n'})}),"\n",(0,s.jsx)(t.h2,{id:"finishing-up",children:"Finishing Up"}),"\n",(0,s.jsx)(t.p,{children:"A few more functions to go!"}),"\n",(0,s.jsxs)(t.p,{children:['First, let\'s write a workflow to dispatch orders that have been paid for.\nThis function is responsible for the "progress bar" you see for paid orders on the ',(0,s.jsx)(t.a,{href:"https://demo-widget-store.cloud.dbos.dev/",children:"live demo page"}),".\nEvery second, it updates the progress of a paid order, then dispatches the order if it is fully progressed."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@DBOS.workflow()\ndef dispatch_order_workflow(order_id):\n    for _ in range(10):\n        DBOS.sleep(1)\n        update_order_progress(order_id)\n\n@DBOS.transaction()\ndef update_order_progress(order_id):\n    # Update the progress of paid orders.\n    progress_remaining = DBOS.sql_session.execute(\n        orders.update()\n        .where(orders.c.order_id == order_id)\n        .values(progress_remaining=orders.c.progress_remaining - 1)\n        .returning(orders.c.progress_remaining)\n    ).scalar_one()\n\n    # Dispatch if the order is fully-progressed.\n    if progress_remaining == 0:\n        DBOS.sql_session.execute(\n            orders.update()\n            .where(orders.c.order_id == order_id)\n            .values(order_status=OrderStatus.DISPATCHED.value)\n        )\n"})}),"\n",(0,s.jsx)(t.p,{children:"Let's also serve the app's frontend from an HTML file using FastAPI.\nIn production, we recommend using DBOS primarily for the backend, with your frontend deployed elsewhere."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@app.get("/")\ndef frontend():\n    with open(os.path.join("html", "app.html")) as file:\n        html = file.read()\n    return HTMLResponse(html)\n'})}),"\n",(0,s.jsx)(t.p,{children:"Finally, here is the crash endpoint. It crashes your app. Trigger it as many times as you want\u2014DBOS always comes back, resuming from exactly where it left off!"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@app.post("/crash_application")\ndef crash_application():\n    os._exit(1)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"try-it-yourself",children:"Try it Yourself!"}),"\n",(0,s.jsx)(t.h3,{id:"deploying-to-the-cloud",children:"Deploying to the Cloud"}),"\n",(0,s.jsx)(t.p,{children:"To deploy this example to DBOS Cloud, first install the Cloud CLI (requires Node):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"npm i -g @dbos-inc/dbos-cloud\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Then clone the ",(0,s.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"dbos-demo-apps"})," repository and deploy:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps.git\ncd python/widget-store\ndbos-cloud app deploy\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This command outputs a URL\u2014visit it to see your app!\nYou can also visit the ",(0,s.jsx)(t.a,{href:"https://console.dbos.dev/login-redirect",children:"DBOS Cloud Console"})," to see your app's status and logs."]}),"\n",(0,s.jsx)(t.h3,{id:"running-locally",children:"Running Locally"}),"\n",(0,s.jsxs)(t.p,{children:["First, clone and enter the ",(0,s.jsx)(t.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"dbos-demo-apps"})," repository:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps.git\ncd python/widget-store\n"})}),"\n",(0,s.jsx)(t.p,{children:"Then create a virtual environment:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"python3 -m venv .venv\nsource .venv/bin/activate\n"})}),"\n",(0,s.jsx)(t.p,{children:"Then start your app:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"pip install -r requirements.txt\ndbos migrate\ndbos start\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Visit ",(0,s.jsx)(t.a,{href:"http://localhost:8000",children:"http://localhost:8000"})," to see your app!"]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8662:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/widget_store_ui-79bb688e390e2df7d21955f49e6bd036.png"},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);