"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[2537],{9404:(o,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"production/self-hosting/conductor","title":"DBOS Conductor","description":"The simplest way to operate DBOS durable workflows in production is to connect your application to DBOS Conductor.","source":"@site/docs/production/self-hosting/conductor.md","sourceDirName":"production/self-hosting","slug":"/production/self-hosting/conductor","permalink":"/production/self-hosting/conductor","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"DBOS Conductor"},"sidebar":"tutorialSidebar","previous":{"title":"Deploying To Production","permalink":"/production/"},"next":{"title":"Workflow Management","permalink":"/production/self-hosting/workflow-management"}}');var r=t(4848),i=t(8453);const s={sidebar_position:10,title:"DBOS Conductor"},a=void 0,c={},l=[{value:"Connecting To Conductor",id:"connecting-to-conductor",level:2},{value:"Managing Conductor Applications",id:"managing-conductor-applications",level:2}];function d(o){const e={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...o.components},{TabItem:n,Tabs:s}=e;return n||p("TabItem",!0),s||p("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"The simplest way to operate DBOS durable workflows in production is to connect your application to DBOS Conductor.\nConductor is a managed service that helps you operate DBOS applications.\nIt provides:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/production/self-hosting/workflow-recovery",children:(0,r.jsx)(e.strong,{children:"Distributed workflow recovery"})}),": In a distributed environment with many executors running durable workflows, Conductor automatically detects when the execution of a durable workflow is interrupted (for example, if its executor is restarted, interrupted, or crashes) and recovers the workflow to another healthy executor."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/production/self-hosting/workflow-management",children:(0,r.jsx)(e.strong,{children:"Workflow and queue observability"})}),": Conductor provides dashboards of all active and past workflows and all queued tasks, including their status, inputs, outputs, and steps."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/production/self-hosting/workflow-management",children:(0,r.jsx)(e.strong,{children:"Workflow and queue management"})}),": From the Conductor dashboard, cancel, resume, or restart any workflow execution and manage the tasks in your distributed queues."]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"connecting-to-conductor",children:"Connecting To Conductor"}),"\n",(0,r.jsx)(e.admonition,{type:"tip",children:(0,r.jsx)(e.p,{children:"Conductor is not part of your application's critical path.\nIf your connection to Conductor is interrupted, your applications will continue operating normally.\nRecovery, observability, and workflow management will automatically resume once connectivity is restored."})}),"\n",(0,r.jsxs)(e.p,{children:["To connect your application to Conductor, first register your application on the ",(0,r.jsx)(e.a,{href:"https://console.dbos.dev",children:"DBOS console"}),".\n",(0,r.jsx)(e.strong,{children:"The name you register must match the name you give your application in its configuration."})]}),"\n",(0,r.jsx)("img",{src:t(7835).A,alt:"Workflow List",width:"800",className:"custom-img"}),"\n",(0,r.jsxs)(e.p,{children:["Next, generate an API key.\nBy default, API keys do not expire, though they may be revoked at any time from the ",(0,r.jsx)(e.a,{href:"https://staging.console.dbos.dev/settings/apikey",children:"key settings page"}),":"]}),"\n",(0,r.jsx)("img",{src:t(4697).A,alt:"Workflow List",width:"800",className:"custom-img"}),"\n",(0,r.jsx)(e.p,{children:"Finally, supply that API key to your DBOS application to connect it to Conductor.\nThis initiates a websocket connection with Conductor:"}),"\n",(0,r.jsxs)(s,{groupId:"language",queryString:"language",children:[(0,r.jsx)(n,{value:"python",label:"Python",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'conductor_key=os.environ.get("DBOS_CONDUCTOR_KEY", None)\nDBOS(conductor_key=conductor_key)\n'})})}),(0,r.jsx)(n,{value:"typescript",label:"TypeScript",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const conductorKey = process.env.DBOS_CONDUCTOR_KEY\nawait DBOS.launch({conductorKey})\n"})})})]}),"\n",(0,r.jsx)(e.h2,{id:"managing-conductor-applications",children:"Managing Conductor Applications"}),"\n",(0,r.jsx)(e.p,{children:"You can view all applications registered with Conductor on the DBOS Console:"}),"\n",(0,r.jsx)("img",{src:t(4049).A,alt:"Workflow List",width:"800",className:"custom-img"}),"\n",(0,r.jsx)(e.p,{children:"On your application's page, you can see all executors (processes) running that application that are currently connected to Conductor.\nExecutors are identified by a unique ID that they generate and print on startup.\nWhen you restart an executor, it generates a new ID."}),"\n",(0,r.jsx)("img",{src:t(6837).A,alt:"Workflow List",width:"800",className:"custom-img"}),"\n",(0,r.jsxs)(e.p,{children:["Conductor uses a WebSocket-based protocol to exchange workflow metadata and commands with your application.  An application is shown as ",(0,r.jsx)(e.em,{children:"available"})," in Conductor when at least one of its processes is connected.  Conductor has no access to your application's database or other private data.  As a result, workflow-related features are only available while your application is connected to Conductor over this metadata-only connection."]})]})}function u(o={}){const{wrapper:e}={...(0,i.R)(),...o.components};return e?(0,r.jsx)(e,{...o,children:(0,r.jsx)(d,{...o})}):d(o)}function p(o,e){throw new Error("Expected "+(e?"component":"object")+" `"+o+"` to be defined: you likely forgot to import, pass, or provide it.")}},6837:(o,e,t)=>{t.d(e,{A:()=>n});const n=t.p+"assets/images/app-page-4188f1dd42604a75835ad77a3059bacb.png"},4697:(o,e,t)=>{t.d(e,{A:()=>n});const n=t.p+"assets/images/conductor-key-fb78817000876707d9949b837541c784.png"},4049:(o,e,t)=>{t.d(e,{A:()=>n});const n=t.p+"assets/images/list-apps-1dcd0ee0e67006bd26f1a94bdb5df5e5.png"},7835:(o,e,t)=>{t.d(e,{A:()=>n});const n=t.p+"assets/images/register-app-8970120882c0baa76741f434eb6e5cd8.png"},8453:(o,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var n=t(6540);const r={},i=n.createContext(r);function s(o){const e=n.useContext(i);return n.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function a(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(r):o.components||r:s(o.components),n.createElement(i.Provider,{value:e},o.children)}}}]);