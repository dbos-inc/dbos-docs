"use strict";(self.webpackChunkdbos_docs=self.webpackChunkdbos_docs||[]).push([[9150],{6583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"python/examples/hacker-news-bot","title":"Hacker News Slackbot","description":"In this example, we use DBOS to build and deploy a scheduled job that periodically searches Hacker News for people commenting about serverless computing and posts the comments to Slack.","source":"@site/docs/python/examples/hacker-news-bot.md","sourceDirName":"python/examples","slug":"/python/examples/hacker-news-bot","permalink":"/python/examples/hacker-news-bot","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":90,"frontMatter":{"displayed_sidebar":"examplesSidebar","sidebar_position":90,"title":"Hacker News Slackbot"},"sidebar":"examplesSidebar","previous":{"title":"Earthquake Tracker","permalink":"/python/examples/earthquake-tracker"},"next":{"title":"Fault-Tolerant Checkout","permalink":"/typescript/examples/checkout-tutorial"}}');var r=t(4848),o=t(8453);const a={displayed_sidebar:"examplesSidebar",sidebar_position:90,title:"Hacker News Slackbot"},i=void 0,c={},l=[{value:"Import and Initialize the App",id:"import-and-initialize-the-app",level:2},{value:"Searching Hacker News",id:"searching-hacker-news",level:2},{value:"Posting to Slack",id:"posting-to-slack",level:2},{value:"Scheduling the Search",id:"scheduling-the-search",level:2},{value:"Try it Yourself!",id:"try-it-yourself",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In this example, we use DBOS to build and deploy a scheduled job that periodically searches Hacker News for people commenting about serverless computing and posts the comments to Slack."}),"\n",(0,r.jsxs)(n.p,{children:["All source code is ",(0,r.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/hackernews-alerts",children:"available on GitHub"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"import-and-initialize-the-app",children:"Import and Initialize the App"}),"\n",(0,r.jsx)(n.p,{children:"Let's start off with imports and initializing the DBOS app."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import html\nimport os\nimport re\nimport threading\nfrom datetime import UTC, datetime, timedelta\n\nimport requests\nimport slack_sdk\nfrom dbos import DBOS, DBOSConfig\n\nconfig: DBOSConfig = {\n    "name": "hackernews-alerts",\n}\nDBOS(config=config)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"searching-hacker-news",children:"Searching Hacker News"}),"\n",(0,r.jsxs)(n.p,{children:["Next, let's write a function that searches Hacker News.\nThis function uses Algolia's Hacker News Search API to find all comments in the last ",(0,r.jsx)(n.em,{children:"N"})," hours containing a search term.\nIt returns matching comments and links to them.\nWe annotate this function with ",(0,r.jsx)(n.code,{children:"@DBOS.step"})," so later we can durably call it from our scheduled workflow."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef search_hackernews(query: str, window_size_hours: int):\n    threshold = datetime.now(UTC) - timedelta(hours=window_size_hours)\n\n    params = {\n        "tags": "comment",\n        "query": query,\n        "numericFilters": f"created_at_i>{threshold.timestamp()}",\n    }\n\n    response = requests.get("http://hn.algolia.com/api/v1/search", params).json()\n\n    hits = []\n    for hit in response["hits"]:\n        # Reformat the comment by unescaping HTML, adding newlines, and removing HTML tags\n        comment = hit["comment_text"]\n        comment = re.sub("<p>", "\\n", html.unescape(comment))\n        comment = re.sub("<[^<]+?>", "", comment)\n        url = f"https://news.ycombinator.com/item?id={hit[\'objectID\']}"\n        hits.append((comment, url))\n    return hits\n'})}),"\n",(0,r.jsx)(n.h2,{id:"posting-to-slack",children:"Posting to Slack"}),"\n",(0,r.jsxs)(n.p,{children:["Next, let's write a function that posts a Hacker News comment and its URL to Slack.\nThis function requires a Slack bot token supplied through an environment variable.\nWe'll explain later how to generate one.\nAgain, we annotate this function with ",(0,r.jsx)(n.code,{children:"@DBOS.step"})," so later we can durably call it from our scheduled workflow."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@DBOS.step()\ndef post_to_slack(comment: str, url: str):\n    message = f"{comment}\\n\\n{url}"\n    client = slack_sdk.WebClient(token=os.environ["SLACK_HN_BOT_OAUTH_TOKEN"])\n    client.chat_postMessage(\n        channel="hacker-news-alerts",\n        text=message,\n        unfurl_links=False,\n        unfurl_media=False,\n    )\n'})}),"\n",(0,r.jsx)(n.h2,{id:"scheduling-the-search",children:"Scheduling the Search"}),"\n",(0,r.jsxs)(n.p,{children:["Next, let's write a scheduled job that runs the search every hour and posts its findings to Slack.\nThe ",(0,r.jsx)(n.a,{href:"/python/tutorials/scheduled-workflows",children:(0,r.jsx)(n.code,{children:"@DBOS.scheduled"})})," decorator tells DBOS to run this function on a schedule defined in ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"crontab syntax"}),", in this case once per hour.\nThe ",(0,r.jsx)(n.a,{href:"/python/tutorials/workflow-tutorial",children:(0,r.jsx)(n.code,{children:"@DBOS.workflow"})})," decorator tells DBOS to durably execute this function, so it runs exactly-once per hour and you'll never miss a Hacker News comment or record a duplicate."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@DBOS.scheduled("0 * * * *")\n@DBOS.workflow()\ndef run_hourly(scheduled_time: datetime, actual_time: datetime):\n    results = search_hackernews("serverless", window_size_hours=1)\n    for comment, url in results:\n        post_to_slack(comment, url)\n    DBOS.logger.info(f"Found {len(results)} comments at {str(actual_time)}")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Finally, in our main function, let's launch DBOS, then sleep the main thread forever while the scheduled job runs in the background:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    DBOS.launch()\n    threading.Event().wait()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"try-it-yourself",children:"Try it Yourself!"}),"\n",(0,r.jsxs)(n.p,{children:["Clone and enter the ",(0,r.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps",children:"dbos-demo-apps"})," repository:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/dbos-inc/dbos-demo-apps.git\ncd python/hackernews-alerts\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then follow the instructions in the ",(0,r.jsx)(n.a,{href:"https://github.com/dbos-inc/dbos-demo-apps/tree/main/python/hackernews-alerts",children:"README"})," to run the app."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);