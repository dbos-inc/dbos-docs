"use strict";(self.webpackChunkoperon_docs=self.webpackChunkoperon_docs||[]).push([[919],{452:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(5893),o=t(1151);const a={sidebar_position:2,title:"Programming Quickstart - Part 1"},s=void 0,i={id:"getting-started/quickstart-programming-1",title:"Programming Quickstart - Part 1",description:"Now that we have an application up and running, let's learn how to program in Operon!",source:"@site/docs/getting-started/quickstart-programming-1.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart-programming-1",permalink:"/getting-started/quickstart-programming-1",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Programming Quickstart - Part 1"},sidebar:"tutorialSidebar",previous:{title:"Operon Quickstart",permalink:"/getting-started/quickstart"},next:{title:"Programming Quickstart - Part 2",permalink:"/getting-started/quickstart-programming-2"}},c={},l=[{value:"Hello, Database!",id:"hello-database",level:3},{value:"Adding Another Function",id:"adding-another-function",level:3},{value:"Trying it Out",id:"trying-it-out",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Now that we have an application up and running, let's learn how to program in Operon!"}),"\n",(0,r.jsx)(n.h3,{id:"hello-database",children:"Hello, Database!"}),"\n",(0,r.jsxs)(n.p,{children:["Let's look at the code we have so far (in ",(0,r.jsx)(n.code,{children:"src/operations.ts"}),').\nThis "Hello, Database!" program greets users and tracks the count of greetings per user:']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { TransactionContext, OperonTransaction, GetApi, ArgSource, ArgSources } from '@dbos-inc/operon'\nimport { Knex } from 'knex';\n\n// The schema of the database table used in this example.\nexport interface operon_hello {\n  name: string;\n  greet_count: number;\n}\n\nexport class Hello {\n\n  @GetApi('/greeting/:user') // Serve this function from HTTP GET requests to the /greeting endpoint with 'user' as a path parameter\n  @OperonTransaction()  // Run this function as a database transaction\n  static async helloTransaction(ctxt: TransactionContext<Knex>, @ArgSource(ArgSources.URL) user: string) {\n    // Retrieve and increment the number of times this user has been greeted.\n    const query = \"INSERT INTO operon_hello (name, greet_count) VALUES (?, 1) ON CONFLICT (name) DO UPDATE SET greet_count = operon_hello.greet_count + 1 RETURNING greet_count;\"\n    const { rows } = await ctxt.client.raw(query, [user]) as { rows: operon_hello[] };\n    const greet_count = rows[0].greet_count;\n    return `Hello, ${user}! You have been greeted ${greet_count} times.\\n`;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This starter code has a single function, ",(0,r.jsx)(n.code,{children:"helloTransaction"}),", which retrieves and updates a user's greeting count.\nThis function is annotated with three ",(0,r.jsx)(n.em,{children:"decorators"}),": the method decorators ",(0,r.jsx)(n.a,{href:"../api-reference/decorators#getapi",children:(0,r.jsx)(n.code,{children:"@GetApi"})})," and  ",(0,r.jsx)(n.a,{href:"../api-reference/decorators#operontransaction",children:(0,r.jsx)(n.code,{children:"@OperonTransaction"})}),", and the parameter decorator ",(0,r.jsx)(n.a,{href:"../api-reference/decorators#argsource",children:(0,r.jsx)(n.code,{children:"@ArgSource(ArgSources.URL)"})}),".\nDecorators tell Operon to give a function or parameter special properties:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@OperonTransaction()"})," tells Operon to run this function as a ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_transaction",children:"database transaction"}),".\nOperon supplies transactions with a ",(0,r.jsx)(n.a,{href:"../api-reference/contexts#transactioncontextt",children:(0,r.jsx)(n.code,{children:"TransactionContext"})}),", which exposes a database client.\nTo learn more about database operations and transactions in Operon, see ",(0,r.jsx)(n.a,{href:"../tutorials/transaction-tutorial",children:"our guide"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@GetApi('/greeting/:user')"})," tells Operon to serve this function from HTTP GET requests to the ",(0,r.jsx)(n.code,{children:"/greeting"})," endpoint."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@ArgSource(ArgSources.URL)"})," tells Operon to parse this function's ",(0,r.jsx)(n.code,{children:"user"})," parameter from the ",(0,r.jsx)(n.code,{children:":user"})," path parameter in the URL."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To learn more about HTTP endpoints and handlers in Operon, see ",(0,r.jsx)(n.a,{href:"../tutorials/http-serving-tutorial",children:"our guide"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["In this quickstart, we write our database operations in raw SQL (using ",(0,r.jsx)(n.a,{href:"https://knexjs.org/guide/raw.html",children:"knex.raw"}),") to make them easy to follow, but we also support ",(0,r.jsx)(n.a,{href:"https://knexjs.org/guide/query-builder.html",children:"knex's query builder"})," and the popular TypeScript ORMs ",(0,r.jsx)(n.a,{href:"https://www.prisma.io/",children:"Prisma"})," and ",(0,r.jsx)(n.a,{href:"https://typeorm.io/",children:"TypeORM"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"adding-another-function",children:"Adding Another Function"}),"\n",(0,r.jsx)(n.p,{children:"Let's add a new function that lets users clear their greeting count.\nWe'll write another function and annotate it with decorators:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { PostApi } from '@dbos-inc/operon' // Add this to your imports.\n\n@PostApi('/clear/:user') // Serve this function from HTTP POST requests to the /clear endpoint with 'user' as a path parameter\n@OperonTransaction() // Run this function as a database transaction\nstatic async clearTransaction(ctxt: TransactionContext<Knex>, @ArgSource(ArgSources.URL) user: string) {\n  // Delete the database entry for a user.\n  await ctxt.client.raw(\"DELETE FROM operon_hello WHERE NAME = ?\", [user]);\n  return `Cleared greet_count for ${user}!\\n`;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Add this function as a method of the ",(0,r.jsx)(n.code,{children:"Hello"})," class.\nThis new function works similarly to ",(0,r.jsx)(n.code,{children:"helloTransaction"}),".\nThe  ",(0,r.jsx)(n.a,{href:"../api-reference/decorators#operontransaction",children:(0,r.jsx)(n.code,{children:"@OperonTransaction"})})," decorator tells Operon to run it as a database transaction.\nThe ",(0,r.jsx)(n.a,{href:"../api-reference/decorators#postapi",children:(0,r.jsx)(n.code,{children:"@PostApi"})})," decorator tells Operon to serve this function from HTTP POST requests to the ",(0,r.jsx)(n.code,{children:"/clear"})," endpoint."]}),"\n",(0,r.jsx)(n.h3,{id:"trying-it-out",children:"Trying it Out"}),"\n",(0,r.jsx)(n.p,{children:"Now, let's see if this works!\nFirst, build and start the application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run build\nnpx operon start\n"})}),"\n",(0,r.jsx)(n.p,{children:"With the application running, we can query it and observe the greeting count being incremented with each query:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:3000/greeting/operon\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, clear the greeting count and ask for another greeting:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -X POST http://localhost:3000/clear/operon\ncurl http://localhost:3000/greeting/operon\n"})}),"\n",(0,r.jsx)(n.p,{children:"The greeting count should reset back to 1."}),"\n",(0,r.jsx)(n.p,{children:"If you've gotten this far, congratulations on writing your first Operon function!\nMove on to the next part to learn how to use more complex Operon features, like reliable workflows."})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>s});var r=t(7294);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);